webpackJsonp([0],[,,,,function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r=function(){function e(t,n,o){i(this,e),this.$log=t,this.$window=o,this.$timeout=n}return e.$inject=["$log","$timeout","$window"],o(e,[{key:"push",value:function(){var e={data:{title:"Page 2"}};this.navigator.pushPage("pages/page2.html",e),this.$log.debug("Push page")}},{key:"init",value:function(){var e=this;this.$timeout(function(){e.navigator=e.$window.navi,e.title="Page 1"})}}]),e}();t.a=r},function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r=function(){function e(t,n,o){i(this,e),this.$log=t,this.$window=o,this.$timeout=n}return e.$inject=["$log","$timeout","$window"],o(e,[{key:"pop",value:function(){this.navigator.popPage(),this.$log.debug("Pop page")}},{key:"init",value:function(){var e=this;this.$timeout(function(){e.navigator=e.$window.navi;var t=e.navigator.topPage;e.title=t.data.title})}}]),e}();t.a=r},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){"use strict";(function(e){function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}/*! angular-onsenui.js for onsenui - v2.1.0 - 2017-02-01 */
!function(){function e(){}var t=/xyz/.test(function(){xyz})?/\b_super\b/:/.*/;e.extend=function(n){var i=this.prototype,o=Object.create(i);for(var r in n)o[r]="function"==typeof n[r]&&"function"==typeof i[r]&&t.test(n[r])?function(e,t){return function(){var n=this._super;this._super=i[e];var o=t.apply(this,arguments);return this._super=n,o}}(r,n[r]):n[r];var a="function"==typeof o.init?o.hasOwnProperty("init")?o.init:function(){i.init.apply(this,arguments)}:function(){};return a.prototype=o,o.constructor=a,a.extend=e.extend,a},window.Class=e}(),function(e){try{e=angular.module("templates-main")}catch(t){e=angular.module("templates-main",[])}e.run(["$templateCache",function(e){e.put("templates/sliding_menu.tpl",'<div class="onsen-sliding-menu__menu"></div>\n<div class="onsen-sliding-menu__main"></div>\n'),e.put("templates/split_view.tpl",'<div class="onsen-split-view__secondary full-screen"></div>\n<div class="onsen-split-view__main full-screen"></div>\n')}])}(),function(t){function n(){var e=t._readyLock.lock();a.run(["$compile","$rootScope",function(t,n){if("loading"===document.readyState||"uninitialized"==document.readyState)window.addEventListener("DOMContentLoaded",function(){document.body.appendChild(document.createElement("ons-dummy-for-init"))});else{if(!document.body)throw new Error("Invalid initialization state.");document.body.appendChild(document.createElement("ons-dummy-for-init"))}n.$on("$ons-ready",e)}])}function i(){a.value("$onsGlobal",t),a.run(["$compile","$rootScope","$onsen","$q",function(e,n,i,o){t._onsenService=i,t._qService=o,n.ons=window.ons,n.console=window.console,n.alert=window.alert,t.$compile=e}])}function o(){a.run(["$templateCache",function(e){var n=t._internal.getTemplateHTMLAsync;t._internal.getTemplateHTMLAsync=function(t){var i=e.get(t);return i?Promise.resolve(i):n(t)}}])}function r(){t._onsenService=null,t.componentBase=window,t.bootstrap=function(e,t){angular.isArray(e)&&(t=e,e=void 0),e||(e="myOnsenApp"),t=["onsen"].concat(angular.isArray(t)?t:[]);var n=angular.module(e,t),i=window.document;if("loading"==i.readyState||"uninitialized"==i.readyState||"interactive"==i.readyState)i.addEventListener("DOMContentLoaded",function(){angular.bootstrap(i.documentElement,[e])},!1);else{if(!i.documentElement)throw new Error("Invalid state");angular.bootstrap(i.documentElement,[e])}return n},t.findParentComponentUntil=function(e,t){var n;return t instanceof HTMLElement?n=angular.element(t):t instanceof angular.element?n=t:t.target&&(n=angular.element(t.target)),n.inheritedData(e)},t.findComponent=function(e,t){var n=(t?t:document).querySelector(e);return n?angular.element(n).data(n.nodeName.toLowerCase())||null:null},t.compile=function(e){if(!t.$compile)throw new Error("ons.$compile() is not ready. Wait for initialization with ons.ready().");if(!(e instanceof HTMLElement))throw new Error("First argument must be an instance of HTMLElement.");var n=angular.element(e).scope();if(!n)throw new Error("AngularJS Scope is null. Argument DOM element must be attached in DOM document.");t.$compile(e)(n)},t._getOnsenService=function(){if(!this._onsenService)throw new Error("$onsen is not loaded, wait for ons.ready().");return this._onsenService},t._waitDiretiveInit=function(e,t){return function(n,i){if(angular.element(n).data(e))t(n,i);else{var o=function o(){t(n,i),n.removeEventListener(e+":init",o,!1)};n.addEventListener(e+":init",o,!1)}}},t.createAlertDialog=function(e,n){return n=n||{},n.link=function(e){n.parentScope?(t.$compile(angular.element(e))(n.parentScope.$new()),n.parentScope.$evalAsync()):t.compile(e)},t._createAlertDialogOriginal(e,n).then(function(e){return angular.element(e).data("ons-alert-dialog")})},t.createDialog=function(e,n){return n=n||{},n.link=function(e){n.parentScope?(t.$compile(angular.element(e))(n.parentScope.$new()),n.parentScope.$evalAsync()):t.compile(e)},t._createDialogOriginal(e,n).then(function(e){return angular.element(e).data("ons-dialog")})},t.createPopover=function(e,n){return n=n||{},n.link=function(e){n.parentScope?(t.$compile(angular.element(e))(n.parentScope.$new()),n.parentScope.$evalAsync()):t.compile(e)},t._createPopoverOriginal(e,n).then(function(e){return angular.element(e).data("ons-popover")})},t.resolveLoadingPlaceholder=function(n){return t._resolveLoadingPlaceholderOriginal(n,function(n,i){t.compile(n),angular.element(n).scope().$evalAsync(function(){e(i)})})},t._setupLoadingPlaceHolders=function(){}}var a=angular.module("onsen",["templates-main"]);angular.module("onsen.directives",["onsen"]),r(),n(),i(),o()}(window.ons=window.ons||{}),function(){var e=angular.module("onsen");e.factory("AlertDialogView",["$onsen",function(e){var t=Class.extend({init:function(t,n,i){this._scope=t,this._element=n,this._attrs=i,this._clearDerivingMethods=e.deriveMethods(this,this._element[0],["show","hide"]),this._clearDerivingEvents=e.deriveEvents(this,this._element[0],["preshow","postshow","prehide","posthide","cancel"],function(e){return e.alertDialog&&(e.alertDialog=this),e}.bind(this)),this._scope.$on("$destroy",this._destroy.bind(this))},_destroy:function(){this.emit("destroy"),this._element.remove(),this._clearDerivingMethods(),this._clearDerivingEvents(),this._scope=this._attrs=this._element=null}});return MicroEvent.mixin(t),e.derivePropertiesFromElement(t,["disabled","cancelable","visible","onDeviceBackButton"]),t}])}(),angular.module("onsen").value("AlertDialogAnimator",ons._internal.AlertDialogAnimator).value("AndroidAlertDialogAnimator",ons._internal.AndroidAlertDialogAnimator).value("IOSAlertDialogAnimator",ons._internal.IOSAlertDialogAnimator),angular.module("onsen").value("AnimationChooser",ons._internal.AnimatorFactory),function(){var e=angular.module("onsen");e.factory("CarouselView",["$onsen",function(e){var t=Class.extend({init:function(t,n,i){this._element=n,this._scope=t,this._attrs=i,this._scope.$on("$destroy",this._destroy.bind(this)),this._clearDerivingMethods=e.deriveMethods(this,n[0],["setActiveIndex","getActiveIndex","next","prev","refresh","first","last"]),this._clearDerivingEvents=e.deriveEvents(this,n[0],["refresh","postchange","overscroll"],function(e){return e.carousel&&(e.carousel=this),e}.bind(this))},_destroy:function(){this.emit("destroy"),this._clearDerivingEvents(),this._clearDerivingMethods(),this._element=this._scope=this._attrs=null}});return MicroEvent.mixin(t),e.derivePropertiesFromElement(t,["centered","overscrollable","disabled","autoScroll","swipeable","autoScrollRatio","itemCount"]),t}])}(),function(){var e=angular.module("onsen");e.factory("DialogView",["$onsen",function(e){var t=Class.extend({init:function(t,n,i){this._scope=t,this._element=n,this._attrs=i,this._clearDerivingMethods=e.deriveMethods(this,this._element[0],["show","hide"]),this._clearDerivingEvents=e.deriveEvents(this,this._element[0],["preshow","postshow","prehide","posthide","cancel"],function(e){return e.dialog&&(e.dialog=this),e}.bind(this)),this._scope.$on("$destroy",this._destroy.bind(this))},_destroy:function(){this.emit("destroy"),this._element.remove(),this._clearDerivingMethods(),this._clearDerivingEvents(),this._scope=this._attrs=this._element=null}});return t.registerAnimator=function(e,t){return window.ons.DialogElement.registerAnimator(e,t)},MicroEvent.mixin(t),e.derivePropertiesFromElement(t,["disabled","cancelable","visible","onDeviceBackButton"]),t}])}(),angular.module("onsen").value("DialogAnimator",ons._internal.DialogAnimator).value("IOSDialogAnimator",ons._internal.IOSDialogAnimator).value("AndroidDialogAnimator",ons._internal.AndroidDialogAnimator).value("SlideDialogAnimator",ons._internal.SlideDialogAnimator),function(){var e=angular.module("onsen");e.factory("FabView",["$onsen",function(e){var t=Class.extend({init:function(t,n,i){this._element=n,this._scope=t,this._attrs=i,this._scope.$on("$destroy",this._destroy.bind(this)),this._clearDerivingMethods=e.deriveMethods(this,n[0],["show","hide","toggle"])},_destroy:function(){this.emit("destroy"),this._clearDerivingMethods(),this._element=this._scope=this._attrs=null}});return e.derivePropertiesFromElement(t,["disabled","visible"]),MicroEvent.mixin(t),t}])}(),function(){angular.module("onsen").factory("GenericView",["$onsen",function(e){var t=Class.extend({init:function(t,n,i,o){var r=this;if(o={},this._element=n,this._scope=t,this._attrs=i,o.directiveOnly){if(!o.modifierTemplate)throw new Error("options.modifierTemplate is undefined.");e.addModifierMethods(this,o.modifierTemplate,n)}else e.addModifierMethodsForCustomElements(this,n);e.cleaner.onDestroy(t,function(){r._events=void 0,e.removeModifierMethods(r),o.onDestroy&&o.onDestroy(r),e.clearComponent({scope:t,attrs:i,element:n}),r=n=r._element=r._scope=t=r._attrs=i=o=null})}});return t.register=function(n,i,o,r){var a=new t(n,i,o,r);if(!r.viewKey)throw new Error("options.viewKey is required.");e.declareVarAttribute(o,a),i.data(r.viewKey,a);var s=r.onDestroy||angular.noop;return r.onDestroy=function(e){s(e),i.data(r.viewKey,null)},a},MicroEvent.mixin(t),t}])}(),function(){var e=angular.module("onsen");e.factory("LazyRepeatView",["AngularLazyRepeatDelegate",function(e){var t=Class.extend({init:function(t,n,i,o){var r=this;this._element=n,this._scope=t,this._attrs=i,this._linker=o,ons._util.updateParentPosition(n[0]);var a=this._scope.$eval(this._attrs.onsLazyRepeat),s=new e(a,n[0],n.scope());this._provider=new ons._internal.LazyRepeatProvider(n[0].parentNode,s),a.refresh=this._provider.refresh.bind(this._provider),n.remove(),this._scope.$watch(s.countItems.bind(s),this._provider._onChange.bind(this._provider)),this._scope.$on("$destroy",function(){r._element=r._scope=r._attrs=r._linker=null})}});return t}])}();var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r=function e(t,n,i){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var r=Object.getPrototypeOf(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(i)};!function(){angular.module("onsen").factory("AngularLazyRepeatDelegate",["$compile",function(e){var a=["ons-lazy-repeat","ons:lazy:repeat","ons_lazy_repeat","data-ons-lazy-repeat","x-ons-lazy-repeat"],s=function(s){function c(i,o,r){t(this,c);var s=n(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,i,o));return s._parentScope=r,a.forEach(function(e){return o.removeAttribute(e)}),s._linker=e(o?o.cloneNode(!0):null),s}return i(c,s),o(c,[{key:"configureItemScope",value:function(e,t){this._userDelegate.configureItemScope instanceof Function&&this._userDelegate.configureItemScope(e,t)}},{key:"destroyItemScope",value:function(e,t){this._userDelegate.destroyItemScope instanceof Function&&this._userDelegate.destroyItemScope(e,t)}},{key:"_usingBinding",value:function(){if(this._userDelegate.configureItemScope)return!0;if(this._userDelegate.createItemContent)return!1;throw new Error("`lazy-repeat` delegate object is vague.")}},{key:"loadItemElement",value:function(e,t,n){this._prepareItemElement(e,function(e){var i=e.element,o=e.scope;t.appendChild(i),n({element:i,scope:o})})}},{key:"_prepareItemElement",value:function(t,n){var i=this,o=this._parentScope.$new();this._addSpecialProperties(t,o),this._usingBinding()&&this.configureItemScope(t,o),this._linker(o,function(r){var a=r[0];i._usingBinding()||(a=i._userDelegate.createItemContent(t,a),e(a)(o)),n({element:a,scope:o})})}},{key:"_addSpecialProperties",value:function(e,t){var n=this.countItems()-1;angular.extend(t,{$index:e,$first:0===e,$last:e===n,$middle:0!==e&&e!==n,$even:e%2===0,$odd:e%2===1})}},{key:"updateItem",value:function(e,t){var n=this;this._usingBinding()?t.scope.$evalAsync(function(){return n.configureItemScope(e,t.scope)}):r(c.prototype.__proto__||Object.getPrototypeOf(c.prototype),"updateItem",this).call(this,e,t)}},{key:"destroyItem",value:function(e,t){this._usingBinding()?this.destroyItemScope(e,t.scope):r(c.prototype.__proto__||Object.getPrototypeOf(c.prototype),"destroyItem",this).call(this,e,t.element),t.scope.$destroy()}},{key:"destroy",value:function(){r(c.prototype.__proto__||Object.getPrototypeOf(c.prototype),"destroy",this).call(this),this._scope=null}}]),c}(ons._internal.LazyRepeatDelegate);return s}])}(),function(){var e=angular.module("onsen");e.value("ModalAnimator",ons._internal.ModalAnimator),e.value("FadeModalAnimator",ons._internal.FadeModalAnimator),e.factory("ModalView",["$onsen","$parse",function(e,t){var n=Class.extend({_element:void 0,_scope:void 0,init:function(e,n,i){this._scope=e,this._element=n,this._scope.$on("$destroy",this._destroy.bind(this)),n[0]._animatorFactory.setAnimationOptions(t(i.animationOptions)())},show:function(e){return this._element[0].show(e)},hide:function(e){return this._element[0].hide(e)},toggle:function(e){return this._element[0].toggle(e)},_destroy:function(){this.emit("destroy",{page:this}),this._events=this._element=this._scope=null}});return n.registerAnimator=function(e,t){return window.ons.ModalElement.registerAnimator(e,t)},MicroEvent.mixin(n),e.derivePropertiesFromElement(n,["onDeviceBackButton"]),n}])}(),function(){var e=angular.module("onsen");e.factory("NavigatorView",["$compile","$onsen",function(e,t){var n=Class.extend({_element:void 0,_attrs:void 0,_scope:void 0,init:function(e,n,i){this._element=n||angular.element(window.document.body),this._scope=e||this._element.scope(),this._attrs=i,this._previousPageScope=null,this._boundOnPrepop=this._onPrepop.bind(this),this._element.on("prepop",this._boundOnPrepop),this._scope.$on("$destroy",this._destroy.bind(this)),this._clearDerivingEvents=t.deriveEvents(this,n[0],["prepush","postpush","prepop","postpop","init","show","hide","destroy"],function(e){return e.navigator&&(e.navigator=this),e}.bind(this)),this._clearDerivingMethods=t.deriveMethods(this,n[0],["insertPage","pushPage","bringPageTop","popPage","replacePage","resetToPage","canPopPage"])},_onPrepop:function(e){var t=e.detail.navigator.pages;angular.element(t[t.length-2]).data("_scope").$evalAsync()},_destroy:function(){this.emit("destroy"),this._clearDerivingEvents(),this._clearDerivingMethods(),this._element.off("prepop",this._boundOnPrepop),this._element=this._scope=this._attrs=null}});return MicroEvent.mixin(n),t.derivePropertiesFromElement(n,["pages","topPage"]),n}])}(),angular.module("onsen").value("NavigatorTransitionAnimator",ons._internal.NavigatorTransitionAnimator).value("FadeTransitionAnimator",ons._internal.FadeNavigatorTransitionAnimator).value("IOSSlideTransitionAnimator",ons._internal.IOSSlideNavigatorTransitionAnimator).value("LiftTransitionAnimator",ons._internal.LiftNavigatorTransitionAnimator).value("NullTransitionAnimator",ons._internal.NavigatorTransitionAnimator).value("SimpleSlideTransitionAnimator",ons._internal.SimpleSlideNavigatorTransitionAnimator),function(){var e=angular.module("onsen");e.factory("OverlaySlidingMenuAnimator",["SlidingMenuAnimator",function(e){var t=e.extend({_blackMask:void 0,_isRight:!1,_element:!1,_menuPage:!1,_mainPage:!1,_width:!1,setup:function(e,t,n,i){i=i||{},this._width=i.width||"90%",this._isRight=!!i.isRight,this._element=e,this._mainPage=t,this._menuPage=n,n.css("box-shadow","0px 0 10px 0px rgba(0, 0, 0, 0.2)"),n.css({width:i.width,display:"none",zIndex:2}),n.css("-webkit-transform","translate3d(0px, 0px, 0px)"),t.css({zIndex:1}),this._isRight?n.css({right:"-"+i.width,left:"auto"}):n.css({right:"auto",left:"-"+i.width}),this._blackMask=angular.element("<div></div>").css({backgroundColor:"black",top:"0px",left:"0px",right:"0px",bottom:"0px",position:"absolute",display:"none",zIndex:0}),e.prepend(this._blackMask)},onResized:function(e){if(this._menuPage.css("width",e.width),this._isRight?this._menuPage.css({right:"-"+e.width,left:"auto"}):this._menuPage.css({right:"auto",left:"-"+e.width}),e.isOpened){var t=this._menuPage[0].clientWidth,n=this._generateMenuPageStyle(t);ons.animit(this._menuPage[0]).queue(n).play()}},destroy:function(){this._blackMask&&(this._blackMask.remove(),this._blackMask=null),this._mainPage.removeAttr("style"),this._menuPage.removeAttr("style"),this._element=this._mainPage=this._menuPage=null},openMenu:function(e,t){var n=t===!0?0:this.duration,i=t===!0?0:this.delay;this._menuPage.css("display","block"),this._blackMask.css("display","block");var o=this._menuPage[0].clientWidth,r=this._generateMenuPageStyle(o),a=this._generateMainPageStyle(o);setTimeout(function(){ons.animit(this._mainPage[0]).wait(i).queue(a,{duration:n,timing:this.timing}).queue(function(t){e(),t()}).play(),ons.animit(this._menuPage[0]).wait(i).queue(r,{duration:n,timing:this.timing}).play()}.bind(this),1e3/60)},closeMenu:function(e,t){var n=t===!0?0:this.duration,i=t===!0?0:this.delay;this._blackMask.css({display:"block"});var o=this._generateMenuPageStyle(0),r=this._generateMainPageStyle(0);setTimeout(function(){ons.animit(this._mainPage[0]).wait(i).queue(r,{duration:n,timing:this.timing}).queue(function(t){this._menuPage.css("display","none"),e(),t()}.bind(this)).play(),ons.animit(this._menuPage[0]).wait(i).queue(o,{duration:n,timing:this.timing}).play()}.bind(this),1e3/60)},translateMenu:function(e){this._menuPage.css("display","block"),this._blackMask.css({display:"block"});var t=this._generateMenuPageStyle(Math.min(e.maxDistance,e.distance)),n=this._generateMainPageStyle(Math.min(e.maxDistance,e.distance));delete n.opacity,ons.animit(this._menuPage[0]).queue(t).play(),Object.keys(n).length>0&&ons.animit(this._mainPage[0]).queue(n).play()},_generateMenuPageStyle:function(e){var t=this._isRight?-e:e,n="translate3d("+t+"px, 0, 0)";return{transform:n,"box-shadow":0===e?"none":"0px 0 10px 0px rgba(0, 0, 0, 0.2)"}},_generateMainPageStyle:function(e){var t=this._menuPage[0].clientWidth,n=1-.1*e/t;return{opacity:n}},copy:function(){return new t}});return t}])}(),function(){var e=angular.module("onsen");e.factory("PageView",["$onsen","$parse",function(e,t){var n=Class.extend({init:function(n,i,o){var r=this;this._scope=n,this._element=i,this._attrs=o,this._clearListener=n.$on("$destroy",this._destroy.bind(this)),this._clearDerivingEvents=e.deriveEvents(this,i[0],["init","show","hide","destroy"]),Object.defineProperty(this,"onDeviceBackButton",{get:function(){return r._element[0].onDeviceBackButton},set:function(e){r._userBackButtonHandler||r._enableBackButtonHandler(),r._userBackButtonHandler=e}}),(this._attrs.ngDeviceBackButton||this._attrs.onDeviceBackButton)&&this._enableBackButtonHandler(),this._attrs.ngInfiniteScroll&&(this._element[0].onInfiniteScroll=function(e){t(r._attrs.ngInfiniteScroll)(r._scope)(e)})},_enableBackButtonHandler:function(){this._userBackButtonHandler=angular.noop,this._element[0].onDeviceBackButton=this._onDeviceBackButton.bind(this)},_onDeviceBackButton:function(e){if(this._userBackButtonHandler(e),this._attrs.ngDeviceBackButton&&t(this._attrs.ngDeviceBackButton)(this._scope,{$event:e}),this._attrs.onDeviceBackButton){var n=window.$event;window.$event=e,new Function(this._attrs.onDeviceBackButton)(),window.$event=n}},_destroy:function(){this._clearDerivingEvents(),this._element=null,this._scope=null,this._clearListener()}});return MicroEvent.mixin(n),n}])}(),function(){angular.module("onsen").factory("PopoverView",["$onsen",function(e){var t=Class.extend({init:function(t,n,i){this._element=n,this._scope=t,this._attrs=i,this._scope.$on("$destroy",this._destroy.bind(this)),this._clearDerivingMethods=e.deriveMethods(this,this._element[0],["show","hide"]),this._clearDerivingEvents=e.deriveEvents(this,this._element[0],["preshow","postshow","prehide","posthide"],function(e){return e.popover&&(e.popover=this),e}.bind(this))},_destroy:function(){this.emit("destroy"),this._clearDerivingMethods(),this._clearDerivingEvents(),this._element.remove(),this._element=this._scope=null}});return MicroEvent.mixin(t),e.derivePropertiesFromElement(t,["cancelable","disabled","onDeviceBackButton"]),t}])}(),angular.module("onsen").value("PopoverAnimator",ons._internal.PopoverAnimator).value("FadePopoverAnimator",ons._internal.FadePopoverAnimator),function(){var e=angular.module("onsen");e.factory("PullHookView",["$onsen","$parse",function(e,t){var n=Class.extend({init:function(t,n,i){var o=this;this._element=n,this._scope=t,this._attrs=i,this._clearDerivingEvents=e.deriveEvents(this,this._element[0],["changestate"],function(e){return e.pullHook&&(e.pullHook=o),e}),this.on("changestate",function(){return o._scope.$evalAsync()}),this._element[0].onAction=function(e){o._attrs.ngAction?o._scope.$eval(o._attrs.ngAction,{$done:e}):o.onAction?o.onAction(e):e()},this._scope.$on("$destroy",this._destroy.bind(this))},_destroy:function(){this.emit("destroy"),this._clearDerivingEvents(),this._element=this._scope=this._attrs=null}});return MicroEvent.mixin(n),e.derivePropertiesFromElement(n,["state","pullDistance","height","thresholdHeight","disabled"]),n}])}(),function(){var e=angular.module("onsen");e.factory("PushSlidingMenuAnimator",["SlidingMenuAnimator",function(e){var t=e.extend({_isRight:!1,_element:void 0,_menuPage:void 0,_mainPage:void 0,_width:void 0,setup:function(e,t,n,i){i=i||{},this._element=e,this._mainPage=t,this._menuPage=n,this._isRight=!!i.isRight,this._width=i.width||"90%",n.css({width:i.width,display:"none"}),this._isRight?n.css({right:"-"+i.width,left:"auto"}):n.css({right:"auto",left:"-"+i.width})},onResized:function(e){if(this._menuPage.css("width",e.width),this._isRight?this._menuPage.css({right:"-"+e.width,left:"auto"}):this._menuPage.css({right:"auto",left:"-"+e.width}),e.isOpened){var t=this._menuPage[0].clientWidth,n=this._generateAbovePageTransform(t),i=this._generateBehindPageStyle(t);ons.animit(this._mainPage[0]).queue({transform:n}).play(),ons.animit(this._menuPage[0]).queue(i).play()}},destroy:function(){this._mainPage.removeAttr("style"),this._menuPage.removeAttr("style"),this._element=this._mainPage=this._menuPage=null},openMenu:function(e,t){var n=t===!0?0:this.duration,i=t===!0?0:this.delay;this._menuPage.css("display","block");var o=this._menuPage[0].clientWidth,r=this._generateAbovePageTransform(o),a=this._generateBehindPageStyle(o);setTimeout(function(){ons.animit(this._mainPage[0]).wait(i).queue({transform:r},{duration:n,timing:this.timing}).queue(function(t){e(),t()}).play(),ons.animit(this._menuPage[0]).wait(i).queue(a,{duration:n,timing:this.timing}).play()}.bind(this),1e3/60)},closeMenu:function(e,t){var n=t===!0?0:this.duration,i=t===!0?0:this.delay,o=this._generateAbovePageTransform(0),r=this._generateBehindPageStyle(0);setTimeout(function(){ons.animit(this._mainPage[0]).wait(i).queue({transform:o},{duration:n,timing:this.timing}).queue({transform:"translate3d(0, 0, 0)"}).queue(function(t){this._menuPage.css("display","none"),e(),t()}.bind(this)).play(),ons.animit(this._menuPage[0]).wait(i).queue(r,{duration:n,timing:this.timing}).queue(function(e){e()}).play()}.bind(this),1e3/60)},translateMenu:function(e){this._menuPage.css("display","block");var t=this._generateAbovePageTransform(Math.min(e.maxDistance,e.distance)),n=this._generateBehindPageStyle(Math.min(e.maxDistance,e.distance));ons.animit(this._mainPage[0]).queue({transform:t}).play(),ons.animit(this._menuPage[0]).queue(n).play()},_generateAbovePageTransform:function(e){var t=this._isRight?-e:e,n="translate3d("+t+"px, 0, 0)";return n},_generateBehindPageStyle:function(e){var t=this._isRight?-e:e,n="translate3d("+t+"px, 0, 0)";return{transform:n}},copy:function(){return new t}});return t}])}(),function(){var e=angular.module("onsen");e.factory("RevealSlidingMenuAnimator",["SlidingMenuAnimator",function(e){var t=e.extend({_blackMask:void 0,_isRight:!1,_menuPage:void 0,_element:void 0,_mainPage:void 0,setup:function(e,t,n,i){this._element=e,this._menuPage=n,this._mainPage=t,this._isRight=!!i.isRight,this._width=i.width||"90%",t.css({boxShadow:"0px 0 10px 0px rgba(0, 0, 0, 0.2)"}),n.css({width:i.width,opacity:.9,display:"none"}),this._isRight?n.css({right:"0px",left:"auto"}):n.css({right:"auto",left:"0px"}),this._blackMask=angular.element("<div></div>").css({backgroundColor:"black",top:"0px",left:"0px",right:"0px",bottom:"0px",position:"absolute",display:"none"}),e.prepend(this._blackMask),ons.animit(t[0]).queue({transform:"translate3d(0, 0, 0)"}).play()},onResized:function(e){if(this._width=e.width,this._menuPage.css("width",this._width),e.isOpened){var t=this._menuPage[0].clientWidth,n=this._generateAbovePageTransform(t),i=this._generateBehindPageStyle(t);ons.animit(this._mainPage[0]).queue({transform:n}).play(),ons.animit(this._menuPage[0]).queue(i).play()}},destroy:function(){this._blackMask&&(this._blackMask.remove(),this._blackMask=null),this._mainPage&&this._mainPage.attr("style",""),this._menuPage&&this._menuPage.attr("style",""),this._mainPage=this._menuPage=this._element=void 0},openMenu:function(e,t){var n=t===!0?0:this.duration,i=t===!0?0:this.delay;this._menuPage.css("display","block"),this._blackMask.css("display","block");var o=this._menuPage[0].clientWidth,r=this._generateAbovePageTransform(o),a=this._generateBehindPageStyle(o);setTimeout(function(){ons.animit(this._mainPage[0]).wait(i).queue({transform:r},{duration:n,timing:this.timing}).queue(function(t){e(),t()}).play(),ons.animit(this._menuPage[0]).wait(i).queue(a,{duration:n,timing:this.timing}).play()}.bind(this),1e3/60)},closeMenu:function(e,t){var n=t===!0?0:this.duration,i=t===!0?0:this.delay;this._blackMask.css("display","block");var o=this._generateAbovePageTransform(0),r=this._generateBehindPageStyle(0);setTimeout(function(){ons.animit(this._mainPage[0]).wait(i).queue({transform:o},{duration:n,timing:this.timing}).queue({transform:"translate3d(0, 0, 0)"}).queue(function(t){this._menuPage.css("display","none"),e(),t()}.bind(this)).play(),ons.animit(this._menuPage[0]).wait(i).queue(r,{duration:n,timing:this.timing}).queue(function(e){e()}).play()}.bind(this),1e3/60)},translateMenu:function(e){this._menuPage.css("display","block"),this._blackMask.css("display","block");var t=this._generateAbovePageTransform(Math.min(e.maxDistance,e.distance)),n=this._generateBehindPageStyle(Math.min(e.maxDistance,e.distance));delete n.opacity,ons.animit(this._mainPage[0]).queue({transform:t}).play(),ons.animit(this._menuPage[0]).queue(n).play()},_generateAbovePageTransform:function(e){var t=this._isRight?-e:e,n="translate3d("+t+"px, 0, 0)";return n},_generateBehindPageStyle:function(e){var t=this._menuPage[0].getBoundingClientRect().width,n=(e-t)/t*10;n=isNaN(n)?0:Math.max(Math.min(n,0),-10);var i=this._isRight?-n:n,o="translate3d("+i+"%, 0, 0)",r=1+n/100;return{transform:o,opacity:r}},copy:function(){return new t}});return t}])}(),function(){var t=angular.module("onsen"),n=Class.extend({_distance:0,_maxDistance:void 0,init:function(e){if(!angular.isNumber(e.maxDistance))throw new Error("options.maxDistance must be number");this.setMaxDistance(e.maxDistance)},setMaxDistance:function(e){if(e<=0)throw new Error("maxDistance must be greater then zero.");this.isOpened()&&(this._distance=e),this._maxDistance=e},shouldOpen:function(){return!this.isOpened()&&this._distance>=this._maxDistance/2},shouldClose:function(){return!this.isClosed()&&this._distance<this._maxDistance/2},openOrClose:function(e){this.shouldOpen()?this.open(e):this.shouldClose()&&this.close(e)},close:function(e){var t=e.callback||function(){};this.isClosed()?t():(this._distance=0,this.emit("close",e))},open:function(e){var t=e.callback||function(){};this.isOpened()?t():(this._distance=this._maxDistance,this.emit("open",e))},isClosed:function(){return 0===this._distance},isOpened:function(){return this._distance===this._maxDistance},getX:function(){return this._distance},getMaxDistance:function(){return this._maxDistance},translate:function(e){this._distance=Math.max(1,Math.min(this._maxDistance-1,e));var t={distance:this._distance,maxDistance:this._maxDistance};this.emit("translate",t)},toggle:function(){this.isClosed()?this.open():this.close()}});MicroEvent.mixin(n),t.factory("SlidingMenuView",["$onsen","$compile","$parse","AnimationChooser","SlidingMenuAnimator","RevealSlidingMenuAnimator","PushSlidingMenuAnimator","OverlaySlidingMenuAnimator",function(t,i,o,r,a,s,c,l){var u=Class.extend({_scope:void 0,_attrs:void 0,_element:void 0,_menuPage:void 0,_mainPage:void 0,_doorLock:void 0,_isRightMenu:!1,init:function(e,i,s){this._scope=e,this._attrs=s,this._element=i,this._menuPage=angular.element(i[0].querySelector(".onsen-sliding-menu__menu")),this._mainPage=angular.element(i[0].querySelector(".onsen-sliding-menu__main")),this._doorLock=new ons._DoorLock,this._isRightMenu="right"===s.side,this._mainPageGestureDetector=new ons.GestureDetector(this._mainPage[0]),this._boundOnTap=this._onTap.bind(this);var c=this._normalizeMaxSlideDistanceAttr();this._logic=new n({maxDistance:Math.max(c,1)}),this._logic.on("translate",this._translate.bind(this)),this._logic.on("open",function(e){this._open(e)}.bind(this)),this._logic.on("close",function(e){this._close(e)}.bind(this)),s.$observe("maxSlideDistance",this._onMaxSlideDistanceChanged.bind(this)),s.$observe("swipeable",this._onSwipeableChanged.bind(this)),this._boundOnWindowResize=this._onWindowResize.bind(this),window.addEventListener("resize",this._boundOnWindowResize),this._boundHandleEvent=this._handleEvent.bind(this),this._bindEvents(),s.mainPage&&this.setMainPage(s.mainPage),s.menuPage&&this.setMenuPage(s.menuPage),this._deviceBackButtonHandler=ons._deviceBackButtonDispatcher.createHandler(this._element[0],this._onDeviceBackButton.bind(this));var l=this._doorLock.lock();window.setTimeout(function(){var e=this._normalizeMaxSlideDistanceAttr();this._logic.setMaxDistance(e),this._menuPage.css({opacity:1});var t=new r({animators:u._animatorDict,baseClass:a,baseClassName:"SlidingMenuAnimator",defaultAnimation:s.type,defaultAnimationOptions:o(s.animationOptions)()});this._animator=t.newAnimator(),this._animator.setup(this._element,this._mainPage,this._menuPage,{isRight:this._isRightMenu,width:this._attrs.maxSlideDistance||"90%"}),l()}.bind(this),400),e.$on("$destroy",this._destroy.bind(this)),this._clearDerivingEvents=t.deriveEvents(this,i[0],["init","show","hide","destroy"]),s.swipeable||this.setSwipeable(!0)},getDeviceBackButtonHandler:function(){return this._deviceBackButtonHandler},_onDeviceBackButton:function(e){this.isMenuOpened()?this.closeMenu():e.callParentHandler()},_onTap:function(){this.isMenuOpened()&&this.closeMenu()},_refreshMenuPageWidth:function(){var e="maxSlideDistance"in this._attrs?this._attrs.maxSlideDistance:"90%";this._animator&&this._animator.onResized({isOpened:this._logic.isOpened(),width:e})},_destroy:function(){this.emit("destroy"),this._clearDerivingEvents(),this._deviceBackButtonHandler.destroy(),window.removeEventListener("resize",this._boundOnWindowResize),this._mainPageGestureDetector.off("tap",this._boundOnTap),this._element=this._scope=this._attrs=null},_onSwipeableChanged:function(e){e=""===e||void 0===e||"true"==e,this.setSwipeable(e)},setSwipeable:function(e){e?this._activateGestureDetector():this._deactivateGestureDetector()},_onWindowResize:function(){this._recalculateMAX(),this._refreshMenuPageWidth()},_onMaxSlideDistanceChanged:function(){this._recalculateMAX(),this._refreshMenuPageWidth()},_normalizeMaxSlideDistanceAttr:function(){var e=this._attrs.maxSlideDistance;if("maxSlideDistance"in this._attrs){if("string"!=typeof e)throw new Error("invalid state");e.indexOf("px",e.length-2)!==-1?e=parseInt(e.replace("px",""),10):e.indexOf("%",e.length-1)>0&&(e=e.replace("%",""),e=parseFloat(e)/100*this._mainPage[0].clientWidth)}else e=.9*this._mainPage[0].clientWidth;return e},_recalculateMAX:function(){var e=this._normalizeMaxSlideDistanceAttr();e&&this._logic.setMaxDistance(parseInt(e,10))},_activateGestureDetector:function(){this._gestureDetector.on("touch dragleft dragright swipeleft swiperight release",this._boundHandleEvent)},_deactivateGestureDetector:function(){
this._gestureDetector.off("touch dragleft dragright swipeleft swiperight release",this._boundHandleEvent)},_bindEvents:function(){this._gestureDetector=new ons.GestureDetector(this._element[0],{dragMinDistance:1})},_appendMainPage:function(t,n){var o=this,r=this._scope.$new(),a=angular.element(n),s=i(a);this._mainPage.append(a),this._currentPageElement&&(this._currentPageElement.remove(),this._currentPageScope.$destroy()),s(r),this._currentPageElement=a,this._currentPageScope=r,this._currentPageUrl=t,e(function(){o._currentPageElement[0]._show()})},_appendMenuPage:function(e){var t=this._scope.$new(),n=angular.element(e),o=i(n);this._menuPage.append(n),this._currentMenuPageScope&&(this._currentMenuPageScope.$destroy(),this._currentMenuPageElement.remove()),o(t),this._currentMenuPageElement=n,this._currentMenuPageScope=t},setMenuPage:function(e,n){if(!e)throw new Error("cannot set undefined page");n=n||{},n.callback=n.callback||function(){};var i=this;t.getPageHTMLAsync(e).then(function(e){i._appendMenuPage(angular.element(e)),n.closeMenu&&i.close(),n.callback()},function(){throw new Error("Page is not found: "+e)})},setMainPage:function(e,n){n=n||{},n.callback=n.callback||function(){};var i=function(){n.closeMenu&&this.close(),n.callback()}.bind(this);if(this._currentPageUrl===e)return void i();if(!e)throw new Error("cannot set undefined page");var o=this;t.getPageHTMLAsync(e).then(function(t){o._appendMainPage(e,t),i()},function(){throw new Error("Page is not found: "+page)})},_handleEvent:function(e){if(!this._doorLock.isLocked())switch(this._isInsideIgnoredElement(e.target)&&this._deactivateGestureDetector(),e.type){case"dragleft":case"dragright":if(this._logic.isClosed()&&!this._isInsideSwipeTargetArea(e))return;e.gesture.preventDefault();var t=e.gesture.deltaX,n=this._isRightMenu?-t:t,i=e.gesture.startEvent;if("isOpened"in i||(i.isOpened=this._logic.isOpened()),n<0&&this._logic.isClosed())break;if(n>0&&this._logic.isOpened())break;var o=i.isOpened?n+this._logic.getMaxDistance():n;this._logic.translate(o);break;case"swipeleft":if(e.gesture.preventDefault(),this._logic.isClosed()&&!this._isInsideSwipeTargetArea(e))return;this._isRightMenu?this.open():this.close(),e.gesture.stopDetect();break;case"swiperight":if(e.gesture.preventDefault(),this._logic.isClosed()&&!this._isInsideSwipeTargetArea(e))return;this._isRightMenu?this.close():this.open(),e.gesture.stopDetect();break;case"release":this._lastDistance=null,this._logic.shouldOpen()?this.open():this._logic.shouldClose()&&this.close()}},_isInsideIgnoredElement:function(e){do{if(e.getAttribute&&e.getAttribute("sliding-menu-ignore"))return!0;e=e.parentNode}while(e);return!1},_isInsideSwipeTargetArea:function(e){var t=e.gesture.center.pageX;"_swipeTargetWidth"in e.gesture.startEvent||(e.gesture.startEvent._swipeTargetWidth=this._getSwipeTargetWidth());var n=e.gesture.startEvent._swipeTargetWidth;return this._isRightMenu?this._mainPage[0].clientWidth-t<n:t<n},_getSwipeTargetWidth:function(){var e=this._attrs.swipeTargetWidth;"string"==typeof e&&(e=e.replace("px",""));var t=parseInt(e,10);return t<0||!e?this._mainPage[0].clientWidth:t},closeMenu:function(){return this.close.apply(this,arguments)},close:function(e){e=e||{},e="function"==typeof e?{callback:e}:e,this._logic.isClosed()||(this.emit("preclose",{slidingMenu:this}),this._doorLock.waitUnlock(function(){this._logic.close(e)}.bind(this)))},_close:function(e){var t=e.callback||function(){},n=this._doorLock.lock(),i="none"==e.animation;this._animator.closeMenu(function(){n(),this._mainPage.children().css("pointer-events",""),this._mainPageGestureDetector.off("tap",this._boundOnTap),this.emit("postclose",{slidingMenu:this}),t()}.bind(this),i)},openMenu:function(){return this.open.apply(this,arguments)},open:function(e){e=e||{},e="function"==typeof e?{callback:e}:e,this.emit("preopen",{slidingMenu:this}),this._doorLock.waitUnlock(function(){this._logic.open(e)}.bind(this))},_open:function(e){var t=e.callback||function(){},n=this._doorLock.lock(),i="none"==e.animation;this._animator.openMenu(function(){n(),this._mainPage.children().css("pointer-events","none"),this._mainPageGestureDetector.on("tap",this._boundOnTap),this.emit("postopen",{slidingMenu:this}),t()}.bind(this),i)},toggle:function(e){this._logic.isClosed()?this.open(e):this.close(e)},toggleMenu:function(){return this.toggle.apply(this,arguments)},isMenuOpened:function(){return this._logic.isOpened()},_translate:function(e){this._animator.translateMenu(e)}});return u._animatorDict={default:s,overlay:l,reveal:s,push:c},u.registerAnimator=function(e,t){if(!(t.prototype instanceof a))throw new Error('"Animator" param must inherit SlidingMenuAnimator');this._animatorDict[e]=t},MicroEvent.mixin(u),u}])}(),function(){var e=angular.module("onsen");e.factory("SlidingMenuAnimator",function(){return Class.extend({delay:0,duration:.4,timing:"cubic-bezier(.1, .7, .1, 1)",init:function(e){e=e||{},this.timing=e.timing||this.timing,this.duration=void 0!==e.duration?e.duration:this.duration,this.delay=void 0!==e.delay?e.delay:this.delay},setup:function(e,t,n,i){},onResized:function(e){},openMenu:function(e){},closeClose:function(e){},destroy:function(){},translateMenu:function(e,t,n){},copy:function(){throw new Error("Override copy method.")}})})}(),function(){var e=angular.module("onsen");e.factory("SpeedDialView",["$onsen",function(e){var t=Class.extend({init:function(t,n,i){this._element=n,this._scope=t,this._attrs=i,this._scope.$on("$destroy",this._destroy.bind(this)),this._clearDerivingMethods=e.deriveMethods(this,n[0],["show","hide","showItems","hideItems","isOpen","toggle","toggleItems"]),this._clearDerivingEvents=e.deriveEvents(this,n[0],["open","close"]).bind(this)},_destroy:function(){this.emit("destroy"),this._clearDerivingEvents(),this._clearDerivingMethods(),this._element=this._scope=this._attrs=null}});return MicroEvent.mixin(t),e.derivePropertiesFromElement(t,["disabled","visible","inline"]),t}])}(),function(){var t=angular.module("onsen");t.factory("SplitView",["$compile","RevealSlidingMenuAnimator","$onsen","$onsGlobal",function(t,n,i,o){function r(e){return!isNaN(parseFloat(e))&&isFinite(e)}var a=0,s=1,c=.9,l=Class.extend({init:function(e,t,r){t.addClass("onsen-sliding-menu"),this._element=t,this._scope=e,this._attrs=r,this._mainPage=angular.element(t[0].querySelector(".onsen-split-view__main")),this._secondaryPage=angular.element(t[0].querySelector(".onsen-split-view__secondary")),this._max=this._mainPage[0].clientWidth*c,this._mode=a,this._doorLock=new ons._DoorLock,this._doSplit=!1,this._doCollapse=!1,o.orientation.on("change",this._onResize.bind(this)),this._animator=new n,this._element.css("display","none"),r.mainPage&&this.setMainPage(r.mainPage),r.secondaryPage&&this.setSecondaryPage(r.secondaryPage);var s=this._doorLock.lock();this._considerChangingCollapse(),this._setSize(),setTimeout(function(){this._element.css("display","block"),s()}.bind(this),1e3/60*2),e.$on("$destroy",this._destroy.bind(this)),this._clearDerivingEvents=i.deriveEvents(this,t[0],["init","show","hide","destroy"])},_appendSecondPage:function(e){var n=this._scope.$new(),i=t(e)(n);this._secondaryPage.append(i),this._currentSecondaryPageElement&&(this._currentSecondaryPageElement.remove(),this._currentSecondaryPageScope.$destroy()),this._currentSecondaryPageElement=i,this._currentSecondaryPageScope=n},_appendMainPage:function(n){var i=this,o=this._scope.$new(),r=t(n)(o);this._mainPage.append(r),this._currentPage&&this._currentPageScope.$destroy(),this._currentPage=r,this._currentPageScope=o,e(function(){i._currentPage[0]._show()})},setSecondaryPage:function(e){if(!e)throw new Error("cannot set undefined page");i.getPageHTMLAsync(e).then(function(e){this._appendSecondPage(angular.element(e.trim()))}.bind(this),function(){throw new Error("Page is not found: "+e)})},setMainPage:function(e){if(!e)throw new Error("cannot set undefined page");i.getPageHTMLAsync(e).then(function(e){this._appendMainPage(angular.element(e.trim()))}.bind(this),function(){throw new Error("Page is not found: "+e)})},_onResize:function(){var e=this._mode;this._considerChangingCollapse(),e===s&&this._mode===s&&this._animator.onResized({isOpened:!1,width:"90%"}),this._max=this._mainPage[0].clientWidth*c},_considerChangingCollapse:function(){var e=this._shouldCollapse();e&&this._mode!==s?(this._fireUpdateEvent(),this._doSplit?this._activateSplitMode():this._activateCollapseMode()):e||this._mode!==s||(this._fireUpdateEvent(),this._doCollapse?this._activateCollapseMode():this._activateSplitMode()),this._doCollapse=this._doSplit=!1},update:function(){this._fireUpdateEvent();var e=this._shouldCollapse();this._doSplit?this._activateSplitMode():this._doCollapse?this._activateCollapseMode():e?this._activateCollapseMode():e||this._activateSplitMode(),this._doSplit=this._doCollapse=!1},_getOrientation:function(){return o.orientation.isPortrait()?"portrait":"landscape"},getCurrentMode:function(){return this._mode===s?"collapse":"split"},_shouldCollapse:function(){var e="portrait";if("string"==typeof this._attrs.collapse&&(e=this._attrs.collapse.trim()),"portrait"==e)return o.orientation.isPortrait();if("landscape"==e)return o.orientation.isLandscape();if("width"==e.substr(0,5)){var t=e.split(" ")[1];t.indexOf("px")>=0&&(t=t.substr(0,t.length-2));var n=window.innerWidth;return r(t)&&n<t}var i=window.matchMedia(e);return i.matches},_setSize:function(){if(this._mode===a){this._attrs.mainPageWidth||(this._attrs.mainPageWidth="70");var e=100-this._attrs.mainPageWidth.replace("%","");this._secondaryPage.css({width:e+"%",opacity:1}),this._mainPage.css({width:this._attrs.mainPageWidth+"%"}),this._mainPage.css("left",e+"%")}},_fireEvent:function(e){this.emit(e,{splitView:this,width:window.innerWidth,orientation:this._getOrientation()})},_fireUpdateEvent:function(){var e=this;this.emit("update",{splitView:this,shouldCollapse:this._shouldCollapse(),currentMode:this.getCurrentMode(),split:function(){e._doSplit=!0,e._doCollapse=!1},collapse:function(){e._doSplit=!1,e._doCollapse=!0},width:window.innerWidth,orientation:this._getOrientation()})},_activateCollapseMode:function(){this._mode!==s&&(this._fireEvent("precollapse"),this._secondaryPage.attr("style",""),this._mainPage.attr("style",""),this._mode=s,this._animator.setup(this._element,this._mainPage,this._secondaryPage,{isRight:!1,width:"90%"}),this._fireEvent("postcollapse"))},_activateSplitMode:function(){this._mode!==a&&(this._fireEvent("presplit"),this._animator.destroy(),this._secondaryPage.attr("style",""),this._mainPage.attr("style",""),this._mode=a,this._setSize(),this._fireEvent("postsplit"))},_destroy:function(){this.emit("destroy"),this._clearDerivingEvents(),this._element=null,this._scope=null}});return MicroEvent.mixin(l),l}])}(),function(){angular.module("onsen").factory("SplitterContent",["$onsen","$compile",function(e,t){var n=Class.extend({init:function(e,t,n){this._element=t,this._scope=e,this._attrs=n,this.load=this._element[0].load.bind(this._element[0]),e.$on("$destroy",this._destroy.bind(this))},_destroy:function(){this.emit("destroy"),this._element=this._scope=this._attrs=this.load=this._pageScope=null}});return MicroEvent.mixin(n),e.derivePropertiesFromElement(n,["page"]),n}])}(),function(){angular.module("onsen").factory("SplitterSide",["$onsen","$compile",function(e,t){var n=Class.extend({init:function(t,n,i){var o=this;this._element=n,this._scope=t,this._attrs=i,this._clearDerivingMethods=e.deriveMethods(this,this._element[0],["open","close","toggle","load"]),this._clearDerivingEvents=e.deriveEvents(this,n[0],["modechange","preopen","preclose","postopen","postclose"],function(e){return e.side?angular.extend(e,{side:o}):e}),t.$on("$destroy",this._destroy.bind(this))},_destroy:function(){this.emit("destroy"),this._clearDerivingMethods(),this._clearDerivingEvents(),this._element=this._scope=this._attrs=null}});return MicroEvent.mixin(n),e.derivePropertiesFromElement(n,["page","mode","isOpen"]),n}])}(),function(){angular.module("onsen").factory("Splitter",["$onsen",function(e){var t=Class.extend({init:function(e,t,n){this._element=t,this._scope=e,this._attrs=n,e.$on("$destroy",this._destroy.bind(this))},_destroy:function(){this.emit("destroy"),this._element=this._scope=this._attrs=null}});return MicroEvent.mixin(t),e.derivePropertiesFromElement(t,["onDeviceBackButton"]),["left","right","content","mask"].forEach(function(e,n){Object.defineProperty(t.prototype,e,{get:function(){var t="ons-splitter-"+(n<2?"side":e);return angular.element(this._element[0][e]).data(t)}})}),t}])}(),function(){angular.module("onsen").factory("SwitchView",["$parse","$onsen",function(e,t){var n=Class.extend({init:function(e,t,n){var i=this;this._element=e,this._checkbox=angular.element(e[0].querySelector("input[type=checkbox]")),this._scope=t,this._prepareNgModel(e,t,n),this._scope.$on("$destroy",function(){i.emit("destroy"),i._element=i._checkbox=i._scope=null})},_prepareNgModel:function(t,n,i){var o=this;if(i.ngModel){var r=e(i.ngModel).assign;n.$parent.$watch(i.ngModel,function(e){o.checked=!!e}),this._element.on("change",function(e){r(n.$parent,o.checked),i.ngChange&&n.$eval(i.ngChange),n.$parent.$evalAsync()})}}});return MicroEvent.mixin(n),t.derivePropertiesFromElement(n,["disabled","checked","checkbox"]),n}])}(),function(){var e=angular.module("onsen");e.value("TabbarNoneAnimator",ons._internal.TabbarNoneAnimator),e.value("TabbarFadeAnimator",ons._internal.TabbarFadeAnimator),e.value("TabbarSlideAnimator",ons._internal.TabbarSlideAnimator),e.factory("TabbarView",["$onsen",function(e){var t=Class.extend({init:function(t,n,i){if("ons-tabbar"!==n[0].nodeName.toLowerCase())throw new Error('"element" parameter must be a "ons-tabbar" element.');this._scope=t,this._element=n,this._attrs=i,this._lastPageElement=null,this._lastPageScope=null,this._scope.$on("$destroy",this._destroy.bind(this)),this._clearDerivingEvents=e.deriveEvents(this,n[0],["reactive","postchange","prechange","init","show","hide","destroy"]),this._clearDerivingMethods=e.deriveMethods(this,n[0],["setActiveTab","setTabbarVisibility","getActiveTabIndex","loadPage"])},_destroy:function(){this.emit("destroy"),this._clearDerivingEvents(),this._clearDerivingMethods(),this._element=this._scope=this._attrs=null}});return MicroEvent.mixin(t),t.registerAnimator=function(e,t){return window.ons.TabbarElement.registerAnimator(e,t)},t}])}(),function(){angular.module("onsen").directive("onsAlertDialog",["$onsen","AlertDialogView",function(e,t){return{restrict:"E",replace:!1,scope:!0,transclude:!1,compile:function(n,i){return{pre:function(n,i,o){var r=new t(n,i,o);e.declareVarAttribute(o,r),e.registerEventHandlers(r,"preshow prehide postshow posthide destroy"),e.addModifierMethodsForCustomElements(r,i),i.data("ons-alert-dialog",r),i.data("_scope",n),n.$on("$destroy",function(){r._events=void 0,e.removeModifierMethods(r),i.data("ons-alert-dialog",void 0),i=null})},post:function(t,n){e.fireComponentEvent(n[0],"init")}}}}}])}(),function(){var e=angular.module("onsen");e.directive("onsBackButton",["$onsen","$compile","GenericView","ComponentCleaner",function(e,t,n,i){return{restrict:"E",replace:!1,compile:function(t,o){return{pre:function(t,o,r,a,s){var c=n.register(t,o,r,{viewKey:"ons-back-button"});t.$on("$destroy",function(){c._events=void 0,e.removeModifierMethods(c),o=null}),i.onDestroy(t,function(){i.destroyScope(t),i.destroyAttributes(r),o=t=r=null})},post:function(t,n){e.fireComponentEvent(n[0],"init")}}}}}])}(),function(){angular.module("onsen").directive("onsBottomToolbar",["$onsen","GenericView",function(e,t){return{restrict:"E",link:{pre:function(e,n,i){t.register(e,n,i,{viewKey:"ons-bottomToolbar"})},post:function(t,n,i){e.fireComponentEvent(n[0],"init")}}}}])}(),function(){angular.module("onsen").directive("onsButton",["$onsen","GenericView",function(e,t){return{restrict:"E",link:function(n,i,o){var r=t.register(n,i,o,{viewKey:"ons-button"});Object.defineProperty(r,"disabled",{get:function(){return this._element[0].disabled},set:function(e){return this._element[0].disabled=e}}),e.fireComponentEvent(i[0],"init")}}}])}(),function(){var e=angular.module("onsen");e.directive("onsCarousel",["$onsen","CarouselView",function(e,t){return{restrict:"E",replace:!1,scope:!1,transclude:!1,compile:function(n,i){return function(n,i,o){var r=new t(n,i,o);i.data("ons-carousel",r),e.registerEventHandlers(r,"postchange refresh overscroll destroy"),e.declareVarAttribute(o,r),n.$on("$destroy",function(){r._events=void 0,i.data("ons-carousel",void 0),i=null}),e.fireComponentEvent(i[0],"init")}}}}]),e.directive("onsCarouselItem",function(){return{restrict:"E",compile:function(e,t){return function(e,t,n){e.$last&&(t[0].parentElement._setup(),t[0].parentElement._setupInitialIndex(),t[0].parentElement._saveLastState())}}}})}(),function(){angular.module("onsen").directive("onsDialog",["$onsen","DialogView",function(e,t){return{restrict:"E",scope:!0,compile:function(n,i){return{pre:function(n,i,o){var r=new t(n,i,o);e.declareVarAttribute(o,r),e.registerEventHandlers(r,"preshow prehide postshow posthide destroy"),e.addModifierMethodsForCustomElements(r,i),i.data("ons-dialog",r),n.$on("$destroy",function(){r._events=void 0,e.removeModifierMethods(r),i.data("ons-dialog",void 0),i=null})},post:function(t,n){e.fireComponentEvent(n[0],"init")}}}}}])}(),function(){var e=angular.module("onsen");e.directive("onsDummyForInit",["$rootScope",function(e){var t=!1;return{restrict:"E",replace:!1,link:{post:function(n,i){t||(t=!0,e.$broadcast("$ons-ready")),i.remove()}}}}])}(),function(){var e=angular.module("onsen");e.directive("onsFab",["$onsen","FabView",function(e,t){return{restrict:"E",replace:!1,scope:!1,transclude:!1,compile:function(n,i){return function(n,i,o){var r=new t(n,i,o);i.data("ons-fab",r),e.declareVarAttribute(o,r),n.$on("$destroy",function(){i.data("ons-fab",void 0),i=null}),e.fireComponentEvent(i[0],"init")}}}}])}(),function(){var t="drag dragleft dragright dragup dragdown hold release swipe swipeleft swiperight swipeup swipedown tap doubletap touch transform pinch pinchin pinchout rotate".split(/ +/);angular.module("onsen").directive("onsGestureDetector",["$onsen",function(n){function i(e){return e.charAt(0).toUpperCase()+e.slice(1)}var o=t.reduce(function(e,t){return e["ng"+i(t)]="&",e},{});return{restrict:"E",scope:o,replace:!1,transclude:!0,compile:function(r,a){return function(r,a,s,c,l){l(r.$parent,function(e){a.append(e)});var u,d=function(e){var t="ng"+i(e.type);t in o&&r[t]({$event:e})};e(function(){u=a[0]._gestureDetector,u.on(t.join(" "),d)}),n.cleaner.onDestroy(r,function(){u.off(t.join(" "),d),n.clearComponent({scope:r,element:a,attrs:s}),u.element=r=a=s=null}),n.fireComponentEvent(a[0],"init")}}}}])}(),function(){angular.module("onsen").directive("onsIcon",["$onsen","GenericView",function(t,n){return{restrict:"E",compile:function(t,i){return i.icon.indexOf("{{")!==-1&&i.$observe("icon",function(){e(function(){return t[0]._update()})}),function(e,t,i){n.register(e,t,i,{viewKey:"ons-icon"})}}}}])}(),function(){var e=angular.module("onsen");e.directive("onsIfOrientation",["$onsen","$onsGlobal",function(e,t){return{restrict:"A",replace:!1,transclude:!1,scope:!1,compile:function(n){return n.css("display","none"),function(n,i,o){function r(){var e=(""+o.onsIfOrientation).toLowerCase(),t=a();"portrait"!==e&&"landscape"!==e||(e===t?i.css("display",""):i.css("display","none"))}function a(){return t.orientation.isPortrait()?"portrait":"landscape"}o.$observe("onsIfOrientation",r),t.orientation.on("change",r),r(),e.cleaner.onDestroy(n,function(){t.orientation.off("change",r),e.clearComponent({element:i,scope:n,attrs:o}),i=n=o=null})}}}}])}(),function(){var e=angular.module("onsen");e.directive("onsIfPlatform",["$onsen",function(e){return{restrict:"A",replace:!1,transclude:!1,scope:!1,compile:function(t){function n(){if(navigator.userAgent.match(/Android/i))return"android";if(navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/RIM Tablet OS/i)||navigator.userAgent.match(/BB10/i))return"blackberry";if(navigator.userAgent.match(/iPhone|iPad|iPod/i))return"ios";if(navigator.userAgent.match(/Windows Phone|IEMobile|WPDesktop/i))return"wp";var e=!!window.opera||navigator.userAgent.indexOf(" OPR/")>=0;if(e)return"opera";var t="undefined"!=typeof InstallTrigger;if(t)return"firefox";var n=Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor")>0;if(n)return"safari";var i=navigator.userAgent.indexOf(" Edge/")>=0;if(i)return"edge";var o=!!window.chrome&&!e&&!i;if(o)return"chrome";var r=!!document.documentMode;return r?"ie":"unknown"}t.css("display","none");var i=n();return function(t,n,o){function r(){var e=o.onsIfPlatform.toLowerCase().trim().split(/\s+/);e.indexOf(i.toLowerCase())>=0?n.css("display","block"):n.css("display","none")}o.$observe("onsIfPlatform",function(e){e&&r()}),r(),e.cleaner.onDestroy(t,function(){e.clearComponent({element:n,scope:t,attrs:o}),n=t=o=null})}}}}])}(),function(){angular.module("onsen").directive("onsInput",["$parse",function(e){return{restrict:"E",replace:!1,scope:!1,link:function(t,n,i){var o=n[0],r=function(){var n=e(i.ngModel).assign;o._isTextInput?n(t,o.value):"radio"===o.type&&o.checked?n(t,o.value):n(t,o.checked),i.ngChange&&t.$eval(i.ngChange),t.$parent.$evalAsync()};i.ngModel&&(t.$watch(i.ngModel,function(e){o._isTextInput&&"undefined"!=typeof e?o.value=e:"radio"===o.type?o.checked=e===o.value:o.checked=e}),o._isTextInput?n.on("input",r):n.on("change",r)),t.$on("$destroy",function(){o._isTextInput?n.off("input",r):n.off("change",r),t=n=i=o=null})}}}])}(),function(){var e=angular.module("onsen"),t=function(e,t){return function(n){return function(n,i,o){var r=e?"block":"none",a=e?"none":"block",s=function(){i.css("display",r)},c=function(){i.css("display",a)},l=function(e){e.visible?s():c()};ons.softwareKeyboard.on("show",s),ons.softwareKeyboard.on("hide",c),ons.softwareKeyboard.on("init",l),ons.softwareKeyboard._visible?s():c(),t.cleaner.onDestroy(n,function(){ons.softwareKeyboard.off("show",s),ons.softwareKeyboard.off("hide",c),ons.softwareKeyboard.off("init",l),t.clearComponent({element:i,scope:n,attrs:o}),i=n=o=null})}}};e.directive("onsKeyboardActive",["$onsen",function(e){return{restrict:"A",replace:!1,transclude:!1,scope:!1,compile:t(!0,e)}}]),e.directive("onsKeyboardInactive",["$onsen",function(e){return{restrict:"A",replace:!1,transclude:!1,scope:!1,compile:t(!1,e)}}])}(),function(){var e=angular.module("onsen");e.directive("onsLazyRepeat",["$onsen","LazyRepeatView",function(e,t){return{restrict:"A",replace:!1,priority:1e3,terminal:!0,compile:function(e,n){return function(e,n,i){var o=new t(e,n,i);e.$on("$destroy",function(){e=n=i=o=null})}}}}])}(),function(){angular.module("onsen").directive("onsList",["$onsen","GenericView",function(e,t){return{restrict:"E",link:function(n,i,o){t.register(n,i,o,{viewKey:"ons-list"}),e.fireComponentEvent(i[0],"init")}}}])}(),function(){angular.module("onsen").directive("onsListHeader",["$onsen","GenericView",function(e,t){return{restrict:"E",link:function(n,i,o){t.register(n,i,o,{viewKey:"ons-listHeader"}),e.fireComponentEvent(i[0],"init")}}}])}(),function(){angular.module("onsen").directive("onsListItem",["$onsen","GenericView",function(e,t){return{restrict:"E",link:function(n,i,o){t.register(n,i,o,{viewKey:"ons-list-item"}),e.fireComponentEvent(i[0],"init")}}}])}(),function(){angular.module("onsen").directive("onsLoadingPlaceholder",function(){return{restrict:"A",link:function(t,n,i){i.onsLoadingPlaceholder&&ons._resolveLoadingPlaceholder(n[0],i.onsLoadingPlaceholder,function(n,i){ons.compile(n),t.$evalAsync(function(){e(i)})})}}})}(),function(){angular.module("onsen").directive("onsModal",["$onsen","ModalView",function(e,t){return{restrict:"E",replace:!1,scope:!1,transclude:!1,compile:function(n,i){return{pre:function(n,i,o){var r=new t(n,i,o);e.addModifierMethodsForCustomElements(r,i),e.declareVarAttribute(o,r),i.data("ons-modal",r),n.$on("$destroy",function(){e.removeModifierMethods(r),i.data("ons-modal",void 0),r=i=n=o=null})},post:function(t,n){e.fireComponentEvent(n[0],"init")}}}}}])}(),function(){var e=window.ons.NavigatorElement.rewritables.ready;window.ons.NavigatorElement.rewritables.ready=ons._waitDiretiveInit("ons-navigator",e),angular.module("onsen").directive("onsNavigator",["NavigatorView","$onsen",function(e,t){return{restrict:"E",transclude:!1,scope:!0,compile:function(n){return{pre:function(n,i,o,r){var a=new e(n,i,o);t.declareVarAttribute(o,a),t.registerEventHandlers(a,"prepush prepop postpush postpop init show hide destroy"),i.data("ons-navigator",a),i[0].pageLoader=t.createPageLoader(a),n.$on("$destroy",function(){a._events=void 0,i.data("ons-navigator",void 0),n=i=null})},post:function(e,n,i){t.fireComponentEvent(n[0],"init")}}}}}])}(),function(){var t=angular.module("onsen");t.directive("onsPage",["$onsen","PageView",function(t,n){function i(n){var i=0,a=function a(){if(!(i++<15))throw new Error('Fail to fire "pageinit" event. Attach "ons-page" element to the document after initialization.');r(n)?(t.fireComponentEvent(n,"init"),o(n)):i>10?setTimeout(a,1e3/60):e(a)};a()}function o(e){var t=document.createEvent("HTMLEvents");t.initEvent("pageinit",!0,!0),e.dispatchEvent(t)}function r(e){return document.documentElement===e||!!e.parentNode&&r(e.parentNode)}return{restrict:"E",transclude:!1,scope:!0,compile:function(e,o){return{pre:function(e,i,o){var r=new n(e,i,o);t.declareVarAttribute(o,r),t.registerEventHandlers(r,"init show hide destroy"),i.data("ons-page",r),t.addModifierMethodsForCustomElements(r,i),i.data("_scope",e),t.cleaner.onDestroy(e,function(){r._events=void 0,t.removeModifierMethods(r),i.data("ons-page",void 0),i.data("_scope",void 0),t.clearComponent({element:i,scope:e,attrs:o}),e=i=o=null})},post:function(e,t,n){i(t[0])}}}}}])}(),function(){var e=angular.module("onsen");e.directive("onsPopover",["$onsen","PopoverView",function(e,t){return{restrict:"E",replace:!1,scope:!0,compile:function(n,i){return{pre:function(n,i,o){var r=new t(n,i,o);e.declareVarAttribute(o,r),e.registerEventHandlers(r,"preshow prehide postshow posthide destroy"),e.addModifierMethodsForCustomElements(r,i),i.data("ons-popover",r),n.$on("$destroy",function(){r._events=void 0,e.removeModifierMethods(r),i.data("ons-popover",void 0),i=null})},post:function(t,n){e.fireComponentEvent(n[0],"init")}}}}}])}(),function(){angular.module("onsen").directive("onsPullHook",["$onsen","PullHookView",function(e,t){return{restrict:"E",replace:!1,scope:!0,compile:function(n,i){return{pre:function(n,i,o){var r=new t(n,i,o);e.declareVarAttribute(o,r),e.registerEventHandlers(r,"changestate destroy"),i.data("ons-pull-hook",r),n.$on("$destroy",function(){r._events=void 0,i.data("ons-pull-hook",void 0),n=i=o=null})},post:function(t,n){e.fireComponentEvent(n[0],"init")}}}}}])}(),function(){angular.module("onsen").directive("onsRange",["$parse",function(e){return{restrict:"E",replace:!1,scope:!1,link:function(t,n,i){var o=function(){var o=e(i.ngModel).assign;o(t,n[0].value),i.ngChange&&t.$eval(i.ngChange),t.$parent.$evalAsync()};i.ngModel&&(t.$watch(i.ngModel,function(e){n[0].value=e}),n.on("input",o)),t.$on("$destroy",function(){n.off("input",o),t=n=i=null})}}}])}(),function(){angular.module("onsen").directive("onsRipple",["$onsen","GenericView",function(e,t){return{restrict:"E",link:function(n,i,o){t.register(n,i,o,{viewKey:"ons-ripple"}),e.fireComponentEvent(i[0],"init")}}}])}(),function(){var e=angular.module("onsen");e.directive("onsScope",["$onsen",function(e){return{restrict:"A",replace:!1,transclude:!1,scope:!1,link:function(e,t){t.data("_scope",e),e.$on("$destroy",function(){t.data("_scope",void 0)})}}}])}(),function(){var e=angular.module("onsen");e.directive("onsSlidingMenu",["$compile","SlidingMenuView","$onsen",function(e,t,n){return{restrict:"E",replace:!1,transclude:!1,scope:!0,compile:function(e,i){var o=e[0].querySelector(".main"),r=e[0].querySelector(".menu");if(o)var a=angular.element(o).remove().html().trim();if(r)var s=angular.element(r).remove().html().trim();return function(e,i,o){i.append(angular.element("<div></div>").addClass("onsen-sliding-menu__menu")),i.append(angular.element("<div></div>").addClass("onsen-sliding-menu__main"));var r=new t(e,i,o);n.registerEventHandlers(r,"preopen preclose postopen postclose init show hide destroy"),a&&!o.mainPage&&r._appendMainPage(null,a),s&&!o.menuPage&&r._appendMenuPage(s),n.declareVarAttribute(o,r),i.data("ons-sliding-menu",r),e.$on("$destroy",function(){r._events=void 0,i.data("ons-sliding-menu",void 0)}),n.fireComponentEvent(i[0],"init")}}}}])}(),function(){var e=angular.module("onsen");e.directive("onsSpeedDial",["$onsen","SpeedDialView",function(e,t){return{restrict:"E",replace:!1,scope:!1,transclude:!1,compile:function(n,i){return function(n,i,o){var r=new t(n,i,o);i.data("ons-speed-dial",r),e.registerEventHandlers(r,"open close"),e.declareVarAttribute(o,r),n.$on("$destroy",function(){r._events=void 0,i.data("ons-speed-dial",void 0),i=null}),e.fireComponentEvent(i[0],"init")}}}}])}(),function(){var e=angular.module("onsen");e.directive("onsSplitView",["$compile","SplitView","$onsen",function(e,t,n){return{restrict:"E",replace:!1,transclude:!1,scope:!0,compile:function(e,i){var o=e[0].querySelector(".main-page"),r=e[0].querySelector(".secondary-page");if(o)var a=angular.element(o).remove().html().trim();if(r)var s=angular.element(r).remove().html().trim();return function(e,i,o){i.append(angular.element("<div></div>").addClass("onsen-split-view__secondary full-screen")),i.append(angular.element("<div></div>").addClass("onsen-split-view__main full-screen"));var r=new t(e,i,o);a&&!o.mainPage&&r._appendMainPage(a),s&&!o.secondaryPage&&r._appendSecondPage(s),n.declareVarAttribute(o,r),n.registerEventHandlers(r,"update presplit precollapse postsplit postcollapse init show hide destroy"),i.data("ons-split-view",r),e.$on("$destroy",function(){r._events=void 0,i.data("ons-split-view",void 0)}),n.fireComponentEvent(i[0],"init")}}}}])}(),function(){angular.module("onsen").directive("onsSplitter",["$compile","Splitter","$onsen",function(e,t,n){return{restrict:"E",scope:!0,compile:function(e,i){return function(e,i,o){var r=new t(e,i,o);n.declareVarAttribute(o,r),n.registerEventHandlers(r,"destroy"),i.data("ons-splitter",r),e.$on("$destroy",function(){r._events=void 0,i.data("ons-splitter",void 0)}),n.fireComponentEvent(i[0],"init")}}}}])}(),function(){var e=window.ons.SplitterContentElement.rewritables.ready;window.ons.SplitterContentElement.rewritables.ready=ons._waitDiretiveInit("ons-splitter-content",e),angular.module("onsen").directive("onsSplitterContent",["$compile","SplitterContent","$onsen",function(e,t,n){return{restrict:"E",compile:function(e,i){return function(e,i,o){var r=new t(e,i,o);n.declareVarAttribute(o,r),n.registerEventHandlers(r,"destroy"),i.data("ons-splitter-content",r),i[0].pageLoader=n.createPageLoader(r),e.$on("$destroy",function(){r._events=void 0,i.data("ons-splitter-content",void 0)}),n.fireComponentEvent(i[0],"init")}}}}])}(),function(){var e=window.ons.SplitterSideElement.rewritables.ready;window.ons.SplitterSideElement.rewritables.ready=ons._waitDiretiveInit("ons-splitter-side",e),angular.module("onsen").directive("onsSplitterSide",["$compile","SplitterSide","$onsen",function(e,t,n){return{restrict:"E",compile:function(e,i){return function(e,i,o){var r=new t(e,i,o);n.declareVarAttribute(o,r),n.registerEventHandlers(r,"destroy preopen preclose postopen postclose modechange"),i.data("ons-splitter-side",r),i[0].pageLoader=n.createPageLoader(r),e.$on("$destroy",function(){r._events=void 0,i.data("ons-splitter-side",void 0)}),n.fireComponentEvent(i[0],"init")}}}}])}(),function(){angular.module("onsen").directive("onsSwitch",["$onsen","SwitchView",function(e,t){return{restrict:"E",replace:!1,scope:!0,link:function(n,i,o){if(o.ngController)throw new Error("This element can't accept ng-controller directive.");var r=new t(i,n,o);e.addModifierMethodsForCustomElements(r,i),
e.declareVarAttribute(o,r),i.data("ons-switch",r),e.cleaner.onDestroy(n,function(){r._events=void 0,e.removeModifierMethods(r),i.data("ons-switch",void 0),e.clearComponent({element:i,scope:n,attrs:o}),i=o=n=null}),e.fireComponentEvent(i[0],"init")}}}])}(),function(){function e(e,t){return{restrict:"E",link:function(n,i,o){var r=new t(n,i,o);i[0].pageLoader=e.createPageLoader(r),e.fireComponentEvent(i[0],"init")}}}e.$inject=["$onsen","GenericView"],angular.module("onsen").directive("onsTab",e).directive("onsTabbarItem",e)}(),function(){var e=window.ons.TabbarElement.rewritables.ready;window.ons.TabbarElement.rewritables.ready=ons._waitDiretiveInit("ons-tabbar",e),angular.module("onsen").directive("onsTabbar",["$onsen","$compile","$parse","TabbarView",function(e,t,n,i){return{restrict:"E",replace:!1,scope:!0,link:function(t,n,o,r){t.$watch(o.hideTabs,function(e){"string"==typeof e&&(e="true"===e),n[0].setTabbarVisibility(!e)});var a=new i(t,n,o);e.addModifierMethodsForCustomElements(a,n),e.registerEventHandlers(a,"reactive prechange postchange init show hide destroy"),n.data("ons-tabbar",a),e.declareVarAttribute(o,a),t.$on("$destroy",function(){a._events=void 0,e.removeModifierMethods(a),n.data("ons-tabbar",void 0)}),e.fireComponentEvent(n[0],"init")}}}])}(),function(){angular.module("onsen").directive("onsTemplate",["$templateCache",function(e){return{restrict:"E",terminal:!0,compile:function(t){var n=t[0].template||t.html();e.put(t.attr("id"),n)}}}])}(),function(){angular.module("onsen").directive("onsToolbar",["$onsen","GenericView",function(e,t){return{restrict:"E",scope:!1,transclude:!1,compile:function(n){return{pre:function(e,n,i){"ons-toolbar"===n[0].nodeName&&t.register(e,n,i,{viewKey:"ons-toolbar"})},post:function(t,n,i){e.fireComponentEvent(n[0],"init")}}}}}])}(),function(){var e=angular.module("onsen");e.directive("onsToolbarButton",["$onsen","GenericView",function(e,t){return{restrict:"E",scope:!1,link:{pre:function(n,i,o){var r=new t(n,i,o);i.data("ons-toolbar-button",r),e.declareVarAttribute(o,r),e.addModifierMethodsForCustomElements(r,i),e.cleaner.onDestroy(n,function(){r._events=void 0,e.removeModifierMethods(r),i.data("ons-toolbar-button",void 0),i=null,e.clearComponent({scope:n,attrs:o,element:i}),n=i=o=null})},post:function(t,n,i){e.fireComponentEvent(n[0],"init")}}}}])}(),function(){var e=angular.module("onsen"),t={decomposeNode:function(e){for(var n=e.remove().children(),i=0;i<n.length;i++)t.decomposeNode(angular.element(n[i]))},destroyAttributes:function(e){e.$$element=null,e.$$observers=null},destroyElement:function(e){e.remove()},destroyScope:function(e){e.$$listeners={},e.$$watchers=null,e=null},onDestroy:function(e,t){var n=e.$on("$destroy",function(){n(),t.apply(null,arguments)})}};e.factory("ComponentCleaner",function(){return t}),function(){var n={};"click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" ").forEach(function(e){function i(e){return e.replace(/-([a-z])/g,function(e){return e[1].toUpperCase()})}var o=i("ng-"+e);n[o]=["$parse",function(n){return{compile:function(i,r){var a=n(r[o]);return function(n,i,o){var r=function(e){n.$apply(function(){a(n,{$event:e})})};i.on(e,r),t.onDestroy(n,function(){i.off(e,r),i=null,t.destroyScope(n),n=null,t.destroyAttributes(o),o=null})}}}}]}),e.config(["$provide",function(e){var t=function(e){return e.shift(),e};Object.keys(n).forEach(function(n){e.decorator(n+"Directive",["$delegate",t])})}]),Object.keys(n).forEach(function(t){e.directive(t,n[t])})}()}(),function(){var e=angular.module("onsen");e.factory("$onsen",["$rootScope","$window","$cacheFactory","$document","$templateCache","$http","$q","$compile","$onsGlobal","ComponentCleaner",function(e,t,n,i,o,r,a,s,c,l){function u(){return{DIRECTIVE_TEMPLATE_URL:"templates",cleaner:l,DeviceBackButtonHandler:c._deviceBackButtonDispatcher,_defaultDeviceBackButtonHandler:c._defaultDeviceBackButtonHandler,getDefaultDeviceBackButtonHandler:function(){return this._defaultDeviceBackButtonHandler},deriveMethods:function(e,t,n){return n.forEach(function(n){e[n]=function(){return t[n].apply(t,arguments)}}),function(){n.forEach(function(t){e[t]=null}),e=t=null}},derivePropertiesFromElement:function(e,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this._element[0][t]},set:function(e){return this._element[0][t]=e}})})},deriveEvents:function(e,t,n,i){i=i||function(e){return e},n=[].concat(n);var o=[];return n.forEach(function(n){var r=function(t){i(t.detail||{}),e.emit(n,t)};o.push(r),t.addEventListener(n,r,!1)}),function(){n.forEach(function(e,n){t.removeEventListener(e,o[n],!1)}),e=t=o=i=null}},isEnabledAutoStatusBarFill:function(){return!!c._config.autoStatusBarFill},shouldFillStatusBar:c.shouldFillStatusBar,autoStatusBarFill:c.autoStatusBarFill,compileAndLink:function(e,t,n){var i=s(t),o=e._scope.$new();i(o),angular.element(t).data("_scope",o),o.$evalAsync(function(){n(t)})},createPageLoader:function(e){var t=this;return new window.ons.PageLoader(function(n,i){var o=n.page,r=n.parent;window.ons._internal.getPageHTMLAsync(o).then(function(n){t.compileAndLink(e,window.ons._util.createElement(n.trim()),function(e){r.appendChild(e),i(e)})})},function(e){angular.element(e).data("_scope").$destroy(),e.remove()})},clearComponent:function(e){e.scope&&l.destroyScope(e.scope),e.attrs&&l.destroyAttributes(e.attrs),e.element&&l.destroyElement(e.element),e.elements&&e.elements.forEach(function(e){l.destroyElement(e)})},findElementeObject:function(e,t){return e.inheritedData(t)},getPageHTMLAsync:function(e){var t=o.get(e);if(t){var n=a.defer(),i="string"==typeof t?t:t[1];return n.resolve(this.normalizePageHTML(i)),n.promise}return r({url:e,method:"GET"}).then(function(e){var t=e.data;return this.normalizePageHTML(t)}.bind(this))},normalizePageHTML:function(e){return e=(""+e).trim(),e.match(/^<ons-page/)||(e="<ons-page _muted>"+e+"</ons-page>"),e},generateModifierTemplater:function(e,t){var n=e&&"string"==typeof e.modifier?e.modifier.trim().split(/ +/):[];return t=angular.isArray(t)?n.concat(t):n,function(e){return t.map(function(t){return e.replace("*",t)}).join(" ")}},addModifierMethodsForCustomElements:function(e,t){var n={hasModifier:function(e){var n=h.split(t.attr("modifier"));return e="string"==typeof e?e.trim():"",h.split(e).some(function(e){return n.indexOf(e)!=-1})},removeModifier:function(e){e="string"==typeof e?e.trim():"";var n=h.split(t.attr("modifier")).filter(function(t){return t!==e}).join(" ");t.attr("modifier",n)},addModifier:function(e){t.attr("modifier",t.attr("modifier")+" "+e)},setModifier:function(e){t.attr("modifier",e)},toggleModifier:function(e){this.hasModifier(e)?this.removeModifier(e):this.addModifier(e)}};for(var i in n)n.hasOwnProperty(i)&&(e[i]=n[i])},addModifierMethods:function(e,t,n){var i=function(e){return t.replace("*",e)},o={hasModifier:function(e){return n.hasClass(i(e))},removeModifier:function(e){n.removeClass(i(e))},addModifier:function(e){n.addClass(i(e))},setModifier:function(e){for(var o=n.attr("class").split(/\s+/),r=t.replace("*","."),a=0;a<o.length;a++){var s=o[a];s.match(r)&&n.removeClass(s)}n.addClass(i(e))},toggleModifier:function(e){var t=i(e);n.hasClass(t)?n.removeClass(t):n.addClass(t)}},r=function(e,t){return"undefined"!=typeof e?function(){return e.apply(null,arguments)||t.apply(null,arguments)}:t};e.hasModifier=r(e.hasModifier,o.hasModifier),e.removeModifier=r(e.removeModifier,o.removeModifier),e.addModifier=r(e.addModifier,o.addModifier),e.setModifier=r(e.setModifier,o.setModifier),e.toggleModifier=r(e.toggleModifier,o.toggleModifier)},removeModifierMethods:function(e){e.hasModifier=e.removeModifier=e.addModifier=e.setModifier=e.toggleModifier=void 0},declareVarAttribute:function(e,t){if("string"==typeof e.var){var n=e.var;this._defineVar(n,t)}},_registerEventHandler:function(e,t){var n=t.charAt(0).toUpperCase()+t.slice(1);e.on(t,function(i){d.fireComponentEvent(e._element[0],t,i&&i.detail);var o=e._attrs["ons"+n];o&&(e._scope.$eval(o,{$event:i}),e._scope.$evalAsync())})},registerEventHandlers:function(e,t){t=t.trim().split(/\s+/);for(var n=0,i=t.length;n<i;n++){var o=t[n];this._registerEventHandler(e,o)}},isAndroid:function(){return!!window.navigator.userAgent.match(/android/i)},isIOS:function(){return!!window.navigator.userAgent.match(/(ipad|iphone|ipod touch)/i)},isWebView:function(){return window.ons.isWebView()},isIOS7above:function(){var e=window.navigator.userAgent,t=e.match(/(iPad|iPhone|iPod touch);.*CPU.*OS (\d+)_(\d+)/i),n=!!t&&parseFloat(t[2]+"."+t[3])>=7;return function(){return n}}(),fireComponentEvent:function(e,t,n){n=n||{};var i=document.createEvent("HTMLEvents");for(var o in n)n.hasOwnProperty(o)&&(i[o]=n[o]);i.component=e?angular.element(e).data(e.nodeName.toLowerCase())||null:null,i.initEvent(e.nodeName.toLowerCase()+":"+t,!0,!0),e.dispatchEvent(i)},_defineVar:function(t,n){function i(e,t,n){for(var i,o=0;o<t.length-1;o++)i=t[o],void 0!==e[i]&&null!==e[i]||(e[i]={}),e=e[i];if(e[t[t.length-1]]=n,e[t[t.length-1]]!==n)throw new Error('Cannot set var="'+n._attrs.var+'" because it will overwrite a read-only variable.')}var o=t.split(/\./);ons.componentBase&&i(ons.componentBase,o,n);for(var r=n._element[0];r.parentNode;){if(r.hasAttribute("ons-scope"))return i(angular.element(r).data("_scope"),o,n),void(r=null);r=r.parentNode}r=null,i(e,o,n)}}}var d=u(),h=c._internal.ModifierUtil;return d}])}(),["alert","confirm","prompt"].forEach(function(e){var t=ons.notification[e];ons.notification[e]=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof e?n.message=e:n=e;var i=n.compile,o=void 0;return n.compile=function(e){return o=angular.element(i?i(e):e),ons.$compile(o)(o.injector().get("$rootScope"))},n.destroy=function(){o.data("_scope").$destroy(),o=null},t(n)}}),window.jQuery&&angular.element===window.jQuery&&console.warn("Onsen UI require jqLite. Load jQuery after loading AngularJS to fix this error. jQuery may break Onsen UI behavior."),function(){angular.module("onsen").run(["$templateCache",function(e){for(var t=window.document.querySelectorAll('script[type="text/ons-template"]'),n=0;n<t.length;n++){var i=angular.element(t[n]),o=i.attr("id");"string"==typeof o&&e.put(o,i.text())}}])}()}).call(t,n(2).setImmediate)},,,,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n.n(i),r=n(7),a=(n.n(r),n(6)),s=(n.n(a),n(4)),c=n(5),l=n(8);n.n(l);window.ons=n(1),n(9),ons.bootstrap("app",["onsen"]),o.a.module("app").controller("Page1Controller",s.a).controller("Page2Controller",c.a)}],[14]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,