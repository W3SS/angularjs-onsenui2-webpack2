webpackJsonp([0],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _angular = __webpack_require__(1);
	
	var _angular2 = _interopRequireDefault(_angular);
	
	__webpack_require__(3);
	
	__webpack_require__(4);
	
	var _page = __webpack_require__(5);
	
	var _page2 = _interopRequireDefault(_page);
	
	var _page3 = __webpack_require__(6);
	
	var _page4 = _interopRequireDefault(_page3);
	
	__webpack_require__(7);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// OnsenUI
	window.ons = __webpack_require__(8); // Angular
	
	__webpack_require__(13);
	
	// コントローラ
	
	
	// スタイル
	
	
	// 起動
	ons.bootstrap('app', ['onsen']);
	
	// Angularモジュール
	_angular2.default.module('app').controller('Page1Controller', _page2.default).controller('Page2Controller', _page4.default);

/***/ },
/* 1 */,
/* 2 */,
/* 3 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 4 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 5 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Page1Controller = function () {
	    Page1Controller.$inject = ["$log"];
	    function Page1Controller($log) {
	        // DI
	        'ngInject';
	
	        _classCallCheck(this, Page1Controller);
	
	        this.$log = $log;
	
	        // ページタイトル
	        this.title = 'Page 1';
	    }
	
	    // 次へ
	
	
	    _createClass(Page1Controller, [{
	        key: 'push',
	        value: function push() {
	            var options = {
	                data: {
	                    title: 'Page 2'
	                }
	            };
	            navi.pushPage('pages/page2.html', options);
	            this.$log.debug('Push page');
	        }
	
	        // 初期化
	
	    }, {
	        key: 'init',
	        value: function init(event) {
	            var page = event.target;
	        }
	    }]);
	
	    return Page1Controller;
	}();
	
	exports.default = Page1Controller;

/***/ },
/* 6 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Page2Controller = function () {
	    Page2Controller.$inject = ["$log"];
	    function Page2Controller($log) {
	        // DI
	        'ngInject';
	
	        _classCallCheck(this, Page2Controller);
	
	        this.$log = $log;
	    }
	
	    // 戻る
	
	
	    _createClass(Page2Controller, [{
	        key: 'pop',
	        value: function pop() {
	            navi.popPage();
	            this.$log.debug('Pop page');
	        }
	
	        // 初期化
	
	    }, {
	        key: 'init',
	        value: function init(event) {
	            // ページタイトル設定
	            var page = event.target;
	            this.title = page.data.title;
	        }
	    }]);
	
	    return Page2Controller;
	}();
	
	exports.default = Page2Controller;

/***/ },
/* 7 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate) {/*! angular-onsenui.js for onsenui - v2.0.5 - 2016-12-19 */
	"use strict";
	
	/* Simple JavaScript Inheritance for ES 5.1
	 * based on http://ejohn.org/blog/simple-javascript-inheritance/
	 *  (inspired by base2 and Prototype)
	 * MIT Licensed.
	 */
	(function () {
	  "use strict";
	
	  var fnTest = /xyz/.test(function () {
	    xyz;
	  }) ? /\b_super\b/ : /.*/;
	
	  // The base Class implementation (does nothing)
	  function BaseClass() {}
	
	  // Create a new Class that inherits from this class
	  BaseClass.extend = function (props) {
	    var _super = this.prototype;
	
	    // Set up the prototype to inherit from the base class
	    // (but without running the init constructor)
	    var proto = Object.create(_super);
	
	    // Copy the properties over onto the new prototype
	    for (var name in props) {
	      // Check if we're overwriting an existing function
	      proto[name] = typeof props[name] === "function" && typeof _super[name] == "function" && fnTest.test(props[name]) ? function (name, fn) {
	        return function () {
	          var tmp = this._super;
	
	          // Add a new ._super() method that is the same method
	          // but on the super-class
	          this._super = _super[name];
	
	          // The method only need to be bound temporarily, so we
	          // remove it when we're done executing
	          var ret = fn.apply(this, arguments);
	          this._super = tmp;
	
	          return ret;
	        };
	      }(name, props[name]) : props[name];
	    }
	
	    // The new constructor
	    var newClass = typeof proto.init === "function" ? proto.hasOwnProperty("init") ? proto.init // All construction is actually done in the init method
	    : function SubClass() {
	      _super.init.apply(this, arguments);
	    } : function EmptyClass() {};
	
	    // Populate our constructed prototype object
	    newClass.prototype = proto;
	
	    // Enforce the constructor to be what we expect
	    proto.constructor = newClass;
	
	    // And make this class extendable
	    newClass.extend = BaseClass.extend;
	
	    return newClass;
	  };
	
	  // export
	  window.Class = BaseClass;
	})();
	"use strict";
	
	//HEAD 
	(function (app) {
	    try {
	        app = angular.module("templates-main");
	    } catch (err) {
	        app = angular.module("templates-main", []);
	    }
	    app.run(["$templateCache", function ($templateCache) {
	        "use strict";
	
	        $templateCache.put("templates/sliding_menu.tpl", "<div class=\"onsen-sliding-menu__menu\"></div>\n" + "<div class=\"onsen-sliding-menu__main\"></div>\n" + "");
	
	        $templateCache.put("templates/split_view.tpl", "<div class=\"onsen-split-view__secondary full-screen\"></div>\n" + "<div class=\"onsen-split-view__main full-screen\"></div>\n" + "");
	    }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	/**
	 * @object ons
	 * @description
	 *   [ja]Onsen UIで利用できるグローバルなオブジェクトです。このオブジェクトは、AngularJSのスコープから参照することができます。 [/ja]
	 *   [en]A global object that's used in Onsen UI. This object can be reached from the AngularJS scope.[/en]
	 */
	
	(function (ons) {
	  'use strict';
	
	  var module = angular.module('onsen', ['templates-main']);
	  angular.module('onsen.directives', ['onsen']); // for BC
	
	  // JS Global facade for Onsen UI.
	  initOnsenFacade();
	  waitOnsenUILoad();
	  initAngularModule();
	  initTemplateCache();
	
	  function waitOnsenUILoad() {
	    var unlockOnsenUI = ons._readyLock.lock();
	    module.run(['$compile', '$rootScope', function ($compile, $rootScope) {
	      // for initialization hook.
	      if (document.readyState === 'loading' || document.readyState == 'uninitialized') {
	        window.addEventListener('DOMContentLoaded', function () {
	          document.body.appendChild(document.createElement('ons-dummy-for-init'));
	        });
	      } else if (document.body) {
	        document.body.appendChild(document.createElement('ons-dummy-for-init'));
	      } else {
	        throw new Error('Invalid initialization state.');
	      }
	
	      $rootScope.$on('$ons-ready', unlockOnsenUI);
	    }]);
	  }
	
	  function initAngularModule() {
	    module.value('$onsGlobal', ons);
	    module.run(['$compile', '$rootScope', '$onsen', '$q', function ($compile, $rootScope, $onsen, $q) {
	      ons._onsenService = $onsen;
	      ons._qService = $q;
	
	      $rootScope.ons = window.ons;
	      $rootScope.console = window.console;
	      $rootScope.alert = window.alert;
	
	      ons.$compile = $compile;
	    }]);
	  }
	
	  function initTemplateCache() {
	    module.run(['$templateCache', function ($templateCache) {
	      var tmp = ons._internal.getTemplateHTMLAsync;
	
	      ons._internal.getTemplateHTMLAsync = function (page) {
	        var cache = $templateCache.get(page);
	
	        if (cache) {
	          return Promise.resolve(cache);
	        } else {
	          return tmp(page);
	        }
	      };
	    }]);
	  }
	
	  function initOnsenFacade() {
	    ons._onsenService = null;
	
	    // Object to attach component variables to when using the var="..." attribute.
	    // Can be set to null to avoid polluting the global scope.
	    ons.componentBase = window;
	
	    /**
	     * @method bootstrap
	     * @signature bootstrap([moduleName, [dependencies]])
	     * @description
	     *   [ja]Onsen UIの初期化を行います。Angular.jsのng-app属性を利用すること無しにOnsen UIを読み込んで初期化してくれます。[/ja]
	     *   [en]Initialize Onsen UI. Can be used to load Onsen UI without using the <code>ng-app</code> attribute from AngularJS.[/en]
	     * @param {String} [moduleName]
	     *   [en]AngularJS module name.[/en]
	     *   [ja]Angular.jsでのモジュール名[/ja]
	     * @param {Array} [dependencies]
	     *   [en]List of AngularJS module dependencies.[/en]
	     *   [ja]依存するAngular.jsのモジュール名の配列[/ja]
	     * @return {Object}
	     *   [en]An AngularJS module object.[/en]
	     *   [ja]AngularJSのModuleオブジェクトを表します。[/ja]
	     */
	    ons.bootstrap = function (name, deps) {
	      if (angular.isArray(name)) {
	        deps = name;
	        name = undefined;
	      }
	
	      if (!name) {
	        name = 'myOnsenApp';
	      }
	
	      deps = ['onsen'].concat(angular.isArray(deps) ? deps : []);
	      var module = angular.module(name, deps);
	
	      var doc = window.document;
	      if (doc.readyState == 'loading' || doc.readyState == 'uninitialized' || doc.readyState == 'interactive') {
	        doc.addEventListener('DOMContentLoaded', function () {
	          angular.bootstrap(doc.documentElement, [name]);
	        }, false);
	      } else if (doc.documentElement) {
	        angular.bootstrap(doc.documentElement, [name]);
	      } else {
	        throw new Error('Invalid state');
	      }
	
	      return module;
	    };
	
	    /**
	     * @method findParentComponentUntil
	     * @signature findParentComponentUntil(name, [dom])
	     * @param {String} name
	     *   [en]Name of component, i.e. 'ons-page'.[/en]
	     *   [ja]コンポーネント名を指定します。例えばons-pageなどを指定します。[/ja]
	     * @param {Object/jqLite/HTMLElement} [dom]
	     *   [en]$event, jqLite or HTMLElement object.[/en]
	     *   [ja]$eventオブジェクト、jqLiteオブジェクト、HTMLElementオブジェクトのいずれかを指定できます。[/ja]
	     * @return {Object}
	     *   [en]Component object. Will return null if no component was found.[/en]
	     *   [ja]コンポーネントのオブジェクトを返します。もしコンポーネントが見つからなかった場合にはnullを返します。[/ja]
	     * @description
	     *   [en]Find parent component object of <code>dom</code> element.[/en]
	     *   [ja]指定されたdom引数の親要素をたどってコンポーネントを検索します。[/ja]
	     */
	    ons.findParentComponentUntil = function (name, dom) {
	      var element;
	      if (dom instanceof HTMLElement) {
	        element = angular.element(dom);
	      } else if (dom instanceof angular.element) {
	        element = dom;
	      } else if (dom.target) {
	        element = angular.element(dom.target);
	      }
	
	      return element.inheritedData(name);
	    };
	
	    /**
	     * @method findComponent
	     * @signature findComponent(selector, [dom])
	     * @param {String} selector
	     *   [en]CSS selector[/en]
	     *   [ja]CSSセレクターを指定します。[/ja]
	     * @param {HTMLElement} [dom]
	     *   [en]DOM element to search from.[/en]
	     *   [ja]検索対象とするDOM要素を指定します。[/ja]
	     * @return {Object/null}
	     *   [en]Component object. Will return null if no component was found.[/en]
	     *   [ja]コンポーネントのオブジェクトを返します。もしコンポーネントが見つからなかった場合にはnullを返します。[/ja]
	     * @description
	     *   [en]Find component object using CSS selector.[/en]
	     *   [ja]CSSセレクタを使ってコンポーネントのオブジェクトを検索します。[/ja]
	     */
	    ons.findComponent = function (selector, dom) {
	      var target = (dom ? dom : document).querySelector(selector);
	      return target ? angular.element(target).data(target.nodeName.toLowerCase()) || null : null;
	    };
	
	    /**
	     * @method compile
	     * @signature compile(dom)
	     * @param {HTMLElement} dom
	     *   [en]Element to compile.[/en]
	     *   [ja]コンパイルする要素を指定します。[/ja]
	     * @description
	     *   [en]Compile Onsen UI components.[/en]
	     *   [ja]通常のHTMLの要素をOnsen UIのコンポーネントにコンパイルします。[/ja]
	     */
	    ons.compile = function (dom) {
	      if (!ons.$compile) {
	        throw new Error('ons.$compile() is not ready. Wait for initialization with ons.ready().');
	      }
	
	      if (!(dom instanceof HTMLElement)) {
	        throw new Error('First argument must be an instance of HTMLElement.');
	      }
	
	      var scope = angular.element(dom).scope();
	      if (!scope) {
	        throw new Error('AngularJS Scope is null. Argument DOM element must be attached in DOM document.');
	      }
	
	      ons.$compile(dom)(scope);
	    };
	
	    ons._getOnsenService = function () {
	      if (!this._onsenService) {
	        throw new Error('$onsen is not loaded, wait for ons.ready().');
	      }
	
	      return this._onsenService;
	    };
	
	    /**
	     * @param {String} elementName
	     * @param {Function} lastReady
	     * @return {Function}
	     */
	    ons._waitDiretiveInit = function (elementName, lastReady) {
	      return function (element, callback) {
	        if (angular.element(element).data(elementName)) {
	          lastReady(element, callback);
	        } else {
	          var listen = function listen() {
	            lastReady(element, callback);
	            element.removeEventListener(elementName + ':init', listen, false);
	          };
	          element.addEventListener(elementName + ':init', listen, false);
	        }
	      };
	    };
	
	    /**
	     * @method createAlertDialog
	     * @signature createAlertDialog(page, [options])
	     * @param {String} page
	     *   [en]Page name. Can be either an HTML file or an <ons-template> containing a <ons-alert-dialog> component.[/en]
	     *   [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]
	     * @param {Object} [options]
	     *   [en]Parameter object.[/en]
	     *   [ja]オプションを指定するオブジェクト。[/ja]
	     * @param {Object} [options.parentScope]
	     *   [en]Parent scope of the dialog. Used to bind models and access scope methods from the dialog.[/en]
	     *   [ja]ダイアログ内で利用する親スコープを指定します。ダイアログからモデルやスコープのメソッドにアクセスするのに使います。このパラメータはAngularJSバインディングでのみ利用できます。[/ja]
	     * @return {Promise}
	     *   [en]Promise object that resolves to the alert dialog component object.[/en]
	     *   [ja]ダイアログのコンポーネントオブジェクトを解決するPromiseオブジェクトを返します。[/ja]
	     * @description
	     *   [en]Create a alert dialog instance from a template.[/en]
	     *   [ja]テンプレートからアラートダイアログのインスタンスを生成します。[/ja]
	     */
	    ons.createAlertDialog = function (page, options) {
	      options = options || {};
	
	      options.link = function (element) {
	        if (options.parentScope) {
	          ons.$compile(angular.element(element))(options.parentScope.$new());
	          options.parentScope.$evalAsync();
	        } else {
	          ons.compile(element);
	        }
	      };
	
	      return ons._createAlertDialogOriginal(page, options).then(function (alertDialog) {
	        return angular.element(alertDialog).data('ons-alert-dialog');
	      });
	    };
	
	    /**
	     * @method createDialog
	     * @signature createDialog(page, [options])
	     * @param {String} page
	     *   [en]Page name. Can be either an HTML file or an <ons-template> containing a <ons-dialog> component.[/en]
	     *   [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]
	     * @param {Object} [options]
	     *   [en]Parameter object.[/en]
	     *   [ja]オプションを指定するオブジェクト。[/ja]
	     * @param {Object} [options.parentScope]
	     *   [en]Parent scope of the dialog. Used to bind models and access scope methods from the dialog.[/en]
	     *   [ja]ダイアログ内で利用する親スコープを指定します。ダイアログからモデルやスコープのメソッドにアクセスするのに使います。このパラメータはAngularJSバインディングでのみ利用できます。[/ja]
	     * @return {Promise}
	     *   [en]Promise object that resolves to the dialog component object.[/en]
	     *   [ja]ダイアログのコンポーネントオブジェクトを解決するPromiseオブジェクトを返します。[/ja]
	     * @description
	     *   [en]Create a dialog instance from a template.[/en]
	     *   [ja]テンプレートからダイアログのインスタンスを生成します。[/ja]
	     */
	    ons.createDialog = function (page, options) {
	      options = options || {};
	
	      options.link = function (element) {
	        if (options.parentScope) {
	          ons.$compile(angular.element(element))(options.parentScope.$new());
	          options.parentScope.$evalAsync();
	        } else {
	          ons.compile(element);
	        }
	      };
	
	      return ons._createDialogOriginal(page, options).then(function (dialog) {
	        return angular.element(dialog).data('ons-dialog');
	      });
	    };
	
	    /**
	     * @method createPopover
	     * @signature createPopover(page, [options])
	     * @param {String} page
	     *   [en]Page name. Can be either an HTML file or an <ons-template> containing a <ons-dialog> component.[/en]
	     *   [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]
	     * @param {Object} [options]
	     *   [en]Parameter object.[/en]
	     *   [ja]オプションを指定するオブジェクト。[/ja]
	     * @param {Object} [options.parentScope]
	     *   [en]Parent scope of the dialog. Used to bind models and access scope methods from the dialog.[/en]
	     *   [ja]ダイアログ内で利用する親スコープを指定します。ダイアログからモデルやスコープのメソッドにアクセスするのに使います。このパラメータはAngularJSバインディングでのみ利用できます。[/ja]
	     * @return {Promise}
	     *   [en]Promise object that resolves to the popover component object.[/en]
	     *   [ja]ポップオーバーのコンポーネントオブジェクトを解決するPromiseオブジェクトを返します。[/ja]
	     * @description
	     *   [en]Create a popover instance from a template.[/en]
	     *   [ja]テンプレートからポップオーバーのインスタンスを生成します。[/ja]
	     */
	    ons.createPopover = function (page, options) {
	      options = options || {};
	
	      options.link = function (element) {
	        if (options.parentScope) {
	          ons.$compile(angular.element(element))(options.parentScope.$new());
	          options.parentScope.$evalAsync();
	        } else {
	          ons.compile(element);
	        }
	      };
	
	      return ons._createPopoverOriginal(page, options).then(function (popover) {
	        return angular.element(popover).data('ons-popover');
	      });
	    };
	
	    /**
	     * @param {String} page
	     */
	    ons.resolveLoadingPlaceholder = function (page) {
	      return ons._resolveLoadingPlaceholderOriginal(page, function (element, done) {
	        ons.compile(element);
	        angular.element(element).scope().$evalAsync(function () {
	          setImmediate(done);
	        });
	      });
	    };
	
	    ons._setupLoadingPlaceHolders = function () {
	      // Do nothing
	    };
	  }
	})(window.ons = window.ons || {});
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.factory('AlertDialogView', ['$onsen', function ($onsen) {
	
	    var AlertDialogView = Class.extend({
	
	      /**
	       * @param {Object} scope
	       * @param {jqLite} element
	       * @param {Object} attrs
	       */
	      init: function init(scope, element, attrs) {
	        this._scope = scope;
	        this._element = element;
	        this._attrs = attrs;
	
	        this._clearDerivingMethods = $onsen.deriveMethods(this, this._element[0], ['show', 'hide']);
	
	        this._clearDerivingEvents = $onsen.deriveEvents(this, this._element[0], ['preshow', 'postshow', 'prehide', 'posthide', 'cancel'], function (detail) {
	          if (detail.alertDialog) {
	            detail.alertDialog = this;
	          }
	          return detail;
	        }.bind(this));
	
	        this._scope.$on('$destroy', this._destroy.bind(this));
	      },
	
	      _destroy: function _destroy() {
	        this.emit('destroy');
	
	        this._element.remove();
	
	        this._clearDerivingMethods();
	        this._clearDerivingEvents();
	
	        this._scope = this._attrs = this._element = null;
	      }
	
	    });
	
	    MicroEvent.mixin(AlertDialogView);
	    $onsen.derivePropertiesFromElement(AlertDialogView, ['disabled', 'cancelable', 'visible', 'onDeviceBackButton']);
	
	    return AlertDialogView;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	angular.module('onsen').value('AlertDialogAnimator', ons._internal.AlertDialogAnimator).value('AndroidAlertDialogAnimator', ons._internal.AndroidAlertDialogAnimator).value('IOSAlertDialogAnimator', ons._internal.IOSAlertDialogAnimator);
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	angular.module('onsen').value('AnimationChooser', ons._internal.AnimatorFactory);
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.factory('CarouselView', ['$onsen', function ($onsen) {
	
	    /**
	     * @class CarouselView
	     */
	    var CarouselView = Class.extend({
	
	      /**
	       * @param {Object} scope
	       * @param {jqLite} element
	       * @param {Object} attrs
	       */
	      init: function init(scope, element, attrs) {
	        this._element = element;
	        this._scope = scope;
	        this._attrs = attrs;
	
	        this._scope.$on('$destroy', this._destroy.bind(this));
	
	        this._clearDerivingMethods = $onsen.deriveMethods(this, element[0], ['setActiveIndex', 'getActiveIndex', 'next', 'prev', 'refresh', 'first', 'last']);
	
	        this._clearDerivingEvents = $onsen.deriveEvents(this, element[0], ['refresh', 'postchange', 'overscroll'], function (detail) {
	          if (detail.carousel) {
	            detail.carousel = this;
	          }
	          return detail;
	        }.bind(this));
	      },
	
	      _destroy: function _destroy() {
	        this.emit('destroy');
	
	        this._clearDerivingEvents();
	        this._clearDerivingMethods();
	
	        this._element = this._scope = this._attrs = null;
	      }
	    });
	
	    MicroEvent.mixin(CarouselView);
	
	    $onsen.derivePropertiesFromElement(CarouselView, ['centered', 'overscrollable', 'disabled', 'autoScroll', 'swipeable', 'autoScrollRatio', 'itemCount']);
	
	    return CarouselView;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.factory('DialogView', ['$onsen', function ($onsen) {
	
	    var DialogView = Class.extend({
	
	      init: function init(scope, element, attrs) {
	        this._scope = scope;
	        this._element = element;
	        this._attrs = attrs;
	
	        this._clearDerivingMethods = $onsen.deriveMethods(this, this._element[0], ['show', 'hide']);
	
	        this._clearDerivingEvents = $onsen.deriveEvents(this, this._element[0], ['preshow', 'postshow', 'prehide', 'posthide', 'cancel'], function (detail) {
	          if (detail.dialog) {
	            detail.dialog = this;
	          }
	          return detail;
	        }.bind(this));
	
	        this._scope.$on('$destroy', this._destroy.bind(this));
	      },
	
	      _destroy: function _destroy() {
	        this.emit('destroy');
	
	        this._element.remove();
	        this._clearDerivingMethods();
	        this._clearDerivingEvents();
	
	        this._scope = this._attrs = this._element = null;
	      }
	    });
	
	    DialogView.registerAnimator = function (name, Animator) {
	      return window.ons.DialogElement.registerAnimator(name, Animator);
	    };
	
	    MicroEvent.mixin(DialogView);
	    $onsen.derivePropertiesFromElement(DialogView, ['disabled', 'cancelable', 'visible', 'onDeviceBackButton']);
	
	    return DialogView;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	   Licensed under the Apache License, Version 2.0 (the "License");
	   you may not use this file except in compliance with the License.
	   You may obtain a copy of the License at
	
	http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	angular.module('onsen').value('DialogAnimator', ons._internal.DialogAnimator).value('IOSDialogAnimator', ons._internal.IOSDialogAnimator).value('AndroidDialogAnimator', ons._internal.AndroidDialogAnimator).value('SlideDialogAnimator', ons._internal.SlideDialogAnimator);
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.factory('FabView', ['$onsen', function ($onsen) {
	
	    /**
	     * @class FabView
	     */
	    var FabView = Class.extend({
	
	      /**
	       * @param {Object} scope
	       * @param {jqLite} element
	       * @param {Object} attrs
	       */
	      init: function init(scope, element, attrs) {
	        this._element = element;
	        this._scope = scope;
	        this._attrs = attrs;
	
	        this._scope.$on('$destroy', this._destroy.bind(this));
	
	        this._clearDerivingMethods = $onsen.deriveMethods(this, element[0], ['show', 'hide', 'toggle']);
	      },
	
	      _destroy: function _destroy() {
	        this.emit('destroy');
	        this._clearDerivingMethods();
	
	        this._element = this._scope = this._attrs = null;
	      }
	    });
	
	    $onsen.derivePropertiesFromElement(FabView, ['disabled', 'visible']);
	
	    MicroEvent.mixin(FabView);
	
	    return FabView;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  angular.module('onsen').factory('GenericView', ['$onsen', function ($onsen) {
	
	    var GenericView = Class.extend({
	
	      /**
	       * @param {Object} scope
	       * @param {jqLite} element
	       * @param {Object} attrs
	       * @param {Object} [options]
	       * @param {Boolean} [options.directiveOnly]
	       * @param {Function} [options.onDestroy]
	       * @param {String} [options.modifierTemplate]
	       */
	      init: function init(scope, element, attrs, options) {
	        var self = this;
	        options = {};
	
	        this._element = element;
	        this._scope = scope;
	        this._attrs = attrs;
	
	        if (options.directiveOnly) {
	          if (!options.modifierTemplate) {
	            throw new Error('options.modifierTemplate is undefined.');
	          }
	          $onsen.addModifierMethods(this, options.modifierTemplate, element);
	        } else {
	          $onsen.addModifierMethodsForCustomElements(this, element);
	        }
	
	        $onsen.cleaner.onDestroy(scope, function () {
	          self._events = undefined;
	          $onsen.removeModifierMethods(self);
	
	          if (options.onDestroy) {
	            options.onDestroy(self);
	          }
	
	          $onsen.clearComponent({
	            scope: scope,
	            attrs: attrs,
	            element: element
	          });
	
	          self = element = self._element = self._scope = scope = self._attrs = attrs = options = null;
	        });
	      }
	    });
	
	    /**
	     * @param {Object} scope
	     * @param {jqLite} element
	     * @param {Object} attrs
	     * @param {Object} options
	     * @param {String} options.viewKey
	     * @param {Boolean} [options.directiveOnly]
	     * @param {Function} [options.onDestroy]
	     * @param {String} [options.modifierTemplate]
	     */
	    GenericView.register = function (scope, element, attrs, options) {
	      var view = new GenericView(scope, element, attrs, options);
	
	      if (!options.viewKey) {
	        throw new Error('options.viewKey is required.');
	      }
	
	      $onsen.declareVarAttribute(attrs, view);
	      element.data(options.viewKey, view);
	
	      var destroy = options.onDestroy || angular.noop;
	      options.onDestroy = function (view) {
	        destroy(view);
	        element.data(options.viewKey, null);
	      };
	
	      return view;
	    };
	
	    MicroEvent.mixin(GenericView);
	
	    return GenericView;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.factory('LazyRepeatView', ['AngularLazyRepeatDelegate', function (AngularLazyRepeatDelegate) {
	
	    var LazyRepeatView = Class.extend({
	
	      /**
	       * @param {Object} scope
	       * @param {jqLite} element
	       * @param {Object} attrs
	       */
	      init: function init(scope, element, attrs, linker) {
	        var _this = this;
	
	        this._element = element;
	        this._scope = scope;
	        this._attrs = attrs;
	        this._linker = linker;
	
	        ons._util.updateParentPosition(element[0]);
	
	        var userDelegate = this._scope.$eval(this._attrs.onsLazyRepeat);
	
	        var internalDelegate = new AngularLazyRepeatDelegate(userDelegate, element[0], element.scope());
	
	        this._provider = new ons._internal.LazyRepeatProvider(element[0].parentNode, internalDelegate);
	
	        // Expose refresh method to user.
	        userDelegate.refresh = this._provider.refresh.bind(this._provider);
	
	        element.remove();
	
	        // Render when number of items change.
	        this._scope.$watch(internalDelegate.countItems.bind(internalDelegate), this._provider._onChange.bind(this._provider));
	
	        this._scope.$on('$destroy', function () {
	          _this._element = _this._scope = _this._attrs = _this._linker = null;
	        });
	      }
	    });
	
	    return LazyRepeatView;
	  }]);
	})();
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  angular.module('onsen').factory('AngularLazyRepeatDelegate', ['$compile', function ($compile) {
	
	    var directiveAttributes = ['ons-lazy-repeat', 'ons:lazy:repeat', 'ons_lazy_repeat', 'data-ons-lazy-repeat', 'x-ons-lazy-repeat'];
	
	    var AngularLazyRepeatDelegate = function (_ons$_internal$LazyRe) {
	      _inherits(AngularLazyRepeatDelegate, _ons$_internal$LazyRe);
	
	      /**
	       * @param {Object} userDelegate
	       * @param {Element} templateElement
	       * @param {Scope} parentScope
	       */
	      function AngularLazyRepeatDelegate(userDelegate, templateElement, parentScope) {
	        _classCallCheck(this, AngularLazyRepeatDelegate);
	
	        var _this = _possibleConstructorReturn(this, (AngularLazyRepeatDelegate.__proto__ || Object.getPrototypeOf(AngularLazyRepeatDelegate)).call(this, userDelegate, templateElement));
	
	        _this._parentScope = parentScope;
	
	        directiveAttributes.forEach(function (attr) {
	          return templateElement.removeAttribute(attr);
	        });
	        _this._linker = $compile(templateElement ? templateElement.cloneNode(true) : null);
	        return _this;
	      }
	
	      _createClass(AngularLazyRepeatDelegate, [{
	        key: 'configureItemScope',
	        value: function configureItemScope(item, scope) {
	          if (this._userDelegate.configureItemScope instanceof Function) {
	            this._userDelegate.configureItemScope(item, scope);
	          }
	        }
	      }, {
	        key: 'destroyItemScope',
	        value: function destroyItemScope(item, element) {
	          if (this._userDelegate.destroyItemScope instanceof Function) {
	            this._userDelegate.destroyItemScope(item, element);
	          }
	        }
	      }, {
	        key: '_usingBinding',
	        value: function _usingBinding() {
	          if (this._userDelegate.configureItemScope) {
	            return true;
	          }
	
	          if (this._userDelegate.createItemContent) {
	            return false;
	          }
	
	          throw new Error('`lazy-repeat` delegate object is vague.');
	        }
	      }, {
	        key: 'loadItemElement',
	        value: function loadItemElement(index, parent, done) {
	          this._prepareItemElement(index, function (_ref) {
	            var element = _ref.element,
	                scope = _ref.scope;
	
	            parent.appendChild(element);
	            done({ element: element, scope: scope });
	          });
	        }
	      }, {
	        key: '_prepareItemElement',
	        value: function _prepareItemElement(index, done) {
	          var _this2 = this;
	
	          var scope = this._parentScope.$new();
	          this._addSpecialProperties(index, scope);
	
	          if (this._usingBinding()) {
	            this.configureItemScope(index, scope);
	          }
	
	          this._linker(scope, function (cloned) {
	            var element = cloned[0];
	            if (!_this2._usingBinding()) {
	              element = _this2._userDelegate.createItemContent(index, element);
	              $compile(element)(scope);
	            }
	
	            done({ element: element, scope: scope });
	          });
	        }
	
	        /**
	         * @param {Number} index
	         * @param {Object} scope
	         */
	
	      }, {
	        key: '_addSpecialProperties',
	        value: function _addSpecialProperties(i, scope) {
	          var last = this.countItems() - 1;
	          angular.extend(scope, {
	            $index: i,
	            $first: i === 0,
	            $last: i === last,
	            $middle: i !== 0 && i !== last,
	            $even: i % 2 === 0,
	            $odd: i % 2 === 1
	          });
	        }
	      }, {
	        key: 'updateItem',
	        value: function updateItem(index, item) {
	          var _this3 = this;
	
	          if (this._usingBinding()) {
	            item.scope.$evalAsync(function () {
	              return _this3.configureItemScope(index, item.scope);
	            });
	          } else {
	            _get(AngularLazyRepeatDelegate.prototype.__proto__ || Object.getPrototypeOf(AngularLazyRepeatDelegate.prototype), 'updateItem', this).call(this, index, item);
	          }
	        }
	
	        /**
	         * @param {Number} index
	         * @param {Object} item
	         * @param {Object} item.scope
	         * @param {Element} item.element
	         */
	
	      }, {
	        key: 'destroyItem',
	        value: function destroyItem(index, item) {
	          if (this._usingBinding()) {
	            this.destroyItemScope(index, item.scope);
	          } else {
	            _get(AngularLazyRepeatDelegate.prototype.__proto__ || Object.getPrototypeOf(AngularLazyRepeatDelegate.prototype), 'destroyItem', this).call(this, index, item.element);
	          }
	          item.scope.$destroy();
	        }
	      }, {
	        key: 'destroy',
	        value: function destroy() {
	          _get(AngularLazyRepeatDelegate.prototype.__proto__ || Object.getPrototypeOf(AngularLazyRepeatDelegate.prototype), 'destroy', this).call(this);
	          this._scope = null;
	        }
	      }]);
	
	      return AngularLazyRepeatDelegate;
	    }(ons._internal.LazyRepeatDelegate);
	
	    return AngularLazyRepeatDelegate;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.value('ModalAnimator', ons._internal.ModalAnimator);
	  module.value('FadeModalAnimator', ons._internal.FadeModalAnimator);
	
	  module.factory('ModalView', ['$onsen', '$parse', function ($onsen, $parse) {
	
	    var ModalView = Class.extend({
	      _element: undefined,
	      _scope: undefined,
	
	      init: function init(scope, element, attrs) {
	        this._scope = scope;
	        this._element = element;
	        this._scope.$on('$destroy', this._destroy.bind(this));
	
	        element[0]._animatorFactory.setAnimationOptions($parse(attrs.animationOptions)());
	      },
	
	      show: function show(options) {
	        return this._element[0].show(options);
	      },
	
	      hide: function hide(options) {
	        return this._element[0].hide(options);
	      },
	
	      toggle: function toggle(options) {
	        return this._element[0].toggle(options);
	      },
	
	      _destroy: function _destroy() {
	        this.emit('destroy', { page: this });
	
	        this._events = this._element = this._scope = null;
	      }
	    });
	
	    ModalView.registerAnimator = function (name, Animator) {
	      return window.ons.ModalElement.registerAnimator(name, Animator);
	    };
	
	    MicroEvent.mixin(ModalView);
	    $onsen.derivePropertiesFromElement(ModalView, ['onDeviceBackButton']);
	
	    return ModalView;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.factory('NavigatorView', ['$compile', '$onsen', function ($compile, $onsen) {
	
	    /**
	     * Manages the page navigation backed by page stack.
	     *
	     * @class NavigatorView
	     */
	    var NavigatorView = Class.extend({
	
	      /**
	       * @member {jqLite} Object
	       */
	      _element: undefined,
	
	      /**
	       * @member {Object} Object
	       */
	      _attrs: undefined,
	
	      /**
	       * @member {Object}
	       */
	      _scope: undefined,
	
	      /**
	       * @param {Object} scope
	       * @param {jqLite} element jqLite Object to manage with navigator
	       * @param {Object} attrs
	       */
	      init: function init(scope, element, attrs) {
	
	        this._element = element || angular.element(window.document.body);
	        this._scope = scope || this._element.scope();
	        this._attrs = attrs;
	        this._previousPageScope = null;
	
	        this._boundOnPrepop = this._onPrepop.bind(this);
	        this._element.on('prepop', this._boundOnPrepop);
	
	        this._scope.$on('$destroy', this._destroy.bind(this));
	
	        this._clearDerivingEvents = $onsen.deriveEvents(this, element[0], ['prepush', 'postpush', 'prepop', 'postpop', 'init', 'show', 'hide', 'destroy'], function (detail) {
	          if (detail.navigator) {
	            detail.navigator = this;
	          }
	          return detail;
	        }.bind(this));
	
	        this._clearDerivingMethods = $onsen.deriveMethods(this, element[0], ['insertPage', 'pushPage', 'bringPageTop', 'popPage', 'replacePage', 'resetToPage', 'canPopPage']);
	      },
	
	      _onPrepop: function _onPrepop(event) {
	        var pages = event.detail.navigator.pages;
	        angular.element(pages[pages.length - 2]).data('_scope').$evalAsync();
	      },
	
	      _destroy: function _destroy() {
	        this.emit('destroy');
	        this._clearDerivingEvents();
	        this._clearDerivingMethods();
	        this._element.off('prepop', this._boundOnPrepop);
	        this._element = this._scope = this._attrs = null;
	      }
	    });
	
	    MicroEvent.mixin(NavigatorView);
	    $onsen.derivePropertiesFromElement(NavigatorView, ['pages', 'topPage']);
	
	    return NavigatorView;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	   Licensed under the Apache License, Version 2.0 (the "License");
	   you may not use this file except in compliance with the License.
	   You may obtain a copy of the License at
	
	http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	angular.module('onsen').value('NavigatorTransitionAnimator', ons._internal.NavigatorTransitionAnimator).value('FadeTransitionAnimator', ons._internal.FadeNavigatorTransitionAnimator).value('IOSSlideTransitionAnimator', ons._internal.IOSSlideNavigatorTransitionAnimator).value('LiftTransitionAnimator', ons._internal.LiftNavigatorTransitionAnimator).value('NullTransitionAnimator', ons._internal.NavigatorTransitionAnimator).value('SimpleSlideTransitionAnimator', ons._internal.SimpleSlideNavigatorTransitionAnimator);
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.factory('OverlaySlidingMenuAnimator', ['SlidingMenuAnimator', function (SlidingMenuAnimator) {
	
	    var OverlaySlidingMenuAnimator = SlidingMenuAnimator.extend({
	
	      _blackMask: undefined,
	
	      _isRight: false,
	      _element: false,
	      _menuPage: false,
	      _mainPage: false,
	      _width: false,
	
	      /**
	       * @param {jqLite} element "ons-sliding-menu" or "ons-split-view" element
	       * @param {jqLite} mainPage
	       * @param {jqLite} menuPage
	       * @param {Object} options
	       * @param {String} options.width "width" style value
	       * @param {Boolean} options.isRight
	       */
	      setup: function setup(element, mainPage, menuPage, options) {
	        options = options || {};
	        this._width = options.width || '90%';
	        this._isRight = !!options.isRight;
	        this._element = element;
	        this._mainPage = mainPage;
	        this._menuPage = menuPage;
	
	        menuPage.css('box-shadow', '0px 0 10px 0px rgba(0, 0, 0, 0.2)');
	        menuPage.css({
	          width: options.width,
	          display: 'none',
	          zIndex: 2
	        });
	
	        // Fix for transparent menu page on iOS8.
	        menuPage.css('-webkit-transform', 'translate3d(0px, 0px, 0px)');
	
	        mainPage.css({ zIndex: 1 });
	
	        if (this._isRight) {
	          menuPage.css({
	            right: '-' + options.width,
	            left: 'auto'
	          });
	        } else {
	          menuPage.css({
	            right: 'auto',
	            left: '-' + options.width
	          });
	        }
	
	        this._blackMask = angular.element('<div></div>').css({
	          backgroundColor: 'black',
	          top: '0px',
	          left: '0px',
	          right: '0px',
	          bottom: '0px',
	          position: 'absolute',
	          display: 'none',
	          zIndex: 0
	        });
	
	        element.prepend(this._blackMask);
	      },
	
	      /**
	       * @param {Object} options
	       * @param {String} options.width
	       */
	      onResized: function onResized(options) {
	        this._menuPage.css('width', options.width);
	
	        if (this._isRight) {
	          this._menuPage.css({
	            right: '-' + options.width,
	            left: 'auto'
	          });
	        } else {
	          this._menuPage.css({
	            right: 'auto',
	            left: '-' + options.width
	          });
	        }
	
	        if (options.isOpened) {
	          var max = this._menuPage[0].clientWidth;
	          var menuStyle = this._generateMenuPageStyle(max);
	          ons.animit(this._menuPage[0]).queue(menuStyle).play();
	        }
	      },
	
	      /**
	       */
	      destroy: function destroy() {
	        if (this._blackMask) {
	          this._blackMask.remove();
	          this._blackMask = null;
	        }
	
	        this._mainPage.removeAttr('style');
	        this._menuPage.removeAttr('style');
	
	        this._element = this._mainPage = this._menuPage = null;
	      },
	
	      /**
	       * @param {Function} callback
	       * @param {Boolean} instant
	       */
	      openMenu: function openMenu(callback, instant) {
	        var duration = instant === true ? 0.0 : this.duration;
	        var delay = instant === true ? 0.0 : this.delay;
	
	        this._menuPage.css('display', 'block');
	        this._blackMask.css('display', 'block');
	
	        var max = this._menuPage[0].clientWidth;
	        var menuStyle = this._generateMenuPageStyle(max);
	        var mainPageStyle = this._generateMainPageStyle(max);
	
	        setTimeout(function () {
	
	          ons.animit(this._mainPage[0]).wait(delay).queue(mainPageStyle, {
	            duration: duration,
	            timing: this.timing
	          }).queue(function (done) {
	            callback();
	            done();
	          }).play();
	
	          ons.animit(this._menuPage[0]).wait(delay).queue(menuStyle, {
	            duration: duration,
	            timing: this.timing
	          }).play();
	        }.bind(this), 1000 / 60);
	      },
	
	      /**
	       * @param {Function} callback
	       * @param {Boolean} instant
	       */
	      closeMenu: function closeMenu(callback, instant) {
	        var duration = instant === true ? 0.0 : this.duration;
	        var delay = instant === true ? 0.0 : this.delay;
	
	        this._blackMask.css({ display: 'block' });
	
	        var menuPageStyle = this._generateMenuPageStyle(0);
	        var mainPageStyle = this._generateMainPageStyle(0);
	
	        setTimeout(function () {
	
	          ons.animit(this._mainPage[0]).wait(delay).queue(mainPageStyle, {
	            duration: duration,
	            timing: this.timing
	          }).queue(function (done) {
	            this._menuPage.css('display', 'none');
	            callback();
	            done();
	          }.bind(this)).play();
	
	          ons.animit(this._menuPage[0]).wait(delay).queue(menuPageStyle, {
	            duration: duration,
	            timing: this.timing
	          }).play();
	        }.bind(this), 1000 / 60);
	      },
	
	      /**
	       * @param {Object} options
	       * @param {Number} options.distance
	       * @param {Number} options.maxDistance
	       */
	      translateMenu: function translateMenu(options) {
	
	        this._menuPage.css('display', 'block');
	        this._blackMask.css({ display: 'block' });
	
	        var menuPageStyle = this._generateMenuPageStyle(Math.min(options.maxDistance, options.distance));
	        var mainPageStyle = this._generateMainPageStyle(Math.min(options.maxDistance, options.distance));
	        delete mainPageStyle.opacity;
	
	        ons.animit(this._menuPage[0]).queue(menuPageStyle).play();
	
	        if (Object.keys(mainPageStyle).length > 0) {
	          ons.animit(this._mainPage[0]).queue(mainPageStyle).play();
	        }
	      },
	
	      _generateMenuPageStyle: function _generateMenuPageStyle(distance) {
	        var x = this._isRight ? -distance : distance;
	        var transform = 'translate3d(' + x + 'px, 0, 0)';
	
	        return {
	          transform: transform,
	          'box-shadow': distance === 0 ? 'none' : '0px 0 10px 0px rgba(0, 0, 0, 0.2)'
	        };
	      },
	
	      _generateMainPageStyle: function _generateMainPageStyle(distance) {
	        var max = this._menuPage[0].clientWidth;
	        var opacity = 1 - 0.1 * distance / max;
	
	        return {
	          opacity: opacity
	        };
	      },
	
	      copy: function copy() {
	        return new OverlaySlidingMenuAnimator();
	      }
	    });
	
	    return OverlaySlidingMenuAnimator;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.factory('PageView', ['$onsen', '$parse', function ($onsen, $parse) {
	
	    var PageView = Class.extend({
	      init: function init(scope, element, attrs) {
	        var _this = this;
	
	        this._scope = scope;
	        this._element = element;
	        this._attrs = attrs;
	
	        this._clearListener = scope.$on('$destroy', this._destroy.bind(this));
	
	        this._clearDerivingEvents = $onsen.deriveEvents(this, element[0], ['init', 'show', 'hide', 'destroy']);
	
	        Object.defineProperty(this, 'onDeviceBackButton', {
	          get: function get() {
	            return _this._element[0].onDeviceBackButton;
	          },
	          set: function set(value) {
	            if (!_this._userBackButtonHandler) {
	              _this._enableBackButtonHandler();
	            }
	            _this._userBackButtonHandler = value;
	          }
	        });
	
	        if (this._attrs.ngDeviceBackButton || this._attrs.onDeviceBackButton) {
	          this._enableBackButtonHandler();
	        }
	        if (this._attrs.ngInfiniteScroll) {
	          this._element[0].onInfiniteScroll = function (done) {
	            $parse(_this._attrs.ngInfiniteScroll)(_this._scope)(done);
	          };
	        }
	      },
	
	      _enableBackButtonHandler: function _enableBackButtonHandler() {
	        this._userBackButtonHandler = angular.noop;
	        this._element[0].onDeviceBackButton = this._onDeviceBackButton.bind(this);
	      },
	
	      _onDeviceBackButton: function _onDeviceBackButton($event) {
	        this._userBackButtonHandler($event);
	
	        // ng-device-backbutton
	        if (this._attrs.ngDeviceBackButton) {
	          $parse(this._attrs.ngDeviceBackButton)(this._scope, { $event: $event });
	        }
	
	        // on-device-backbutton
	        /* jshint ignore:start */
	        if (this._attrs.onDeviceBackButton) {
	          var lastEvent = window.$event;
	          window.$event = $event;
	          new Function(this._attrs.onDeviceBackButton)(); // eslint-disable-line no-new-func
	          window.$event = lastEvent;
	        }
	        /* jshint ignore:end */
	      },
	
	      _destroy: function _destroy() {
	        this._clearDerivingEvents();
	
	        this._element = null;
	        this._scope = null;
	
	        this._clearListener();
	      }
	    });
	    MicroEvent.mixin(PageView);
	
	    return PageView;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  angular.module('onsen').factory('PopoverView', ['$onsen', function ($onsen) {
	
	    var PopoverView = Class.extend({
	
	      /**
	       * @param {Object} scope
	       * @param {jqLite} element
	       * @param {Object} attrs
	       */
	      init: function init(scope, element, attrs) {
	        this._element = element;
	        this._scope = scope;
	        this._attrs = attrs;
	
	        this._scope.$on('$destroy', this._destroy.bind(this));
	
	        this._clearDerivingMethods = $onsen.deriveMethods(this, this._element[0], ['show', 'hide']);
	
	        this._clearDerivingEvents = $onsen.deriveEvents(this, this._element[0], ['preshow', 'postshow', 'prehide', 'posthide'], function (detail) {
	          if (detail.popover) {
	            detail.popover = this;
	          }
	          return detail;
	        }.bind(this));
	      },
	
	      _destroy: function _destroy() {
	        this.emit('destroy');
	
	        this._clearDerivingMethods();
	        this._clearDerivingEvents();
	
	        this._element.remove();
	
	        this._element = this._scope = null;
	      }
	    });
	
	    MicroEvent.mixin(PopoverView);
	    $onsen.derivePropertiesFromElement(PopoverView, ['cancelable', 'disabled', 'onDeviceBackButton']);
	
	    return PopoverView;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	   Licensed under the Apache License, Version 2.0 (the "License");
	   you may not use this file except in compliance with the License.
	   You may obtain a copy of the License at
	
	http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	angular.module('onsen').value('PopoverAnimator', ons._internal.PopoverAnimator).value('FadePopoverAnimator', ons._internal.FadePopoverAnimator);
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.factory('PullHookView', ['$onsen', '$parse', function ($onsen, $parse) {
	
	    var PullHookView = Class.extend({
	
	      init: function init(scope, element, attrs) {
	        var _this = this;
	
	        this._element = element;
	        this._scope = scope;
	        this._attrs = attrs;
	
	        this._clearDerivingEvents = $onsen.deriveEvents(this, this._element[0], ['changestate'], function (detail) {
	          if (detail.pullHook) {
	            detail.pullHook = _this;
	          }
	          return detail;
	        });
	
	        this.on('changestate', function () {
	          return _this._scope.$evalAsync();
	        });
	
	        this._element[0].onAction = function (done) {
	          if (_this._attrs.ngAction) {
	            _this._scope.$eval(_this._attrs.ngAction, { $done: done });
	          } else {
	            _this.onAction ? _this.onAction(done) : done();
	          }
	        };
	
	        this._scope.$on('$destroy', this._destroy.bind(this));
	      },
	
	      _destroy: function _destroy() {
	        this.emit('destroy');
	
	        this._clearDerivingEvents();
	
	        this._element = this._scope = this._attrs = null;
	      }
	    });
	
	    MicroEvent.mixin(PullHookView);
	    $onsen.derivePropertiesFromElement(PullHookView, ['state', 'pullDistance', 'height', 'thresholdHeight', 'disabled']);
	
	    return PullHookView;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.factory('PushSlidingMenuAnimator', ['SlidingMenuAnimator', function (SlidingMenuAnimator) {
	
	    var PushSlidingMenuAnimator = SlidingMenuAnimator.extend({
	
	      _isRight: false,
	      _element: undefined,
	      _menuPage: undefined,
	      _mainPage: undefined,
	      _width: undefined,
	
	      /**
	       * @param {jqLite} element "ons-sliding-menu" or "ons-split-view" element
	       * @param {jqLite} mainPage
	       * @param {jqLite} menuPage
	       * @param {Object} options
	       * @param {String} options.width "width" style value
	       * @param {Boolean} options.isRight
	       */
	      setup: function setup(element, mainPage, menuPage, options) {
	        options = options || {};
	
	        this._element = element;
	        this._mainPage = mainPage;
	        this._menuPage = menuPage;
	
	        this._isRight = !!options.isRight;
	        this._width = options.width || '90%';
	
	        menuPage.css({
	          width: options.width,
	          display: 'none'
	        });
	
	        if (this._isRight) {
	          menuPage.css({
	            right: '-' + options.width,
	            left: 'auto'
	          });
	        } else {
	          menuPage.css({
	            right: 'auto',
	            left: '-' + options.width
	          });
	        }
	      },
	
	      /**
	       * @param {Object} options
	       * @param {String} options.width
	       * @param {Object} options.isRight
	       */
	      onResized: function onResized(options) {
	        this._menuPage.css('width', options.width);
	
	        if (this._isRight) {
	          this._menuPage.css({
	            right: '-' + options.width,
	            left: 'auto'
	          });
	        } else {
	          this._menuPage.css({
	            right: 'auto',
	            left: '-' + options.width
	          });
	        }
	
	        if (options.isOpened) {
	          var max = this._menuPage[0].clientWidth;
	          var mainPageTransform = this._generateAbovePageTransform(max);
	          var menuPageStyle = this._generateBehindPageStyle(max);
	
	          ons.animit(this._mainPage[0]).queue({ transform: mainPageTransform }).play();
	          ons.animit(this._menuPage[0]).queue(menuPageStyle).play();
	        }
	      },
	
	      /**
	       */
	      destroy: function destroy() {
	        this._mainPage.removeAttr('style');
	        this._menuPage.removeAttr('style');
	
	        this._element = this._mainPage = this._menuPage = null;
	      },
	
	      /**
	       * @param {Function} callback
	       * @param {Boolean} instant
	       */
	      openMenu: function openMenu(callback, instant) {
	        var duration = instant === true ? 0.0 : this.duration;
	        var delay = instant === true ? 0.0 : this.delay;
	
	        this._menuPage.css('display', 'block');
	
	        var max = this._menuPage[0].clientWidth;
	
	        var aboveTransform = this._generateAbovePageTransform(max);
	        var behindStyle = this._generateBehindPageStyle(max);
	
	        setTimeout(function () {
	
	          ons.animit(this._mainPage[0]).wait(delay).queue({
	            transform: aboveTransform
	          }, {
	            duration: duration,
	            timing: this.timing
	          }).queue(function (done) {
	            callback();
	            done();
	          }).play();
	
	          ons.animit(this._menuPage[0]).wait(delay).queue(behindStyle, {
	            duration: duration,
	            timing: this.timing
	          }).play();
	        }.bind(this), 1000 / 60);
	      },
	
	      /**
	       * @param {Function} callback
	       * @param {Boolean} instant
	       */
	      closeMenu: function closeMenu(callback, instant) {
	        var duration = instant === true ? 0.0 : this.duration;
	        var delay = instant === true ? 0.0 : this.delay;
	
	        var aboveTransform = this._generateAbovePageTransform(0);
	        var behindStyle = this._generateBehindPageStyle(0);
	
	        setTimeout(function () {
	
	          ons.animit(this._mainPage[0]).wait(delay).queue({
	            transform: aboveTransform
	          }, {
	            duration: duration,
	            timing: this.timing
	          }).queue({
	            transform: 'translate3d(0, 0, 0)'
	          }).queue(function (done) {
	            this._menuPage.css('display', 'none');
	            callback();
	            done();
	          }.bind(this)).play();
	
	          ons.animit(this._menuPage[0]).wait(delay).queue(behindStyle, {
	            duration: duration,
	            timing: this.timing
	          }).queue(function (done) {
	            done();
	          }).play();
	        }.bind(this), 1000 / 60);
	      },
	
	      /**
	       * @param {Object} options
	       * @param {Number} options.distance
	       * @param {Number} options.maxDistance
	       */
	      translateMenu: function translateMenu(options) {
	
	        this._menuPage.css('display', 'block');
	
	        var aboveTransform = this._generateAbovePageTransform(Math.min(options.maxDistance, options.distance));
	        var behindStyle = this._generateBehindPageStyle(Math.min(options.maxDistance, options.distance));
	
	        ons.animit(this._mainPage[0]).queue({ transform: aboveTransform }).play();
	
	        ons.animit(this._menuPage[0]).queue(behindStyle).play();
	      },
	
	      _generateAbovePageTransform: function _generateAbovePageTransform(distance) {
	        var x = this._isRight ? -distance : distance;
	        var aboveTransform = 'translate3d(' + x + 'px, 0, 0)';
	
	        return aboveTransform;
	      },
	
	      _generateBehindPageStyle: function _generateBehindPageStyle(distance) {
	        var behindX = this._isRight ? -distance : distance;
	        var behindTransform = 'translate3d(' + behindX + 'px, 0, 0)';
	
	        return {
	          transform: behindTransform
	        };
	      },
	
	      copy: function copy() {
	        return new PushSlidingMenuAnimator();
	      }
	    });
	
	    return PushSlidingMenuAnimator;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.factory('RevealSlidingMenuAnimator', ['SlidingMenuAnimator', function (SlidingMenuAnimator) {
	
	    var RevealSlidingMenuAnimator = SlidingMenuAnimator.extend({
	
	      _blackMask: undefined,
	
	      _isRight: false,
	
	      _menuPage: undefined,
	      _element: undefined,
	      _mainPage: undefined,
	
	      /**
	       * @param {jqLite} element "ons-sliding-menu" or "ons-split-view" element
	       * @param {jqLite} mainPage
	       * @param {jqLite} menuPage
	       * @param {Object} options
	       * @param {String} options.width "width" style value
	       * @param {Boolean} options.isRight
	       */
	      setup: function setup(element, mainPage, menuPage, options) {
	        this._element = element;
	        this._menuPage = menuPage;
	        this._mainPage = mainPage;
	        this._isRight = !!options.isRight;
	        this._width = options.width || '90%';
	
	        mainPage.css({
	          boxShadow: '0px 0 10px 0px rgba(0, 0, 0, 0.2)'
	        });
	
	        menuPage.css({
	          width: options.width,
	          opacity: 0.9,
	          display: 'none'
	        });
	
	        if (this._isRight) {
	          menuPage.css({
	            right: '0px',
	            left: 'auto'
	          });
	        } else {
	          menuPage.css({
	            right: 'auto',
	            left: '0px'
	          });
	        }
	
	        this._blackMask = angular.element('<div></div>').css({
	          backgroundColor: 'black',
	          top: '0px',
	          left: '0px',
	          right: '0px',
	          bottom: '0px',
	          position: 'absolute',
	          display: 'none'
	        });
	
	        element.prepend(this._blackMask);
	
	        // Dirty fix for broken rendering bug on android 4.x.
	        ons.animit(mainPage[0]).queue({ transform: 'translate3d(0, 0, 0)' }).play();
	      },
	
	      /**
	       * @param {Object} options
	       * @param {Boolean} options.isOpened
	       * @param {String} options.width
	       */
	      onResized: function onResized(options) {
	        this._width = options.width;
	        this._menuPage.css('width', this._width);
	
	        if (options.isOpened) {
	          var max = this._menuPage[0].clientWidth;
	
	          var aboveTransform = this._generateAbovePageTransform(max);
	          var behindStyle = this._generateBehindPageStyle(max);
	
	          ons.animit(this._mainPage[0]).queue({ transform: aboveTransform }).play();
	          ons.animit(this._menuPage[0]).queue(behindStyle).play();
	        }
	      },
	
	      /**
	       * @param {jqLite} element "ons-sliding-menu" or "ons-split-view" element
	       * @param {jqLite} mainPage
	       * @param {jqLite} menuPage
	       */
	      destroy: function destroy() {
	        if (this._blackMask) {
	          this._blackMask.remove();
	          this._blackMask = null;
	        }
	
	        if (this._mainPage) {
	          this._mainPage.attr('style', '');
	        }
	
	        if (this._menuPage) {
	          this._menuPage.attr('style', '');
	        }
	
	        this._mainPage = this._menuPage = this._element = undefined;
	      },
	
	      /**
	       * @param {Function} callback
	       * @param {Boolean} instant
	       */
	      openMenu: function openMenu(callback, instant) {
	        var duration = instant === true ? 0.0 : this.duration;
	        var delay = instant === true ? 0.0 : this.delay;
	
	        this._menuPage.css('display', 'block');
	        this._blackMask.css('display', 'block');
	
	        var max = this._menuPage[0].clientWidth;
	
	        var aboveTransform = this._generateAbovePageTransform(max);
	        var behindStyle = this._generateBehindPageStyle(max);
	
	        setTimeout(function () {
	
	          ons.animit(this._mainPage[0]).wait(delay).queue({
	            transform: aboveTransform
	          }, {
	            duration: duration,
	            timing: this.timing
	          }).queue(function (done) {
	            callback();
	            done();
	          }).play();
	
	          ons.animit(this._menuPage[0]).wait(delay).queue(behindStyle, {
	            duration: duration,
	            timing: this.timing
	          }).play();
	        }.bind(this), 1000 / 60);
	      },
	
	      /**
	       * @param {Function} callback
	       * @param {Boolean} instant
	       */
	      closeMenu: function closeMenu(callback, instant) {
	        var duration = instant === true ? 0.0 : this.duration;
	        var delay = instant === true ? 0.0 : this.delay;
	
	        this._blackMask.css('display', 'block');
	
	        var aboveTransform = this._generateAbovePageTransform(0);
	        var behindStyle = this._generateBehindPageStyle(0);
	
	        setTimeout(function () {
	
	          ons.animit(this._mainPage[0]).wait(delay).queue({
	            transform: aboveTransform
	          }, {
	            duration: duration,
	            timing: this.timing
	          }).queue({
	            transform: 'translate3d(0, 0, 0)'
	          }).queue(function (done) {
	            this._menuPage.css('display', 'none');
	            callback();
	            done();
	          }.bind(this)).play();
	
	          ons.animit(this._menuPage[0]).wait(delay).queue(behindStyle, {
	            duration: duration,
	            timing: this.timing
	          }).queue(function (done) {
	            done();
	          }).play();
	        }.bind(this), 1000 / 60);
	      },
	
	      /**
	       * @param {Object} options
	       * @param {Number} options.distance
	       * @param {Number} options.maxDistance
	       */
	      translateMenu: function translateMenu(options) {
	
	        this._menuPage.css('display', 'block');
	        this._blackMask.css('display', 'block');
	
	        var aboveTransform = this._generateAbovePageTransform(Math.min(options.maxDistance, options.distance));
	        var behindStyle = this._generateBehindPageStyle(Math.min(options.maxDistance, options.distance));
	        delete behindStyle.opacity;
	
	        ons.animit(this._mainPage[0]).queue({ transform: aboveTransform }).play();
	
	        ons.animit(this._menuPage[0]).queue(behindStyle).play();
	      },
	
	      _generateAbovePageTransform: function _generateAbovePageTransform(distance) {
	        var x = this._isRight ? -distance : distance;
	        var aboveTransform = 'translate3d(' + x + 'px, 0, 0)';
	
	        return aboveTransform;
	      },
	
	      _generateBehindPageStyle: function _generateBehindPageStyle(distance) {
	        var max = this._menuPage[0].getBoundingClientRect().width;
	
	        var behindDistance = (distance - max) / max * 10;
	        behindDistance = isNaN(behindDistance) ? 0 : Math.max(Math.min(behindDistance, 0), -10);
	
	        var behindX = this._isRight ? -behindDistance : behindDistance;
	        var behindTransform = 'translate3d(' + behindX + '%, 0, 0)';
	        var opacity = 1 + behindDistance / 100;
	
	        return {
	          transform: behindTransform,
	          opacity: opacity
	        };
	      },
	
	      copy: function copy() {
	        return new RevealSlidingMenuAnimator();
	      }
	    });
	
	    return RevealSlidingMenuAnimator;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  var SlidingMenuViewModel = Class.extend({
	
	    /**
	     * @member Number
	     */
	    _distance: 0,
	
	    /**
	     * @member Number
	     */
	    _maxDistance: undefined,
	
	    /**
	     * @param {Object} options
	     * @param {Number} maxDistance
	     */
	    init: function init(options) {
	      if (!angular.isNumber(options.maxDistance)) {
	        throw new Error('options.maxDistance must be number');
	      }
	
	      this.setMaxDistance(options.maxDistance);
	    },
	
	    /**
	     * @param {Number} maxDistance
	     */
	    setMaxDistance: function setMaxDistance(maxDistance) {
	      if (maxDistance <= 0) {
	        throw new Error('maxDistance must be greater then zero.');
	      }
	
	      if (this.isOpened()) {
	        this._distance = maxDistance;
	      }
	      this._maxDistance = maxDistance;
	    },
	
	    /**
	     * @return {Boolean}
	     */
	    shouldOpen: function shouldOpen() {
	      return !this.isOpened() && this._distance >= this._maxDistance / 2;
	    },
	
	    /**
	     * @return {Boolean}
	     */
	    shouldClose: function shouldClose() {
	      return !this.isClosed() && this._distance < this._maxDistance / 2;
	    },
	
	    openOrClose: function openOrClose(options) {
	      if (this.shouldOpen()) {
	        this.open(options);
	      } else if (this.shouldClose()) {
	        this.close(options);
	      }
	    },
	
	    close: function close(options) {
	      var callback = options.callback || function () {};
	
	      if (!this.isClosed()) {
	        this._distance = 0;
	        this.emit('close', options);
	      } else {
	        callback();
	      }
	    },
	
	    open: function open(options) {
	      var callback = options.callback || function () {};
	
	      if (!this.isOpened()) {
	        this._distance = this._maxDistance;
	        this.emit('open', options);
	      } else {
	        callback();
	      }
	    },
	
	    /**
	     * @return {Boolean}
	     */
	    isClosed: function isClosed() {
	      return this._distance === 0;
	    },
	
	    /**
	     * @return {Boolean}
	     */
	    isOpened: function isOpened() {
	      return this._distance === this._maxDistance;
	    },
	
	    /**
	     * @return {Number}
	     */
	    getX: function getX() {
	      return this._distance;
	    },
	
	    /**
	     * @return {Number}
	     */
	    getMaxDistance: function getMaxDistance() {
	      return this._maxDistance;
	    },
	
	    /**
	     * @param {Number} x
	     */
	    translate: function translate(x) {
	      this._distance = Math.max(1, Math.min(this._maxDistance - 1, x));
	
	      var options = {
	        distance: this._distance,
	        maxDistance: this._maxDistance
	      };
	
	      this.emit('translate', options);
	    },
	
	    toggle: function toggle() {
	      if (this.isClosed()) {
	        this.open();
	      } else {
	        this.close();
	      }
	    }
	  });
	  MicroEvent.mixin(SlidingMenuViewModel);
	
	  module.factory('SlidingMenuView', ['$onsen', '$compile', '$parse', 'AnimationChooser', 'SlidingMenuAnimator', 'RevealSlidingMenuAnimator', 'PushSlidingMenuAnimator', 'OverlaySlidingMenuAnimator', function ($onsen, $compile, $parse, AnimationChooser, SlidingMenuAnimator, RevealSlidingMenuAnimator, PushSlidingMenuAnimator, OverlaySlidingMenuAnimator) {
	
	    var SlidingMenuView = Class.extend({
	      _scope: undefined,
	      _attrs: undefined,
	
	      _element: undefined,
	      _menuPage: undefined,
	      _mainPage: undefined,
	
	      _doorLock: undefined,
	
	      _isRightMenu: false,
	
	      init: function init(scope, element, attrs) {
	        this._scope = scope;
	        this._attrs = attrs;
	        this._element = element;
	
	        this._menuPage = angular.element(element[0].querySelector('.onsen-sliding-menu__menu'));
	        this._mainPage = angular.element(element[0].querySelector('.onsen-sliding-menu__main'));
	
	        this._doorLock = new ons._DoorLock();
	
	        this._isRightMenu = attrs.side === 'right';
	
	        // Close menu on tap event.
	        this._mainPageGestureDetector = new ons.GestureDetector(this._mainPage[0]);
	        this._boundOnTap = this._onTap.bind(this);
	
	        var maxDistance = this._normalizeMaxSlideDistanceAttr();
	        this._logic = new SlidingMenuViewModel({ maxDistance: Math.max(maxDistance, 1) });
	        this._logic.on('translate', this._translate.bind(this));
	        this._logic.on('open', function (options) {
	          this._open(options);
	        }.bind(this));
	        this._logic.on('close', function (options) {
	          this._close(options);
	        }.bind(this));
	
	        attrs.$observe('maxSlideDistance', this._onMaxSlideDistanceChanged.bind(this));
	        attrs.$observe('swipeable', this._onSwipeableChanged.bind(this));
	
	        this._boundOnWindowResize = this._onWindowResize.bind(this);
	        window.addEventListener('resize', this._boundOnWindowResize);
	
	        this._boundHandleEvent = this._handleEvent.bind(this);
	        this._bindEvents();
	
	        if (attrs.mainPage) {
	          this.setMainPage(attrs.mainPage);
	        }
	
	        if (attrs.menuPage) {
	          this.setMenuPage(attrs.menuPage);
	        }
	
	        this._deviceBackButtonHandler = ons._deviceBackButtonDispatcher.createHandler(this._element[0], this._onDeviceBackButton.bind(this));
	
	        var unlock = this._doorLock.lock();
	
	        window.setTimeout(function () {
	          var maxDistance = this._normalizeMaxSlideDistanceAttr();
	          this._logic.setMaxDistance(maxDistance);
	
	          this._menuPage.css({ opacity: 1 });
	
	          var animationChooser = new AnimationChooser({
	            animators: SlidingMenuView._animatorDict,
	            baseClass: SlidingMenuAnimator,
	            baseClassName: 'SlidingMenuAnimator',
	            defaultAnimation: attrs.type,
	            defaultAnimationOptions: $parse(attrs.animationOptions)()
	          });
	          this._animator = animationChooser.newAnimator();
	          this._animator.setup(this._element, this._mainPage, this._menuPage, {
	            isRight: this._isRightMenu,
	            width: this._attrs.maxSlideDistance || '90%'
	          });
	
	          unlock();
	        }.bind(this), 400);
	
	        scope.$on('$destroy', this._destroy.bind(this));
	
	        this._clearDerivingEvents = $onsen.deriveEvents(this, element[0], ['init', 'show', 'hide', 'destroy']);
	
	        if (!attrs.swipeable) {
	          this.setSwipeable(true);
	        }
	      },
	
	      getDeviceBackButtonHandler: function getDeviceBackButtonHandler() {
	        return this._deviceBackButtonHandler;
	      },
	
	      _onDeviceBackButton: function _onDeviceBackButton(event) {
	        if (this.isMenuOpened()) {
	          this.closeMenu();
	        } else {
	          event.callParentHandler();
	        }
	      },
	
	      _onTap: function _onTap() {
	        if (this.isMenuOpened()) {
	          this.closeMenu();
	        }
	      },
	
	      _refreshMenuPageWidth: function _refreshMenuPageWidth() {
	        var width = 'maxSlideDistance' in this._attrs ? this._attrs.maxSlideDistance : '90%';
	
	        if (this._animator) {
	          this._animator.onResized({
	            isOpened: this._logic.isOpened(),
	            width: width
	          });
	        }
	      },
	
	      _destroy: function _destroy() {
	        this.emit('destroy');
	
	        this._clearDerivingEvents();
	
	        this._deviceBackButtonHandler.destroy();
	        window.removeEventListener('resize', this._boundOnWindowResize);
	
	        this._mainPageGestureDetector.off('tap', this._boundOnTap);
	        this._element = this._scope = this._attrs = null;
	      },
	
	      _onSwipeableChanged: function _onSwipeableChanged(swipeable) {
	        swipeable = swipeable === '' || swipeable === undefined || swipeable == 'true';
	
	        this.setSwipeable(swipeable);
	      },
	
	      /**
	       * @param {Boolean} enabled
	       */
	      setSwipeable: function setSwipeable(enabled) {
	        if (enabled) {
	          this._activateGestureDetector();
	        } else {
	          this._deactivateGestureDetector();
	        }
	      },
	
	      _onWindowResize: function _onWindowResize() {
	        this._recalculateMAX();
	        this._refreshMenuPageWidth();
	      },
	
	      _onMaxSlideDistanceChanged: function _onMaxSlideDistanceChanged() {
	        this._recalculateMAX();
	        this._refreshMenuPageWidth();
	      },
	
	      /**
	       * @return {Number}
	       */
	      _normalizeMaxSlideDistanceAttr: function _normalizeMaxSlideDistanceAttr() {
	        var maxDistance = this._attrs.maxSlideDistance;
	
	        if (!('maxSlideDistance' in this._attrs)) {
	          maxDistance = 0.9 * this._mainPage[0].clientWidth;
	        } else if (typeof maxDistance == 'string') {
	          if (maxDistance.indexOf('px', maxDistance.length - 2) !== -1) {
	            maxDistance = parseInt(maxDistance.replace('px', ''), 10);
	          } else if (maxDistance.indexOf('%', maxDistance.length - 1) > 0) {
	            maxDistance = maxDistance.replace('%', '');
	            maxDistance = parseFloat(maxDistance) / 100 * this._mainPage[0].clientWidth;
	          }
	        } else {
	          throw new Error('invalid state');
	        }
	
	        return maxDistance;
	      },
	
	      _recalculateMAX: function _recalculateMAX() {
	        var maxDistance = this._normalizeMaxSlideDistanceAttr();
	
	        if (maxDistance) {
	          this._logic.setMaxDistance(parseInt(maxDistance, 10));
	        }
	      },
	
	      _activateGestureDetector: function _activateGestureDetector() {
	        this._gestureDetector.on('touch dragleft dragright swipeleft swiperight release', this._boundHandleEvent);
	      },
	
	      _deactivateGestureDetector: function _deactivateGestureDetector() {
	        this._gestureDetector.off('touch dragleft dragright swipeleft swiperight release', this._boundHandleEvent);
	      },
	
	      _bindEvents: function _bindEvents() {
	        this._gestureDetector = new ons.GestureDetector(this._element[0], {
	          dragMinDistance: 1
	        });
	      },
	
	      _appendMainPage: function _appendMainPage(pageUrl, templateHTML) {
	        var _this = this;
	
	        var pageScope = this._scope.$new();
	        var pageContent = angular.element(templateHTML);
	        var link = $compile(pageContent);
	
	        this._mainPage.append(pageContent);
	
	        if (this._currentPageElement) {
	          this._currentPageElement.remove();
	          this._currentPageScope.$destroy();
	        }
	
	        link(pageScope);
	
	        this._currentPageElement = pageContent;
	        this._currentPageScope = pageScope;
	        this._currentPageUrl = pageUrl;
	
	        setImmediate(function () {
	          _this._currentPageElement[0]._show();
	        });
	      },
	
	      /**
	       * @param {String}
	       */
	      _appendMenuPage: function _appendMenuPage(templateHTML) {
	        var pageScope = this._scope.$new();
	        var pageContent = angular.element(templateHTML);
	        var link = $compile(pageContent);
	
	        this._menuPage.append(pageContent);
	
	        if (this._currentMenuPageScope) {
	          this._currentMenuPageScope.$destroy();
	          this._currentMenuPageElement.remove();
	        }
	
	        link(pageScope);
	
	        this._currentMenuPageElement = pageContent;
	        this._currentMenuPageScope = pageScope;
	      },
	
	      /**
	       * @param {String} page
	       * @param {Object} options
	       * @param {Boolean} [options.closeMenu]
	       * @param {Boolean} [options.callback]
	       */
	      setMenuPage: function setMenuPage(page, options) {
	        if (page) {
	          options = options || {};
	          options.callback = options.callback || function () {};
	
	          var self = this;
	          $onsen.getPageHTMLAsync(page).then(function (html) {
	            self._appendMenuPage(angular.element(html));
	            if (options.closeMenu) {
	              self.close();
	            }
	            options.callback();
	          }, function () {
	            throw new Error('Page is not found: ' + page);
	          });
	        } else {
	          throw new Error('cannot set undefined page');
	        }
	      },
	
	      /**
	       * @param {String} pageUrl
	       * @param {Object} options
	       * @param {Boolean} [options.closeMenu]
	       * @param {Boolean} [options.callback]
	       */
	      setMainPage: function setMainPage(pageUrl, options) {
	        options = options || {};
	        options.callback = options.callback || function () {};
	
	        var done = function () {
	          if (options.closeMenu) {
	            this.close();
	          }
	          options.callback();
	        }.bind(this);
	
	        if (this._currentPageUrl === pageUrl) {
	          done();
	          return;
	        }
	
	        if (pageUrl) {
	          var self = this;
	          $onsen.getPageHTMLAsync(pageUrl).then(function (html) {
	            self._appendMainPage(pageUrl, html);
	            done();
	          }, function () {
	            throw new Error('Page is not found: ' + page);
	          });
	        } else {
	          throw new Error('cannot set undefined page');
	        }
	      },
	
	      _handleEvent: function _handleEvent(event) {
	
	        if (this._doorLock.isLocked()) {
	          return;
	        }
	
	        if (this._isInsideIgnoredElement(event.target)) {
	          this._deactivateGestureDetector();
	        }
	
	        switch (event.type) {
	          case 'dragleft':
	          case 'dragright':
	
	            if (this._logic.isClosed() && !this._isInsideSwipeTargetArea(event)) {
	              return;
	            }
	
	            event.gesture.preventDefault();
	
	            var deltaX = event.gesture.deltaX;
	            var deltaDistance = this._isRightMenu ? -deltaX : deltaX;
	
	            var startEvent = event.gesture.startEvent;
	
	            if (!('isOpened' in startEvent)) {
	              startEvent.isOpened = this._logic.isOpened();
	            }
	
	            if (deltaDistance < 0 && this._logic.isClosed()) {
	              break;
	            }
	
	            if (deltaDistance > 0 && this._logic.isOpened()) {
	              break;
	            }
	
	            var distance = startEvent.isOpened ? deltaDistance + this._logic.getMaxDistance() : deltaDistance;
	
	            this._logic.translate(distance);
	
	            break;
	
	          case 'swipeleft':
	            event.gesture.preventDefault();
	
	            if (this._logic.isClosed() && !this._isInsideSwipeTargetArea(event)) {
	              return;
	            }
	
	            if (this._isRightMenu) {
	              this.open();
	            } else {
	              this.close();
	            }
	
	            event.gesture.stopDetect();
	            break;
	
	          case 'swiperight':
	            event.gesture.preventDefault();
	
	            if (this._logic.isClosed() && !this._isInsideSwipeTargetArea(event)) {
	              return;
	            }
	
	            if (this._isRightMenu) {
	              this.close();
	            } else {
	              this.open();
	            }
	
	            event.gesture.stopDetect();
	            break;
	
	          case 'release':
	            this._lastDistance = null;
	
	            if (this._logic.shouldOpen()) {
	              this.open();
	            } else if (this._logic.shouldClose()) {
	              this.close();
	            }
	
	            break;
	        }
	      },
	
	      /**
	       * @param {jqLite} element
	       * @return {Boolean}
	       */
	      _isInsideIgnoredElement: function _isInsideIgnoredElement(element) {
	        do {
	          if (element.getAttribute && element.getAttribute('sliding-menu-ignore')) {
	            return true;
	          }
	          element = element.parentNode;
	        } while (element);
	
	        return false;
	      },
	
	      _isInsideSwipeTargetArea: function _isInsideSwipeTargetArea(event) {
	        var x = event.gesture.center.pageX;
	
	        if (!('_swipeTargetWidth' in event.gesture.startEvent)) {
	          event.gesture.startEvent._swipeTargetWidth = this._getSwipeTargetWidth();
	        }
	
	        var targetWidth = event.gesture.startEvent._swipeTargetWidth;
	        return this._isRightMenu ? this._mainPage[0].clientWidth - x < targetWidth : x < targetWidth;
	      },
	
	      _getSwipeTargetWidth: function _getSwipeTargetWidth() {
	        var targetWidth = this._attrs.swipeTargetWidth;
	
	        if (typeof targetWidth == 'string') {
	          targetWidth = targetWidth.replace('px', '');
	        }
	
	        var width = parseInt(targetWidth, 10);
	        if (width < 0 || !targetWidth) {
	          return this._mainPage[0].clientWidth;
	        } else {
	          return width;
	        }
	      },
	
	      closeMenu: function closeMenu() {
	        return this.close.apply(this, arguments);
	      },
	
	      /**
	       * Close sliding-menu page.
	       *
	       * @param {Object} options
	       */
	      close: function close(options) {
	        options = options || {};
	        options = typeof options == 'function' ? { callback: options } : options;
	
	        if (!this._logic.isClosed()) {
	          this.emit('preclose', {
	            slidingMenu: this
	          });
	
	          this._doorLock.waitUnlock(function () {
	            this._logic.close(options);
	          }.bind(this));
	        }
	      },
	
	      _close: function _close(options) {
	        var callback = options.callback || function () {},
	            unlock = this._doorLock.lock(),
	            instant = options.animation == 'none';
	
	        this._animator.closeMenu(function () {
	          unlock();
	
	          this._mainPage.children().css('pointer-events', '');
	          this._mainPageGestureDetector.off('tap', this._boundOnTap);
	
	          this.emit('postclose', {
	            slidingMenu: this
	          });
	
	          callback();
	        }.bind(this), instant);
	      },
	
	      /**
	       * Open sliding-menu page.
	       *
	       * @param {Object} [options]
	       * @param {Function} [options.callback]
	       */
	      openMenu: function openMenu() {
	        return this.open.apply(this, arguments);
	      },
	
	      /**
	       * Open sliding-menu page.
	       *
	       * @param {Object} [options]
	       * @param {Function} [options.callback]
	       */
	      open: function open(options) {
	        options = options || {};
	        options = typeof options == 'function' ? { callback: options } : options;
	
	        this.emit('preopen', {
	          slidingMenu: this
	        });
	
	        this._doorLock.waitUnlock(function () {
	          this._logic.open(options);
	        }.bind(this));
	      },
	
	      _open: function _open(options) {
	        var callback = options.callback || function () {},
	            unlock = this._doorLock.lock(),
	            instant = options.animation == 'none';
	
	        this._animator.openMenu(function () {
	          unlock();
	
	          this._mainPage.children().css('pointer-events', 'none');
	          this._mainPageGestureDetector.on('tap', this._boundOnTap);
	
	          this.emit('postopen', {
	            slidingMenu: this
	          });
	
	          callback();
	        }.bind(this), instant);
	      },
	
	      /**
	       * Toggle sliding-menu page.
	       * @param {Object} [options]
	       * @param {Function} [options.callback]
	       */
	      toggle: function toggle(options) {
	        if (this._logic.isClosed()) {
	          this.open(options);
	        } else {
	          this.close(options);
	        }
	      },
	
	      /**
	       * Toggle sliding-menu page.
	       */
	      toggleMenu: function toggleMenu() {
	        return this.toggle.apply(this, arguments);
	      },
	
	      /**
	       * @return {Boolean}
	       */
	      isMenuOpened: function isMenuOpened() {
	        return this._logic.isOpened();
	      },
	
	      /**
	       * @param {Object} event
	       */
	      _translate: function _translate(event) {
	        this._animator.translateMenu(event);
	      }
	    });
	
	    // Preset sliding menu animators.
	    SlidingMenuView._animatorDict = {
	      'default': RevealSlidingMenuAnimator,
	      'overlay': OverlaySlidingMenuAnimator,
	      'reveal': RevealSlidingMenuAnimator,
	      'push': PushSlidingMenuAnimator
	    };
	
	    /**
	     * @param {String} name
	     * @param {Function} Animator
	     */
	    SlidingMenuView.registerAnimator = function (name, Animator) {
	      if (!(Animator.prototype instanceof SlidingMenuAnimator)) {
	        throw new Error('"Animator" param must inherit SlidingMenuAnimator');
	      }
	
	      this._animatorDict[name] = Animator;
	    };
	
	    MicroEvent.mixin(SlidingMenuView);
	
	    return SlidingMenuView;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.factory('SlidingMenuAnimator', function () {
	    return Class.extend({
	
	      delay: 0,
	      duration: 0.4,
	      timing: 'cubic-bezier(.1, .7, .1, 1)',
	
	      /**
	       * @param {Object} options
	       * @param {String} options.timing
	       * @param {Number} options.duration
	       * @param {Number} options.delay
	       */
	      init: function init(options) {
	        options = options || {};
	
	        this.timing = options.timing || this.timing;
	        this.duration = options.duration !== undefined ? options.duration : this.duration;
	        this.delay = options.delay !== undefined ? options.delay : this.delay;
	      },
	
	      /**
	       * @param {jqLite} element "ons-sliding-menu" or "ons-split-view" element
	       * @param {jqLite} mainPage
	       * @param {jqLite} menuPage
	       * @param {Object} options
	       * @param {String} options.width "width" style value
	       * @param {Boolean} options.isRight
	       */
	      setup: function setup(element, mainPage, menuPage, options) {},
	
	      /**
	       * @param {Object} options
	       * @param {Boolean} options.isRight
	       * @param {Boolean} options.isOpened
	       * @param {String} options.width
	       */
	      onResized: function onResized(options) {},
	
	      /**
	       * @param {Function} callback
	       */
	      openMenu: function openMenu(callback) {},
	
	      /**
	       * @param {Function} callback
	       */
	      closeClose: function closeClose(callback) {},
	
	      /**
	       */
	      destroy: function destroy() {},
	
	      /**
	       * @param {Object} options
	       * @param {Number} options.distance
	       * @param {Number} options.maxDistance
	       */
	      translateMenu: function translateMenu(mainPage, menuPage, options) {},
	
	      /**
	       * @return {SlidingMenuAnimator}
	       */
	      copy: function copy() {
	        throw new Error('Override copy method.');
	      }
	    });
	  });
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.factory('SpeedDialView', ['$onsen', function ($onsen) {
	
	    /**
	     * @class SpeedDialView
	     */
	    var SpeedDialView = Class.extend({
	
	      /**
	       * @param {Object} scope
	       * @param {jqLite} element
	       * @param {Object} attrs
	       */
	      init: function init(scope, element, attrs) {
	        this._element = element;
	        this._scope = scope;
	        this._attrs = attrs;
	
	        this._scope.$on('$destroy', this._destroy.bind(this));
	
	        this._clearDerivingMethods = $onsen.deriveMethods(this, element[0], ['show', 'hide', 'showItems', 'hideItems', 'isOpen', 'toggle', 'toggleItems']);
	
	        this._clearDerivingEvents = $onsen.deriveEvents(this, element[0], ['open', 'close']).bind(this);
	      },
	
	      _destroy: function _destroy() {
	        this.emit('destroy');
	
	        this._clearDerivingEvents();
	        this._clearDerivingMethods();
	
	        this._element = this._scope = this._attrs = null;
	      }
	    });
	
	    MicroEvent.mixin(SpeedDialView);
	
	    $onsen.derivePropertiesFromElement(SpeedDialView, ['disabled', 'visible', 'inline']);
	
	    return SpeedDialView;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.factory('SplitView', ['$compile', 'RevealSlidingMenuAnimator', '$onsen', '$onsGlobal', function ($compile, RevealSlidingMenuAnimator, $onsen, $onsGlobal) {
	    var SPLIT_MODE = 0;
	    var COLLAPSE_MODE = 1;
	    var MAIN_PAGE_RATIO = 0.9;
	
	    var SplitView = Class.extend({
	
	      init: function init(scope, element, attrs) {
	        element.addClass('onsen-sliding-menu');
	
	        this._element = element;
	        this._scope = scope;
	        this._attrs = attrs;
	
	        this._mainPage = angular.element(element[0].querySelector('.onsen-split-view__main'));
	        this._secondaryPage = angular.element(element[0].querySelector('.onsen-split-view__secondary'));
	
	        this._max = this._mainPage[0].clientWidth * MAIN_PAGE_RATIO;
	        this._mode = SPLIT_MODE;
	        this._doorLock = new ons._DoorLock();
	
	        this._doSplit = false;
	        this._doCollapse = false;
	
	        $onsGlobal.orientation.on('change', this._onResize.bind(this));
	
	        this._animator = new RevealSlidingMenuAnimator();
	
	        this._element.css('display', 'none');
	
	        if (attrs.mainPage) {
	          this.setMainPage(attrs.mainPage);
	        }
	
	        if (attrs.secondaryPage) {
	          this.setSecondaryPage(attrs.secondaryPage);
	        }
	
	        var unlock = this._doorLock.lock();
	
	        this._considerChangingCollapse();
	        this._setSize();
	
	        setTimeout(function () {
	          this._element.css('display', 'block');
	          unlock();
	        }.bind(this), 1000 / 60 * 2);
	
	        scope.$on('$destroy', this._destroy.bind(this));
	
	        this._clearDerivingEvents = $onsen.deriveEvents(this, element[0], ['init', 'show', 'hide', 'destroy']);
	      },
	
	      /**
	       * @param {String} templateHTML
	       */
	      _appendSecondPage: function _appendSecondPage(templateHTML) {
	        var pageScope = this._scope.$new();
	        var pageContent = $compile(templateHTML)(pageScope);
	
	        this._secondaryPage.append(pageContent);
	
	        if (this._currentSecondaryPageElement) {
	          this._currentSecondaryPageElement.remove();
	          this._currentSecondaryPageScope.$destroy();
	        }
	
	        this._currentSecondaryPageElement = pageContent;
	        this._currentSecondaryPageScope = pageScope;
	      },
	
	      /**
	       * @param {String} templateHTML
	       */
	      _appendMainPage: function _appendMainPage(templateHTML) {
	        var _this = this;
	
	        var pageScope = this._scope.$new();
	        var pageContent = $compile(templateHTML)(pageScope);
	
	        this._mainPage.append(pageContent);
	
	        if (this._currentPage) {
	          this._currentPageScope.$destroy();
	        }
	
	        this._currentPage = pageContent;
	        this._currentPageScope = pageScope;
	
	        setImmediate(function () {
	          _this._currentPage[0]._show();
	        });
	      },
	
	      /**
	       * @param {String} page
	       */
	      setSecondaryPage: function setSecondaryPage(page) {
	        if (page) {
	          $onsen.getPageHTMLAsync(page).then(function (html) {
	            this._appendSecondPage(angular.element(html.trim()));
	          }.bind(this), function () {
	            throw new Error('Page is not found: ' + page);
	          });
	        } else {
	          throw new Error('cannot set undefined page');
	        }
	      },
	
	      /**
	       * @param {String} page
	       */
	      setMainPage: function setMainPage(page) {
	        if (page) {
	          $onsen.getPageHTMLAsync(page).then(function (html) {
	            this._appendMainPage(angular.element(html.trim()));
	          }.bind(this), function () {
	            throw new Error('Page is not found: ' + page);
	          });
	        } else {
	          throw new Error('cannot set undefined page');
	        }
	      },
	
	      _onResize: function _onResize() {
	        var lastMode = this._mode;
	
	        this._considerChangingCollapse();
	
	        if (lastMode === COLLAPSE_MODE && this._mode === COLLAPSE_MODE) {
	          this._animator.onResized({
	            isOpened: false,
	            width: '90%'
	          });
	        }
	
	        this._max = this._mainPage[0].clientWidth * MAIN_PAGE_RATIO;
	      },
	
	      _considerChangingCollapse: function _considerChangingCollapse() {
	        var should = this._shouldCollapse();
	
	        if (should && this._mode !== COLLAPSE_MODE) {
	          this._fireUpdateEvent();
	          if (this._doSplit) {
	            this._activateSplitMode();
	          } else {
	            this._activateCollapseMode();
	          }
	        } else if (!should && this._mode === COLLAPSE_MODE) {
	          this._fireUpdateEvent();
	          if (this._doCollapse) {
	            this._activateCollapseMode();
	          } else {
	            this._activateSplitMode();
	          }
	        }
	
	        this._doCollapse = this._doSplit = false;
	      },
	
	      update: function update() {
	        this._fireUpdateEvent();
	
	        var should = this._shouldCollapse();
	
	        if (this._doSplit) {
	          this._activateSplitMode();
	        } else if (this._doCollapse) {
	          this._activateCollapseMode();
	        } else if (should) {
	          this._activateCollapseMode();
	        } else if (!should) {
	          this._activateSplitMode();
	        }
	
	        this._doSplit = this._doCollapse = false;
	      },
	
	      _getOrientation: function _getOrientation() {
	        if ($onsGlobal.orientation.isPortrait()) {
	          return 'portrait';
	        } else {
	          return 'landscape';
	        }
	      },
	
	      getCurrentMode: function getCurrentMode() {
	        if (this._mode === COLLAPSE_MODE) {
	          return 'collapse';
	        } else {
	          return 'split';
	        }
	      },
	
	      _shouldCollapse: function _shouldCollapse() {
	        var c = 'portrait';
	        if (typeof this._attrs.collapse === 'string') {
	          c = this._attrs.collapse.trim();
	        }
	
	        if (c == 'portrait') {
	          return $onsGlobal.orientation.isPortrait();
	        } else if (c == 'landscape') {
	          return $onsGlobal.orientation.isLandscape();
	        } else if (c.substr(0, 5) == 'width') {
	          var num = c.split(' ')[1];
	          if (num.indexOf('px') >= 0) {
	            num = num.substr(0, num.length - 2);
	          }
	
	          var width = window.innerWidth;
	
	          return isNumber(num) && width < num;
	        } else {
	          var mq = window.matchMedia(c);
	          return mq.matches;
	        }
	      },
	
	      _setSize: function _setSize() {
	        if (this._mode === SPLIT_MODE) {
	          if (!this._attrs.mainPageWidth) {
	            this._attrs.mainPageWidth = '70';
	          }
	
	          var secondarySize = 100 - this._attrs.mainPageWidth.replace('%', '');
	          this._secondaryPage.css({
	            width: secondarySize + '%',
	            opacity: 1
	          });
	
	          this._mainPage.css({
	            width: this._attrs.mainPageWidth + '%'
	          });
	
	          this._mainPage.css('left', secondarySize + '%');
	        }
	      },
	
	      _fireEvent: function _fireEvent(name) {
	        this.emit(name, {
	          splitView: this,
	          width: window.innerWidth,
	          orientation: this._getOrientation()
	        });
	      },
	
	      _fireUpdateEvent: function _fireUpdateEvent() {
	        var that = this;
	
	        this.emit('update', {
	          splitView: this,
	          shouldCollapse: this._shouldCollapse(),
	          currentMode: this.getCurrentMode(),
	          split: function split() {
	            that._doSplit = true;
	            that._doCollapse = false;
	          },
	          collapse: function collapse() {
	            that._doSplit = false;
	            that._doCollapse = true;
	          },
	          width: window.innerWidth,
	          orientation: this._getOrientation()
	        });
	      },
	
	      _activateCollapseMode: function _activateCollapseMode() {
	        if (this._mode !== COLLAPSE_MODE) {
	          this._fireEvent('precollapse');
	          this._secondaryPage.attr('style', '');
	          this._mainPage.attr('style', '');
	
	          this._mode = COLLAPSE_MODE;
	
	          this._animator.setup(this._element, this._mainPage, this._secondaryPage, { isRight: false, width: '90%' });
	
	          this._fireEvent('postcollapse');
	        }
	      },
	
	      _activateSplitMode: function _activateSplitMode() {
	        if (this._mode !== SPLIT_MODE) {
	          this._fireEvent('presplit');
	
	          this._animator.destroy();
	
	          this._secondaryPage.attr('style', '');
	          this._mainPage.attr('style', '');
	
	          this._mode = SPLIT_MODE;
	          this._setSize();
	
	          this._fireEvent('postsplit');
	        }
	      },
	
	      _destroy: function _destroy() {
	        this.emit('destroy');
	
	        this._clearDerivingEvents();
	
	        this._element = null;
	        this._scope = null;
	      }
	    });
	
	    function isNumber(n) {
	      return !isNaN(parseFloat(n)) && isFinite(n);
	    }
	
	    MicroEvent.mixin(SplitView);
	
	    return SplitView;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	(function () {
	  'use strict';
	
	  angular.module('onsen').factory('SplitterContent', ['$onsen', '$compile', function ($onsen, $compile) {
	
	    var SplitterContent = Class.extend({
	
	      init: function init(scope, element, attrs) {
	        this._element = element;
	        this._scope = scope;
	        this._attrs = attrs;
	
	        this.load = this._element[0].load;
	        scope.$on('$destroy', this._destroy.bind(this));
	      },
	
	      _destroy: function _destroy() {
	        this.emit('destroy');
	        this._element = this._scope = this._attrs = this.load = this._pageScope = null;
	      }
	    });
	
	    MicroEvent.mixin(SplitterContent);
	    $onsen.derivePropertiesFromElement(SplitterContent, ['page']);
	
	    return SplitterContent;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	(function () {
	  'use strict';
	
	  angular.module('onsen').factory('SplitterSide', ['$onsen', '$compile', function ($onsen, $compile) {
	
	    var SplitterSide = Class.extend({
	
	      init: function init(scope, element, attrs) {
	        var _this = this;
	
	        this._element = element;
	        this._scope = scope;
	        this._attrs = attrs;
	
	        this._clearDerivingMethods = $onsen.deriveMethods(this, this._element[0], ['open', 'close', 'toggle', 'load']);
	
	        this._clearDerivingEvents = $onsen.deriveEvents(this, element[0], ['modechange', 'preopen', 'preclose', 'postopen', 'postclose'], function (detail) {
	          return detail.side ? angular.extend(detail, { side: _this }) : detail;
	        });
	
	        scope.$on('$destroy', this._destroy.bind(this));
	      },
	
	      _destroy: function _destroy() {
	        this.emit('destroy');
	
	        this._clearDerivingMethods();
	        this._clearDerivingEvents();
	
	        this._element = this._scope = this._attrs = null;
	      }
	    });
	
	    MicroEvent.mixin(SplitterSide);
	    $onsen.derivePropertiesFromElement(SplitterSide, ['page', 'mode', 'isOpen']);
	
	    return SplitterSide;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	(function () {
	  'use strict';
	
	  angular.module('onsen').factory('Splitter', ['$onsen', function ($onsen) {
	
	    var Splitter = Class.extend({
	      init: function init(scope, element, attrs) {
	        this._element = element;
	        this._scope = scope;
	        this._attrs = attrs;
	        scope.$on('$destroy', this._destroy.bind(this));
	      },
	
	      _destroy: function _destroy() {
	        this.emit('destroy');
	        this._element = this._scope = this._attrs = null;
	      }
	    });
	
	    MicroEvent.mixin(Splitter);
	    $onsen.derivePropertiesFromElement(Splitter, ['onDeviceBackButton']);
	
	    ['left', 'right', 'content', 'mask'].forEach(function (prop, i) {
	      Object.defineProperty(Splitter.prototype, prop, {
	        get: function get() {
	          var tagName = 'ons-splitter-' + (i < 2 ? 'side' : prop);
	          return angular.element(this._element[0][prop]).data(tagName);
	        }
	      });
	    });
	
	    return Splitter;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  angular.module('onsen').factory('SwitchView', ['$parse', '$onsen', function ($parse, $onsen) {
	
	    var SwitchView = Class.extend({
	
	      /**
	       * @param {jqLite} element
	       * @param {Object} scope
	       * @param {Object} attrs
	       */
	      init: function init(element, scope, attrs) {
	        var _this = this;
	
	        this._element = element;
	        this._checkbox = angular.element(element[0].querySelector('input[type=checkbox]'));
	        this._scope = scope;
	
	        this._prepareNgModel(element, scope, attrs);
	
	        this._scope.$on('$destroy', function () {
	          _this.emit('destroy');
	          _this._element = _this._checkbox = _this._scope = null;
	        });
	      },
	
	      _prepareNgModel: function _prepareNgModel(element, scope, attrs) {
	        var _this2 = this;
	
	        if (attrs.ngModel) {
	          var set = $parse(attrs.ngModel).assign;
	
	          scope.$parent.$watch(attrs.ngModel, function (value) {
	            _this2.checked = !!value;
	          });
	
	          this._element.on('change', function (e) {
	            set(scope.$parent, _this2.checked);
	
	            if (attrs.ngChange) {
	              scope.$eval(attrs.ngChange);
	            }
	
	            scope.$parent.$evalAsync();
	          });
	        }
	      }
	    });
	
	    MicroEvent.mixin(SwitchView);
	    $onsen.derivePropertiesFromElement(SwitchView, ['disabled', 'checked', 'checkbox']);
	
	    return SwitchView;
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.value('TabbarNoneAnimator', ons._internal.TabbarNoneAnimator);
	  module.value('TabbarFadeAnimator', ons._internal.TabbarFadeAnimator);
	  module.value('TabbarSlideAnimator', ons._internal.TabbarSlideAnimator);
	
	  module.factory('TabbarView', ['$onsen', function ($onsen) {
	    var TabbarView = Class.extend({
	
	      init: function init(scope, element, attrs) {
	        if (element[0].nodeName.toLowerCase() !== 'ons-tabbar') {
	          throw new Error('"element" parameter must be a "ons-tabbar" element.');
	        }
	
	        this._scope = scope;
	        this._element = element;
	        this._attrs = attrs;
	        this._lastPageElement = null;
	        this._lastPageScope = null;
	
	        this._scope.$on('$destroy', this._destroy.bind(this));
	
	        this._clearDerivingEvents = $onsen.deriveEvents(this, element[0], ['reactive', 'postchange', 'prechange', 'init', 'show', 'hide', 'destroy']);
	
	        this._clearDerivingMethods = $onsen.deriveMethods(this, element[0], ['setActiveTab', 'setTabbarVisibility', 'getActiveTabIndex', 'loadPage']);
	      },
	
	      _destroy: function _destroy() {
	        this.emit('destroy');
	
	        this._clearDerivingEvents();
	        this._clearDerivingMethods();
	
	        this._element = this._scope = this._attrs = null;
	      }
	    });
	    MicroEvent.mixin(TabbarView);
	
	    TabbarView.registerAnimator = function (name, Animator) {
	      return window.ons.TabbarElement.registerAnimator(name, Animator);
	    };
	
	    return TabbarView;
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-alert-dialog
	 */
	
	/**
	 * @attribute var
	 * @initonly
	 * @type {String}
	 * @description
	 *  [en]Variable name to refer this alert dialog.[/en]
	 *  [ja]このアラートダイアログを参照するための名前を指定します。[/ja]
	 */
	
	/**
	 * @attribute ons-preshow
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "preshow" event is fired.[/en]
	 *  [ja]"preshow"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-prehide
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "prehide" event is fired.[/en]
	 *  [ja]"prehide"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-postshow
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "postshow" event is fired.[/en]
	 *  [ja]"postshow"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-posthide
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "posthide" event is fired.[/en]
	 *  [ja]"posthide"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-destroy
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "destroy" event is fired.[/en]
	 *  [ja]"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @method on
	 * @signature on(eventName, listener)
	 * @description
	 *   [en]Add an event listener.[/en]
	 *   [ja]イベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]イベントが発火された際に呼び出されるコールバックを指定します。[/ja]
	 */
	
	/**
	 * @method once
	 * @signature once(eventName, listener)
	 * @description
	 *  [en]Add an event listener that's only triggered once.[/en]
	 *  [ja]一度だけ呼び出されるイベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]イベントが発火した際に呼び出されるコールバックを指定します。[/ja]
	 */
	
	/**
	 * @method off
	 * @signature off(eventName, [listener])
	 * @description
	 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
	 *  [ja]イベントリスナーを削除します。もしlistenerパラメータが指定されなかった場合、そのイベントのリスナーが全て削除されます。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]削除するイベントリスナーの関数オブジェクトを渡します。[/ja]
	 */
	
	(function () {
	  'use strict';
	
	  /**
	   * Alert dialog directive.
	   */
	
	  angular.module('onsen').directive('onsAlertDialog', ['$onsen', 'AlertDialogView', function ($onsen, AlertDialogView) {
	    return {
	      restrict: 'E',
	      replace: false,
	      scope: true,
	      transclude: false,
	
	      compile: function compile(element, attrs) {
	
	        return {
	          pre: function pre(scope, element, attrs) {
	            var alertDialog = new AlertDialogView(scope, element, attrs);
	
	            $onsen.declareVarAttribute(attrs, alertDialog);
	            $onsen.registerEventHandlers(alertDialog, 'preshow prehide postshow posthide destroy');
	            $onsen.addModifierMethodsForCustomElements(alertDialog, element);
	
	            element.data('ons-alert-dialog', alertDialog);
	            element.data('_scope', scope);
	
	            scope.$on('$destroy', function () {
	              alertDialog._events = undefined;
	              $onsen.removeModifierMethods(alertDialog);
	              element.data('ons-alert-dialog', undefined);
	              element = null;
	            });
	          },
	          post: function post(scope, element) {
	            $onsen.fireComponentEvent(element[0], 'init');
	          }
	        };
	      }
	    };
	  }]);
	})();
	'use strict';
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.directive('onsBackButton', ['$onsen', '$compile', 'GenericView', 'ComponentCleaner', function ($onsen, $compile, GenericView, ComponentCleaner) {
	    return {
	      restrict: 'E',
	      replace: false,
	
	      compile: function compile(element, attrs) {
	
	        return {
	          pre: function pre(scope, element, attrs, controller, transclude) {
	            var backButton = GenericView.register(scope, element, attrs, {
	              viewKey: 'ons-back-button'
	            });
	
	            scope.$on('$destroy', function () {
	              backButton._events = undefined;
	              $onsen.removeModifierMethods(backButton);
	              element = null;
	            });
	
	            ComponentCleaner.onDestroy(scope, function () {
	              ComponentCleaner.destroyScope(scope);
	              ComponentCleaner.destroyAttributes(attrs);
	              element = scope = attrs = null;
	            });
	          },
	          post: function post(scope, element) {
	            $onsen.fireComponentEvent(element[0], 'init');
	          }
	        };
	      }
	    };
	  }]);
	})();
	'use strict';
	
	(function () {
	  'use strict';
	
	  angular.module('onsen').directive('onsBottomToolbar', ['$onsen', 'GenericView', function ($onsen, GenericView) {
	    return {
	      restrict: 'E',
	      link: {
	        pre: function pre(scope, element, attrs) {
	          GenericView.register(scope, element, attrs, {
	            viewKey: 'ons-bottomToolbar'
	          });
	        },
	
	        post: function post(scope, element, attrs) {
	          $onsen.fireComponentEvent(element[0], 'init');
	        }
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-button
	 */
	
	(function () {
	  'use strict';
	
	  angular.module('onsen').directive('onsButton', ['$onsen', 'GenericView', function ($onsen, GenericView) {
	    return {
	      restrict: 'E',
	      link: function link(scope, element, attrs) {
	        var button = GenericView.register(scope, element, attrs, {
	          viewKey: 'ons-button'
	        });
	
	        Object.defineProperty(button, 'disabled', {
	          get: function get() {
	            return this._element[0].disabled;
	          },
	          set: function set(value) {
	            return this._element[0].disabled = value;
	          }
	        });
	        $onsen.fireComponentEvent(element[0], 'init');
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-carousel
	 * @description
	 *   [en]Carousel component.[/en]
	 *   [ja]カルーセルを表示できるコンポーネント。[/ja]
	 * @codepen xbbzOQ
	 * @guide UsingCarousel
	 *   [en]Learn how to use the carousel component.[/en]
	 *   [ja]carouselコンポーネントの使い方[/ja]
	 * @example
	 * <ons-carousel style="width: 100%; height: 200px">
	 *   <ons-carousel-item>
	 *    ...
	 *   </ons-carousel-item>
	 *   <ons-carousel-item>
	 *    ...
	 *   </ons-carousel-item>
	 * </ons-carousel>
	 */
	
	/**
	 * @attribute var
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]Variable name to refer this carousel.[/en]
	 *   [ja]このカルーセルを参照するための変数名を指定します。[/ja]
	 */
	
	/**
	 * @attribute ons-postchange
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "postchange" event is fired.[/en]
	 *  [ja]"postchange"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-refresh
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "refresh" event is fired.[/en]
	 *  [ja]"refresh"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-overscroll
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "overscroll" event is fired.[/en]
	 *  [ja]"overscroll"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-destroy
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "destroy" event is fired.[/en]
	 *  [ja]"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @method once
	 * @signature once(eventName, listener)
	 * @description
	 *  [en]Add an event listener that's only triggered once.[/en]
	 *  [ja]一度だけ呼び出されるイベントリスナを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method off
	 * @signature off(eventName, [listener])
	 * @description
	 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
	 *  [ja]イベントリスナーを削除します。もしイベントリスナーが指定されなかった場合には、そのイベントに紐付いているイベントリスナーが全て削除されます。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method on
	 * @signature on(eventName, listener)
	 * @description
	 *   [en]Add an event listener.[/en]
	 *   [ja]イベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.directive('onsCarousel', ['$onsen', 'CarouselView', function ($onsen, CarouselView) {
	    return {
	      restrict: 'E',
	      replace: false,
	
	      // NOTE: This element must coexists with ng-controller.
	      // Do not use isolated scope and template's ng-transclude.
	      scope: false,
	      transclude: false,
	
	      compile: function compile(element, attrs) {
	
	        return function (scope, element, attrs) {
	          var carousel = new CarouselView(scope, element, attrs);
	
	          element.data('ons-carousel', carousel);
	
	          $onsen.registerEventHandlers(carousel, 'postchange refresh overscroll destroy');
	          $onsen.declareVarAttribute(attrs, carousel);
	
	          scope.$on('$destroy', function () {
	            carousel._events = undefined;
	            element.data('ons-carousel', undefined);
	            element = null;
	          });
	
	          $onsen.fireComponentEvent(element[0], 'init');
	        };
	      }
	
	    };
	  }]);
	
	  module.directive('onsCarouselItem', function () {
	    return {
	      restrict: 'E',
	      compile: function compile(element, attrs) {
	        return function (scope, element, attrs) {
	          if (scope.$last) {
	            element[0].parentElement._setup();
	            element[0].parentElement._setupInitialIndex();
	            element[0].parentElement._saveLastState();
	          }
	        };
	      }
	    };
	  });
	})();
	'use strict';
	
	/**
	 * @element ons-dialog
	 */
	
	/**
	 * @attribute var
	 * @initonly
	 * @type {String}
	 * @description
	 *  [en]Variable name to refer this dialog.[/en]
	 *  [ja]このダイアログを参照するための名前を指定します。[/ja]
	 */
	
	/**
	 * @attribute ons-preshow
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "preshow" event is fired.[/en]
	 *  [ja]"preshow"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-prehide
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "prehide" event is fired.[/en]
	 *  [ja]"prehide"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-postshow
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "postshow" event is fired.[/en]
	 *  [ja]"postshow"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-posthide
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "posthide" event is fired.[/en]
	 *  [ja]"posthide"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-destroy
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "destroy" event is fired.[/en]
	 *  [ja]"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @method on
	 * @signature on(eventName, listener)
	 * @description
	 *   [en]Add an event listener.[/en]
	 *   [ja]イベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method once
	 * @signature once(eventName, listener)
	 * @description
	 *  [en]Add an event listener that's only triggered once.[/en]
	 *  [ja]一度だけ呼び出されるイベントリスナを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method off
	 * @signature off(eventName, [listener])
	 * @description
	 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
	 *  [ja]イベントリスナーを削除します。もしイベントリスナーが指定されなかった場合には、そのイベントに紐付いているイベントリスナーが全て削除されます。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	(function () {
	  'use strict';
	
	  angular.module('onsen').directive('onsDialog', ['$onsen', 'DialogView', function ($onsen, DialogView) {
	    return {
	      restrict: 'E',
	      scope: true,
	      compile: function compile(element, attrs) {
	
	        return {
	          pre: function pre(scope, element, attrs) {
	
	            var dialog = new DialogView(scope, element, attrs);
	            $onsen.declareVarAttribute(attrs, dialog);
	            $onsen.registerEventHandlers(dialog, 'preshow prehide postshow posthide destroy');
	            $onsen.addModifierMethodsForCustomElements(dialog, element);
	
	            element.data('ons-dialog', dialog);
	            scope.$on('$destroy', function () {
	              dialog._events = undefined;
	              $onsen.removeModifierMethods(dialog);
	              element.data('ons-dialog', undefined);
	              element = null;
	            });
	          },
	
	          post: function post(scope, element) {
	            $onsen.fireComponentEvent(element[0], 'init');
	          }
	        };
	      }
	    };
	  }]);
	})();
	'use strict';
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.directive('onsDummyForInit', ['$rootScope', function ($rootScope) {
	    var isReady = false;
	
	    return {
	      restrict: 'E',
	      replace: false,
	
	      link: {
	        post: function post(scope, element) {
	          if (!isReady) {
	            isReady = true;
	            $rootScope.$broadcast('$ons-ready');
	          }
	          element.remove();
	        }
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-fab
	 */
	
	/**
	 * @attribute var
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]Variable name to refer the floating action button.[/en]
	 *   [ja]このフローティングアクションボタンを参照するための変数名をしてします。[/ja]
	 */
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.directive('onsFab', ['$onsen', 'FabView', function ($onsen, FabView) {
	    return {
	      restrict: 'E',
	      replace: false,
	      scope: false,
	      transclude: false,
	
	      compile: function compile(element, attrs) {
	
	        return function (scope, element, attrs) {
	          var fab = new FabView(scope, element, attrs);
	
	          element.data('ons-fab', fab);
	
	          $onsen.declareVarAttribute(attrs, fab);
	
	          scope.$on('$destroy', function () {
	            element.data('ons-fab', undefined);
	            element = null;
	          });
	
	          $onsen.fireComponentEvent(element[0], 'init');
	        };
	      }
	
	    };
	  }]);
	})();
	'use strict';
	
	(function () {
	  'use strict';
	
	  var EVENTS = ('drag dragleft dragright dragup dragdown hold release swipe swipeleft swiperight ' + 'swipeup swipedown tap doubletap touch transform pinch pinchin pinchout rotate').split(/ +/);
	
	  angular.module('onsen').directive('onsGestureDetector', ['$onsen', function ($onsen) {
	
	    var scopeDef = EVENTS.reduce(function (dict, name) {
	      dict['ng' + titlize(name)] = '&';
	      return dict;
	    }, {});
	
	    function titlize(str) {
	      return str.charAt(0).toUpperCase() + str.slice(1);
	    }
	
	    return {
	      restrict: 'E',
	      scope: scopeDef,
	
	      // NOTE: This element must coexists with ng-controller.
	      // Do not use isolated scope and template's ng-transclude.
	      replace: false,
	      transclude: true,
	
	      compile: function compile(element, attrs) {
	        return function link(scope, element, attrs, _, transclude) {
	
	          transclude(scope.$parent, function (cloned) {
	            element.append(cloned);
	          });
	
	          var handler = function handler(event) {
	            var attr = 'ng' + titlize(event.type);
	
	            if (attr in scopeDef) {
	              scope[attr]({ $event: event });
	            }
	          };
	
	          var gestureDetector;
	
	          setImmediate(function () {
	            gestureDetector = element[0]._gestureDetector;
	            gestureDetector.on(EVENTS.join(' '), handler);
	          });
	
	          $onsen.cleaner.onDestroy(scope, function () {
	            gestureDetector.off(EVENTS.join(' '), handler);
	            $onsen.clearComponent({
	              scope: scope,
	              element: element,
	              attrs: attrs
	            });
	            gestureDetector.element = scope = element = attrs = null;
	          });
	
	          $onsen.fireComponentEvent(element[0], 'init');
	        };
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-icon
	 */
	
	(function () {
	  'use strict';
	
	  angular.module('onsen').directive('onsIcon', ['$onsen', 'GenericView', function ($onsen, GenericView) {
	    return {
	      restrict: 'E',
	
	      compile: function compile(element, attrs) {
	
	        if (attrs.icon.indexOf('{{') !== -1) {
	          attrs.$observe('icon', function () {
	            setImmediate(function () {
	              return element[0]._update();
	            });
	          });
	        }
	
	        return function (scope, element, attrs) {
	          GenericView.register(scope, element, attrs, {
	            viewKey: 'ons-icon'
	          });
	          // $onsen.fireComponentEvent(element[0], 'init');
	        };
	      }
	
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-if-orientation
	 * @category conditional
	 * @description
	 *   [en]Conditionally display content depending on screen orientation. Valid values are portrait and landscape. Different from other components, this component is used as attribute in any element.[/en]
	 *   [ja]画面の向きに応じてコンテンツの制御を行います。portraitもしくはlandscapeを指定できます。すべての要素の属性に使用できます。[/ja]
	 * @seealso ons-if-platform [en]ons-if-platform component[/en][ja]ons-if-platformコンポーネント[/ja]
	 * @guide UtilityAPIs [en]Other utility APIs[/en][ja]他のユーティリティAPI[/ja]
	 * @example
	 * <div ons-if-orientation="portrait">
	 *   <p>This will only be visible in portrait mode.</p>
	 * </div>
	 */
	
	/**
	 * @attribute ons-if-orientation
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]Either "portrait" or "landscape".[/en]
	 *   [ja]portraitもしくはlandscapeを指定します。[/ja]
	 */
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.directive('onsIfOrientation', ['$onsen', '$onsGlobal', function ($onsen, $onsGlobal) {
	    return {
	      restrict: 'A',
	      replace: false,
	
	      // NOTE: This element must coexists with ng-controller.
	      // Do not use isolated scope and template's ng-transclude.
	      transclude: false,
	      scope: false,
	
	      compile: function compile(element) {
	        element.css('display', 'none');
	
	        return function (scope, element, attrs) {
	          attrs.$observe('onsIfOrientation', update);
	          $onsGlobal.orientation.on('change', update);
	
	          update();
	
	          $onsen.cleaner.onDestroy(scope, function () {
	            $onsGlobal.orientation.off('change', update);
	
	            $onsen.clearComponent({
	              element: element,
	              scope: scope,
	              attrs: attrs
	            });
	            element = scope = attrs = null;
	          });
	
	          function update() {
	            var userOrientation = ('' + attrs.onsIfOrientation).toLowerCase();
	            var orientation = getLandscapeOrPortrait();
	
	            if (userOrientation === 'portrait' || userOrientation === 'landscape') {
	              if (userOrientation === orientation) {
	                element.css('display', '');
	              } else {
	                element.css('display', 'none');
	              }
	            }
	          }
	
	          function getLandscapeOrPortrait() {
	            return $onsGlobal.orientation.isPortrait() ? 'portrait' : 'landscape';
	          }
	        };
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-if-platform
	 * @category conditional
	 * @description
	 *    [en]Conditionally display content depending on the platform / browser. Valid values are "opera", "firefox", "safari", "chrome", "ie", "edge", "android", "blackberry", "ios" and "wp".[/en]
	 *    [ja]プラットフォームやブラウザーに応じてコンテンツの制御をおこないます。opera, firefox, safari, chrome, ie, edge, android, blackberry, ios, wpのいずれかの値を空白区切りで複数指定できます。[/ja]
	 * @seealso ons-if-orientation [en]ons-if-orientation component[/en][ja]ons-if-orientationコンポーネント[/ja]
	 * @guide UtilityAPIs [en]Other utility APIs[/en][ja]他のユーティリティAPI[/ja]
	 * @example
	 * <div ons-if-platform="android">
	 *   ...
	 * </div>
	 */
	
	/**
	 * @attribute ons-if-platform
	 * @type {String}
	 * @initonly
	 * @description
	 *   [en]One or multiple space separated values: "opera", "firefox", "safari", "chrome", "ie", "edge", "android", "blackberry", "ios" or "wp".[/en]
	 *   [ja]"opera", "firefox", "safari", "chrome", "ie", "edge", "android", "blackberry", "ios", "wp"のいずれか空白区切りで複数指定できます。[/ja]
	 */
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.directive('onsIfPlatform', ['$onsen', function ($onsen) {
	    return {
	      restrict: 'A',
	      replace: false,
	
	      // NOTE: This element must coexists with ng-controller.
	      // Do not use isolated scope and template's ng-transclude.
	      transclude: false,
	      scope: false,
	
	      compile: function compile(element) {
	        element.css('display', 'none');
	
	        var platform = getPlatformString();
	
	        return function (scope, element, attrs) {
	          attrs.$observe('onsIfPlatform', function (userPlatform) {
	            if (userPlatform) {
	              update();
	            }
	          });
	
	          update();
	
	          $onsen.cleaner.onDestroy(scope, function () {
	            $onsen.clearComponent({
	              element: element,
	              scope: scope,
	              attrs: attrs
	            });
	            element = scope = attrs = null;
	          });
	
	          function update() {
	            var userPlatforms = attrs.onsIfPlatform.toLowerCase().trim().split(/\s+/);
	            if (userPlatforms.indexOf(platform.toLowerCase()) >= 0) {
	              element.css('display', 'block');
	            } else {
	              element.css('display', 'none');
	            }
	          }
	        };
	
	        function getPlatformString() {
	
	          if (navigator.userAgent.match(/Android/i)) {
	            return 'android';
	          }
	
	          if (navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/RIM Tablet OS/i) || navigator.userAgent.match(/BB10/i)) {
	            return 'blackberry';
	          }
	
	          if (navigator.userAgent.match(/iPhone|iPad|iPod/i)) {
	            return 'ios';
	          }
	
	          if (navigator.userAgent.match(/Windows Phone|IEMobile|WPDesktop/i)) {
	            return 'wp';
	          }
	
	          // Opera 8.0+ (UA detection to detect Blink/v8-powered Opera)
	          var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;
	          if (isOpera) {
	            return 'opera';
	          }
	
	          var isFirefox = typeof InstallTrigger !== 'undefined'; // Firefox 1.0+
	          if (isFirefox) {
	            return 'firefox';
	          }
	
	          var isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;
	          // At least Safari 3+: "[object HTMLElementConstructor]"
	          if (isSafari) {
	            return 'safari';
	          }
	
	          var isEdge = navigator.userAgent.indexOf(' Edge/') >= 0;
	          if (isEdge) {
	            return 'edge';
	          }
	
	          var isChrome = !!window.chrome && !isOpera && !isEdge; // Chrome 1+
	          if (isChrome) {
	            return 'chrome';
	          }
	
	          var isIE = /*@cc_on!@*/false || !!document.documentMode; // At least IE6
	          if (isIE) {
	            return 'ie';
	          }
	
	          return 'unknown';
	        }
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @ngdoc directive
	 * @id input
	 * @name ons-input
	 * @category form
	 * @description
	 *  [en]Input component.[/en]
	 *  [ja]inputコンポ―ネントです。[/ja]
	 * @codepen ojQxLj
	 * @guide UsingFormComponents
	 *   [en]Using form components[/en]
	 *   [ja]フォームを使う[/ja]
	 * @guide EventHandling
	 *   [en]Event handling descriptions[/en]
	 *   [ja]イベント処理の使い方[/ja]
	 * @example
	 * <ons-input></ons-input>
	 * <ons-input modifier="material" label="Username"></ons-input>
	 */
	
	/**
	 * @ngdoc attribute
	 * @name label
	 * @type {String}
	 * @description
	 *   [en]Text for animated floating label.[/en]
	 *   [ja]アニメーションさせるフローティングラベルのテキストを指定します。[/ja]
	 */
	
	/**
	 * @ngdoc attribute
	 * @name float
	 * @description
	 *  [en]If this attribute is present, the label will be animated.[/en]
	 *  [ja]この属性が設定された時、ラベルはアニメーションするようになります。[/ja]
	 */
	
	/**
	 * @ngdoc attribute
	 * @name ng-model
	 * @extensionOf angular
	 * @description
	 *   [en]Bind the value to a model. Works just like for normal input elements.[/en]
	 *   [ja]この要素の値をモデルに紐付けます。通常のinput要素の様に動作します。[/ja]
	 */
	
	/**
	 * @ngdoc attribute
	 * @name ng-change
	 * @extensionOf angular
	 * @description
	 *   [en]Executes an expression when the value changes. Works just like for normal input elements.[/en]
	 *   [ja]値が変わった時にこの属性で指定したexpressionが実行されます。通常のinput要素の様に動作します。[/ja]
	 */
	
	(function () {
	  'use strict';
	
	  angular.module('onsen').directive('onsInput', ['$parse', function ($parse) {
	    return {
	      restrict: 'E',
	      replace: false,
	      scope: false,
	
	      link: function link(scope, element, attrs) {
	        var el = element[0];
	
	        var onInput = function onInput() {
	          var set = $parse(attrs.ngModel).assign;
	
	          if (el._isTextInput) {
	            set(scope, el.value);
	          } else if (el.type === 'radio' && el.checked) {
	            set(scope, el.value);
	          } else {
	            set(scope, el.checked);
	          }
	
	          if (attrs.ngChange) {
	            scope.$eval(attrs.ngChange);
	          }
	
	          scope.$parent.$evalAsync();
	        };
	
	        if (attrs.ngModel) {
	          scope.$watch(attrs.ngModel, function (value) {
	            if (el._isTextInput && typeof value !== 'undefined') {
	              el.value = value;
	            } else if (el.type === 'radio') {
	              el.checked = value === el.value;
	            } else {
	              el.checked = value;
	            }
	          });
	
	          el._isTextInput ? element.on('input', onInput) : element.on('change', onInput);
	        }
	
	        scope.$on('$destroy', function () {
	          el._isTextInput ? element.off('input', onInput) : element.off('change', onInput);
	
	          scope = element = attrs = el = null;
	        });
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-keyboard-active
	 * @category form
	 * @description
	 *   [en]
	 *     Conditionally display content depending on if the software keyboard is visible or hidden.
	 *     This component requires cordova and that the com.ionic.keyboard plugin is installed.
	 *   [/en]
	 *   [ja]
	 *     ソフトウェアキーボードが表示されているかどうかで、コンテンツを表示するかどうかを切り替えることが出来ます。
	 *     このコンポーネントは、Cordovaやcom.ionic.keyboardプラグインを必要とします。
	 *   [/ja]
	 * @guide UtilityAPIs
	 *   [en]Other utility APIs[/en]
	 *   [ja]他のユーティリティAPI[/ja]
	 * @example
	 * <div ons-keyboard-active>
	 *   This will only be displayed if the software keyboard is open.
	 * </div>
	 * <div ons-keyboard-inactive>
	 *   There is also a component that does the opposite.
	 * </div>
	 */
	
	/**
	 * @attribute ons-keyboard-active
	 * @description
	 *   [en]The content of tags with this attribute will be visible when the software keyboard is open.[/en]
	 *   [ja]この属性がついた要素は、ソフトウェアキーボードが表示された時に初めて表示されます。[/ja]
	 */
	
	/**
	 * @attribute ons-keyboard-inactive
	 * @description
	 *   [en]The content of tags with this attribute will be visible when the software keyboard is hidden.[/en]
	 *   [ja]この属性がついた要素は、ソフトウェアキーボードが隠れている時のみ表示されます。[/ja]
	 */
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  var compileFunction = function compileFunction(show, $onsen) {
	    return function (element) {
	      return function (scope, element, attrs) {
	        var dispShow = show ? 'block' : 'none',
	            dispHide = show ? 'none' : 'block';
	
	        var onShow = function onShow() {
	          element.css('display', dispShow);
	        };
	
	        var onHide = function onHide() {
	          element.css('display', dispHide);
	        };
	
	        var onInit = function onInit(e) {
	          if (e.visible) {
	            onShow();
	          } else {
	            onHide();
	          }
	        };
	
	        ons.softwareKeyboard.on('show', onShow);
	        ons.softwareKeyboard.on('hide', onHide);
	        ons.softwareKeyboard.on('init', onInit);
	
	        if (ons.softwareKeyboard._visible) {
	          onShow();
	        } else {
	          onHide();
	        }
	
	        $onsen.cleaner.onDestroy(scope, function () {
	          ons.softwareKeyboard.off('show', onShow);
	          ons.softwareKeyboard.off('hide', onHide);
	          ons.softwareKeyboard.off('init', onInit);
	
	          $onsen.clearComponent({
	            element: element,
	            scope: scope,
	            attrs: attrs
	          });
	          element = scope = attrs = null;
	        });
	      };
	    };
	  };
	
	  module.directive('onsKeyboardActive', ['$onsen', function ($onsen) {
	    return {
	      restrict: 'A',
	      replace: false,
	      transclude: false,
	      scope: false,
	      compile: compileFunction(true, $onsen)
	    };
	  }]);
	
	  module.directive('onsKeyboardInactive', ['$onsen', function ($onsen) {
	    return {
	      restrict: 'A',
	      replace: false,
	      transclude: false,
	      scope: false,
	      compile: compileFunction(false, $onsen)
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-lazy-repeat
	 * @description
	 *   [en]
	 *     Using this component a list with millions of items can be rendered without a drop in performance.
	 *     It does that by "lazily" loading elements into the DOM when they come into view and
	 *     removing items from the DOM when they are not visible.
	 *   [/en]
	 *   [ja]
	 *     このコンポーネント内で描画されるアイテムのDOM要素の読み込みは、画面に見えそうになった時まで自動的に遅延され、
	 *     画面から見えなくなった場合にはその要素は動的にアンロードされます。
	 *     このコンポーネントを使うことで、パフォーマンスを劣化させること無しに巨大な数の要素を描画できます。
	 *   [/ja]
	 * @codepen QwrGBm
	 * @guide UsingLazyRepeat
	 *   [en]How to use Lazy Repeat[/en]
	 *   [ja]レイジーリピートの使い方[/ja]
	 * @example
	 * <script>
	 *   ons.bootstrap()
	 *
	 *   .controller('MyController', function($scope) {
	 *     $scope.MyDelegate = {
	 *       countItems: function() {
	 *         // Return number of items.
	 *         return 1000000;
	 *       },
	 *
	 *       calculateItemHeight: function(index) {
	 *         // Return the height of an item in pixels.
	 *         return 45;
	 *       },
	 *
	 *       configureItemScope: function(index, itemScope) {
	 *         // Initialize scope
	 *         itemScope.item = 'Item #' + (index + 1);
	 *       },
	 *
	 *       destroyItemScope: function(index, itemScope) {
	 *         // Optional method that is called when an item is unloaded.
	 *         console.log('Destroyed item with index: ' + index);
	 *       }
	 *     };
	 *   });
	 * </script>
	 *
	 * <ons-list ng-controller="MyController">
	 *   <ons-list-item ons-lazy-repeat="MyDelegate">
	 *     {{ item }}
	 *   </ons-list-item>
	 * </ons-list>
	 */
	
	/**
	 * @attribute ons-lazy-repeat
	 * @type {Expression}
	 * @initonly
	 * @description
	 *  [en]A delegate object, can be either an object attached to the scope (when using AngularJS) or a normal JavaScript variable.[/en]
	 *  [ja]要素のロード、アンロードなどの処理を委譲するオブジェクトを指定します。AngularJSのスコープの変数名や、通常のJavaScriptの変数名を指定します。[/ja]
	 */
	
	/**
	 * @property delegate.configureItemScope
	 * @type {Function}
	 * @description
	 *   [en]Function which recieves an index and the scope for the item. Can be used to configure values in the item scope.[/en]
	 *   [ja][/ja]
	 */
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  /**
	   * Lazy repeat directive.
	   */
	  module.directive('onsLazyRepeat', ['$onsen', 'LazyRepeatView', function ($onsen, LazyRepeatView) {
	    return {
	      restrict: 'A',
	      replace: false,
	      priority: 1000,
	      terminal: true,
	
	      compile: function compile(element, attrs) {
	        return function (scope, element, attrs) {
	          var lazyRepeat = new LazyRepeatView(scope, element, attrs);
	
	          scope.$on('$destroy', function () {
	            scope = element = attrs = lazyRepeat = null;
	          });
	        };
	      }
	    };
	  }]);
	})();
	'use strict';
	
	(function () {
	  'use strict';
	
	  angular.module('onsen').directive('onsList', ['$onsen', 'GenericView', function ($onsen, GenericView) {
	    return {
	      restrict: 'E',
	      link: function link(scope, element, attrs) {
	        GenericView.register(scope, element, attrs, { viewKey: 'ons-list' });
	        $onsen.fireComponentEvent(element[0], 'init');
	      }
	    };
	  }]);
	})();
	'use strict';
	
	(function () {
	  'use strict';
	
	  angular.module('onsen').directive('onsListHeader', ['$onsen', 'GenericView', function ($onsen, GenericView) {
	    return {
	      restrict: 'E',
	      link: function link(scope, element, attrs) {
	        GenericView.register(scope, element, attrs, { viewKey: 'ons-listHeader' });
	        $onsen.fireComponentEvent(element[0], 'init');
	      }
	    };
	  }]);
	})();
	'use strict';
	
	(function () {
	  'use strict';
	
	  angular.module('onsen').directive('onsListItem', ['$onsen', 'GenericView', function ($onsen, GenericView) {
	    return {
	      restrict: 'E',
	      link: function link(scope, element, attrs) {
	        GenericView.register(scope, element, attrs, { viewKey: 'ons-list-item' });
	        $onsen.fireComponentEvent(element[0], 'init');
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-loading-placeholder
	 * @category util
	 * @description
	 *   [en]Display a placeholder while the content is loading.[/en]
	 *   [ja]Onsen UIが読み込まれるまでに表示するプレースホルダーを表現します。[/ja]
	 * @guide UtilityAPIs [en]Other utility APIs[/en][ja]他のユーティリティAPI[/ja]
	 * @example
	 * <div ons-loading-placeholder="page.html">
	 *   Loading...
	 * </div>
	 */
	
	/**
	 * @attribute ons-loading-placeholder
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]The url of the page to load.[/en]
	 *   [ja]読み込むページのURLを指定します。[/ja]
	 */
	
	(function () {
	  'use strict';
	
	  angular.module('onsen').directive('onsLoadingPlaceholder', function () {
	    return {
	      restrict: 'A',
	      link: function link(scope, element, attrs) {
	        if (attrs.onsLoadingPlaceholder) {
	          ons._resolveLoadingPlaceholder(element[0], attrs.onsLoadingPlaceholder, function (contentElement, done) {
	            ons.compile(contentElement);
	            scope.$evalAsync(function () {
	              setImmediate(done);
	            });
	          });
	        }
	      }
	    };
	  });
	})();
	'use strict';
	
	/**
	 * @element ons-modal
	 */
	
	/**
	 * @attribute var
	 * @type {String}
	 * @initonly
	 * @description
	 *   [en]Variable name to refer this modal.[/en]
	 *   [ja]このモーダルを参照するための名前を指定します。[/ja]
	 */
	
	(function () {
	  'use strict';
	
	  /**
	   * Modal directive.
	   */
	
	  angular.module('onsen').directive('onsModal', ['$onsen', 'ModalView', function ($onsen, ModalView) {
	    return {
	      restrict: 'E',
	      replace: false,
	
	      // NOTE: This element must coexists with ng-controller.
	      // Do not use isolated scope and template's ng-transclude.
	      scope: false,
	      transclude: false,
	
	      compile: function compile(element, attrs) {
	
	        return {
	          pre: function pre(scope, element, attrs) {
	            var modal = new ModalView(scope, element, attrs);
	            $onsen.addModifierMethodsForCustomElements(modal, element);
	
	            $onsen.declareVarAttribute(attrs, modal);
	            element.data('ons-modal', modal);
	
	            scope.$on('$destroy', function () {
	              $onsen.removeModifierMethods(modal);
	              element.data('ons-modal', undefined);
	              modal = element = scope = attrs = null;
	            });
	          },
	
	          post: function post(scope, element) {
	            $onsen.fireComponentEvent(element[0], 'init');
	          }
	        };
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-navigator
	 * @example
	 * <ons-navigator animation="slide" var="app.navi">
	 *   <ons-page>
	 *     <ons-toolbar>
	 *       <div class="center">Title</div>
	 *     </ons-toolbar>
	 *
	 *     <p style="text-align: center">
	 *       <ons-button modifier="light" ng-click="app.navi.pushPage('page.html');">Push</ons-button>
	 *     </p>
	 *   </ons-page>
	 * </ons-navigator>
	 *
	 * <ons-template id="page.html">
	 *   <ons-page>
	 *     <ons-toolbar>
	 *       <div class="center">Title</div>
	 *     </ons-toolbar>
	 *
	 *     <p style="text-align: center">
	 *       <ons-button modifier="light" ng-click="app.navi.popPage();">Pop</ons-button>
	 *     </p>
	 *   </ons-page>
	 * </ons-template>
	 */
	
	/**
	 * @attribute var
	 * @initonly
	 * @type {String}
	 * @description
	 *  [en]Variable name to refer this navigator.[/en]
	 *  [ja]このナビゲーターを参照するための名前を指定します。[/ja]
	 */
	
	/**
	 * @attribute ons-prepush
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "prepush" event is fired.[/en]
	 *  [ja]"prepush"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-prepop
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "prepop" event is fired.[/en]
	 *  [ja]"prepop"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-postpush
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "postpush" event is fired.[/en]
	 *  [ja]"postpush"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-postpop
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "postpop" event is fired.[/en]
	 *  [ja]"postpop"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-init
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when a page's "init" event is fired.[/en]
	 *  [ja]ページの"init"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-show
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when a page's "show" event is fired.[/en]
	 *  [ja]ページの"show"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-hide
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when a page's "hide" event is fired.[/en]
	 *  [ja]ページの"hide"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-destroy
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when a page's "destroy" event is fired.[/en]
	 *  [ja]ページの"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @method on
	 * @signature on(eventName, listener)
	 * @description
	 *   [en]Add an event listener.[/en]
	 *   [ja]イベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]このイベントが発火された際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method once
	 * @signature once(eventName, listener)
	 * @description
	 *  [en]Add an event listener that's only triggered once.[/en]
	 *  [ja]一度だけ呼び出されるイベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method off
	 * @signature off(eventName, [listener])
	 * @description
	 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
	 *  [ja]イベントリスナーを削除します。もしイベントリスナーを指定しなかった場合には、そのイベントに紐づく全てのイベントリスナーが削除されます。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]削除するイベントリスナーを指定します。[/ja]
	 */
	
	(function () {
	  'use strict';
	
	  var lastReady = window.ons.NavigatorElement.rewritables.ready;
	  window.ons.NavigatorElement.rewritables.ready = ons._waitDiretiveInit('ons-navigator', lastReady);
	
	  angular.module('onsen').directive('onsNavigator', ['NavigatorView', '$onsen', function (NavigatorView, $onsen) {
	    return {
	      restrict: 'E',
	
	      // NOTE: This element must coexists with ng-controller.
	      // Do not use isolated scope and template's ng-transclude.
	      transclude: false,
	      scope: true,
	
	      compile: function compile(element) {
	
	        return {
	          pre: function pre(scope, element, attrs, controller) {
	            var view = new NavigatorView(scope, element, attrs);
	
	            $onsen.declareVarAttribute(attrs, view);
	            $onsen.registerEventHandlers(view, 'prepush prepop postpush postpop init show hide destroy');
	
	            element.data('ons-navigator', view);
	
	            element[0].pageLoader = $onsen.createPageLoader(view);
	
	            scope.$on('$destroy', function () {
	              view._events = undefined;
	              element.data('ons-navigator', undefined);
	              scope = element = null;
	            });
	          },
	          post: function post(scope, element, attrs) {
	            $onsen.fireComponentEvent(element[0], 'init');
	          }
	        };
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-page
	 */
	
	/**
	 * @attribute var
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]Variable name to refer this page.[/en]
	 *   [ja]このページを参照するための名前を指定します。[/ja]
	 */
	
	/**
	 * @attribute ng-infinite-scroll
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]Path of the function to be executed on infinite scrolling. The path is relative to $scope. The function receives a done callback that must be called when it's finished.[/en]
	 *   [ja][/ja]
	 */
	
	/**
	 * @attribute on-device-back-button
	 * @type {Expression}
	 * @description
	 *   [en]Allows you to specify custom behavior when the back button is pressed.[/en]
	 *   [ja]デバイスのバックボタンが押された時の挙動を設定できます。[/ja]
	 */
	
	/**
	 * @attribute ng-device-back-button
	 * @initonly
	 * @type {Expression}
	 * @description
	 *   [en]Allows you to specify custom behavior with an AngularJS expression when the back button is pressed.[/en]
	 *   [ja]デバイスのバックボタンが押された時の挙動を設定できます。AngularJSのexpressionを指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-init
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "init" event is fired.[/en]
	 *  [ja]"init"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-show
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "show" event is fired.[/en]
	 *  [ja]"show"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-hide
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "hide" event is fired.[/en]
	 *  [ja]"hide"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-destroy
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "destroy" event is fired.[/en]
	 *  [ja]"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.directive('onsPage', ['$onsen', 'PageView', function ($onsen, PageView) {
	
	    function firePageInitEvent(element) {
	      // TODO: remove dirty fix
	      var i = 0,
	          f = function f() {
	        if (i++ < 15) {
	          if (isAttached(element)) {
	            $onsen.fireComponentEvent(element, 'init');
	            fireActualPageInitEvent(element);
	          } else {
	            if (i > 10) {
	              setTimeout(f, 1000 / 60);
	            } else {
	              setImmediate(f);
	            }
	          }
	        } else {
	          throw new Error('Fail to fire "pageinit" event. Attach "ons-page" element to the document after initialization.');
	        }
	      };
	
	      f();
	    }
	
	    function fireActualPageInitEvent(element) {
	      var event = document.createEvent('HTMLEvents');
	      event.initEvent('pageinit', true, true);
	      element.dispatchEvent(event);
	    }
	
	    function isAttached(element) {
	      if (document.documentElement === element) {
	        return true;
	      }
	      return element.parentNode ? isAttached(element.parentNode) : false;
	    }
	
	    return {
	      restrict: 'E',
	
	      // NOTE: This element must coexists with ng-controller.
	      // Do not use isolated scope and template's ng-transclude.
	      transclude: false,
	      scope: true,
	
	      compile: function compile(element, attrs) {
	        return {
	          pre: function pre(scope, element, attrs) {
	            var page = new PageView(scope, element, attrs);
	
	            $onsen.declareVarAttribute(attrs, page);
	            $onsen.registerEventHandlers(page, 'init show hide destroy');
	
	            element.data('ons-page', page);
	            $onsen.addModifierMethodsForCustomElements(page, element);
	
	            element.data('_scope', scope);
	
	            $onsen.cleaner.onDestroy(scope, function () {
	              page._events = undefined;
	              $onsen.removeModifierMethods(page);
	              element.data('ons-page', undefined);
	              element.data('_scope', undefined);
	
	              $onsen.clearComponent({
	                element: element,
	                scope: scope,
	                attrs: attrs
	              });
	              scope = element = attrs = null;
	            });
	          },
	
	          post: function postLink(scope, element, attrs) {
	            firePageInitEvent(element[0]);
	          }
	        };
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-popover
	 */
	
	/**
	 * @attribute var
	 * @initonly
	 * @type {String}
	 * @description
	 *  [en]Variable name to refer this popover.[/en]
	 *  [ja]このポップオーバーを参照するための名前を指定します。[/ja]
	 */
	
	/**
	 * @attribute ons-preshow
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "preshow" event is fired.[/en]
	 *  [ja]"preshow"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-prehide
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "prehide" event is fired.[/en]
	 *  [ja]"prehide"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-postshow
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "postshow" event is fired.[/en]
	 *  [ja]"postshow"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-posthide
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "posthide" event is fired.[/en]
	 *  [ja]"posthide"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-destroy
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "destroy" event is fired.[/en]
	 *  [ja]"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @method on
	 * @signature on(eventName, listener)
	 * @description
	 *   [en]Add an event listener.[/en]
	 *   [ja]イベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]このイベントが発火された際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method once
	 * @signature once(eventName, listener)
	 * @description
	 *  [en]Add an event listener that's only triggered once.[/en]
	 *  [ja]一度だけ呼び出されるイベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method off
	 * @signature off(eventName, [listener])
	 * @description
	 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
	 *  [ja]イベントリスナーを削除します。もしイベントリスナーを指定しなかった場合には、そのイベントに紐づく全てのイベントリスナーが削除されます。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]削除するイベントリスナーを指定します。[/ja]
	 */
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.directive('onsPopover', ['$onsen', 'PopoverView', function ($onsen, PopoverView) {
	    return {
	      restrict: 'E',
	      replace: false,
	      scope: true,
	      compile: function compile(element, attrs) {
	        return {
	          pre: function pre(scope, element, attrs) {
	
	            var popover = new PopoverView(scope, element, attrs);
	
	            $onsen.declareVarAttribute(attrs, popover);
	            $onsen.registerEventHandlers(popover, 'preshow prehide postshow posthide destroy');
	            $onsen.addModifierMethodsForCustomElements(popover, element);
	
	            element.data('ons-popover', popover);
	
	            scope.$on('$destroy', function () {
	              popover._events = undefined;
	              $onsen.removeModifierMethods(popover);
	              element.data('ons-popover', undefined);
	              element = null;
	            });
	          },
	
	          post: function post(scope, element) {
	            $onsen.fireComponentEvent(element[0], 'init');
	          }
	        };
	      }
	    };
	  }]);
	})();
	"use strict";
	'use strict';
	
	/**
	 * @element ons-pull-hook
	 * @example
	 * <script>
	 *   ons.bootstrap()
	 *
	 *   .controller('MyController', function($scope, $timeout) {
	 *     $scope.items = [3, 2 ,1];
	 *
	 *     $scope.load = function($done) {
	 *       $timeout(function() {
	 *         $scope.items.unshift($scope.items.length + 1);
	 *         $done();
	 *       }, 1000);
	 *     };
	 *   });
	 * </script>
	 *
	 * <ons-page ng-controller="MyController">
	 *   <ons-pull-hook var="loader" ng-action="load($done)">
	 *     <span ng-switch="loader.state">
	 *       <span ng-switch-when="initial">Pull down to refresh</span>
	 *       <span ng-switch-when="preaction">Release to refresh</span>
	 *       <span ng-switch-when="action">Loading data. Please wait...</span>
	 *     </span>
	 *   </ons-pull-hook>
	 *   <ons-list>
	 *     <ons-list-item ng-repeat="item in items">
	 *       Item #{{ item }}
	 *     </ons-list-item>
	 *   </ons-list>
	 * </ons-page>
	 */
	
	/**
	 * @attribute var
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]Variable name to refer this component.[/en]
	 *   [ja]このコンポーネントを参照するための名前を指定します。[/ja]
	 */
	
	/**
	 * @attribute ng-action
	 * @initonly
	 * @type {Expression}
	 * @description
	 *   [en]Use to specify custom behavior when the page is pulled down. A <code>$done</code> function is available to tell the component that the action is completed.[/en]
	 *   [ja]pull downしたときの振る舞いを指定します。アクションが完了した時には<code>$done</code>関数を呼び出します。[/ja]
	 */
	
	/**
	 * @attribute ons-changestate
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "changestate" event is fired.[/en]
	 *  [ja]"changestate"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @method on
	 * @signature on(eventName, listener)
	 * @description
	 *   [en]Add an event listener.[/en]
	 *   [ja]イベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]このイベントが発火された際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method once
	 * @signature once(eventName, listener)
	 * @description
	 *  [en]Add an event listener that's only triggered once.[/en]
	 *  [ja]一度だけ呼び出されるイベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method off
	 * @signature off(eventName, [listener])
	 * @description
	 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
	 *  [ja]イベントリスナーを削除します。もしイベントリスナーを指定しなかった場合には、そのイベントに紐づく全てのイベントリスナーが削除されます。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]削除するイベントリスナーを指定します。[/ja]
	 */
	
	(function () {
	  'use strict';
	
	  /**
	   * Pull hook directive.
	   */
	
	  angular.module('onsen').directive('onsPullHook', ['$onsen', 'PullHookView', function ($onsen, PullHookView) {
	    return {
	      restrict: 'E',
	      replace: false,
	      scope: true,
	
	      compile: function compile(element, attrs) {
	        return {
	          pre: function pre(scope, element, attrs) {
	            var pullHook = new PullHookView(scope, element, attrs);
	
	            $onsen.declareVarAttribute(attrs, pullHook);
	            $onsen.registerEventHandlers(pullHook, 'changestate destroy');
	            element.data('ons-pull-hook', pullHook);
	
	            scope.$on('$destroy', function () {
	              pullHook._events = undefined;
	              element.data('ons-pull-hook', undefined);
	              scope = element = attrs = null;
	            });
	          },
	          post: function post(scope, element) {
	            $onsen.fireComponentEvent(element[0], 'init');
	          }
	        };
	      }
	    };
	  }]);
	})();
	'use strict';
	
	(function () {
	  'use strict';
	
	  angular.module('onsen').directive('onsRange', ['$parse', function ($parse) {
	    return {
	      restrict: 'E',
	      replace: false,
	      scope: false,
	
	      link: function link(scope, element, attrs) {
	
	        var onInput = function onInput() {
	          var set = $parse(attrs.ngModel).assign;
	
	          set(scope, element[0].value);
	          if (attrs.ngChange) {
	            scope.$eval(attrs.ngChange);
	          }
	          scope.$parent.$evalAsync();
	        };
	
	        if (attrs.ngModel) {
	          scope.$watch(attrs.ngModel, function (value) {
	            element[0].value = value;
	          });
	
	          element.on('input', onInput);
	        }
	
	        scope.$on('$destroy', function () {
	          element.off('input', onInput);
	          scope = element = attrs = null;
	        });
	      }
	    };
	  }]);
	})();
	'use strict';
	
	(function () {
	  'use strict';
	
	  angular.module('onsen').directive('onsRipple', ['$onsen', 'GenericView', function ($onsen, GenericView) {
	    return {
	      restrict: 'E',
	      link: function link(scope, element, attrs) {
	        GenericView.register(scope, element, attrs, { viewKey: 'ons-ripple' });
	        $onsen.fireComponentEvent(element[0], 'init');
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-scope
	 * @category util
	 * @description
	 *   [en]All child elements using the "var" attribute will be attached to the scope of this element.[/en]
	 *   [ja]"var"属性を使っている全ての子要素のviewオブジェクトは、この要素のAngularJSスコープに追加されます。[/ja]
	 * @example
	 * <ons-list>
	 *   <ons-list-item ons-scope ng-repeat="item in items">
	 *     <ons-carousel var="carousel">
	 *       <ons-carousel-item ng-click="carousel.next()">
	 *         {{ item }}
	 *       </ons-carousel-item>
	 *       </ons-carousel-item ng-click="carousel.prev()">
	 *         ...
	 *       </ons-carousel-item>
	 *     </ons-carousel>
	 *   </ons-list-item>
	 * </ons-list>
	 */
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.directive('onsScope', ['$onsen', function ($onsen) {
	    return {
	      restrict: 'A',
	      replace: false,
	      transclude: false,
	      scope: false,
	
	      link: function link(scope, element) {
	        element.data('_scope', scope);
	
	        scope.$on('$destroy', function () {
	          element.data('_scope', undefined);
	        });
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-sliding-menu
	 * @category menu
	 * @description
	 *   [en]Component for sliding UI where one page is overlayed over another page. The above page can be slided aside to reveal the page behind.[/en]
	 *   [ja]スライディングメニューを表現するためのコンポーネントで、片方のページが別のページの上にオーバーレイで表示されます。above-pageで指定されたページは、横からスライドして表示します。[/ja]
	 * @codepen IDvFJ
	 * @seealso ons-page
	 *   [en]ons-page component[/en]
	 *   [ja]ons-pageコンポーネント[/ja]
	 * @guide UsingSlidingMenu
	 *   [en]Using sliding menu[/en]
	 *   [ja]スライディングメニューを使う[/ja]
	 * @guide EventHandling
	 *   [en]Using events[/en]
	 *   [ja]イベントの利用[/ja]
	 * @guide CallingComponentAPIsfromJavaScript
	 *   [en]Using navigator from JavaScript[/en]
	 *   [ja]JavaScriptからコンポーネントを呼び出す[/ja]
	 * @guide DefiningMultiplePagesinSingleHTML
	 *   [en]Defining multiple pages in single html[/en]
	 *   [ja]複数のページを1つのHTMLに記述する[/ja]
	 * @example
	 * <ons-sliding-menu var="app.menu" main-page="page.html" menu-page="menu.html" max-slide-distance="200px" type="reveal" side="left">
	 * </ons-sliding-menu>
	 *
	 * <ons-template id="page.html">
	 *   <ons-page>
	 *    <p style="text-align: center">
	 *      <ons-button ng-click="app.menu.toggleMenu()">Toggle</ons-button>
	 *    </p>
	 *   </ons-page>
	 * </ons-template>
	 *
	 * <ons-template id="menu.html">
	 *   <ons-page>
	 *     <!-- menu page's contents -->
	 *   </ons-page>
	 * </ons-template>
	 *
	 */
	
	/**
	 * @event preopen
	 * @description
	 *   [en]Fired just before the sliding menu is opened.[/en]
	 *   [ja]スライディングメニューが開く前に発火します。[/ja]
	 * @param {Object} event
	 *   [en]Event object.[/en]
	 *   [ja]イベントオブジェクトです。[/ja]
	 * @param {Object} event.slidingMenu
	 *   [en]Sliding menu view object.[/en]
	 *   [ja]イベントが発火したSlidingMenuオブジェクトです。[/ja]
	 */
	
	/**
	 * @event postopen
	 * @description
	 *   [en]Fired just after the sliding menu is opened.[/en]
	 *   [ja]スライディングメニューが開き終わった後に発火します。[/ja]
	 * @param {Object} event
	 *   [en]Event object.[/en]
	 *   [ja]イベントオブジェクトです。[/ja]
	 * @param {Object} event.slidingMenu
	 *   [en]Sliding menu view object.[/en]
	 *   [ja]イベントが発火したSlidingMenuオブジェクトです。[/ja]
	 */
	
	/**
	 * @event preclose
	 * @description
	 *   [en]Fired just before the sliding menu is closed.[/en]
	 *   [ja]スライディングメニューが閉じる前に発火します。[/ja]
	 * @param {Object} event
	 *   [en]Event object.[/en]
	 *   [ja]イベントオブジェクトです。[/ja]
	 * @param {Object} event.slidingMenu
	 *   [en]Sliding menu view object.[/en]
	 *   [ja]イベントが発火したSlidingMenuオブジェクトです。[/ja]
	 */
	
	/**
	 * @event postclose
	 * @description
	 *   [en]Fired just after the sliding menu is closed.[/en]
	 *   [ja]スライディングメニューが閉じ終わった後に発火します。[/ja]
	 * @param {Object} event
	 *   [en]Event object.[/en]
	 *   [ja]イベントオブジェクトです。[/ja]
	 * @param {Object} event.slidingMenu
	 *   [en]Sliding menu view object.[/en]
	 *   [ja]イベントが発火したSlidingMenuオブジェクトです。[/ja]
	 */
	
	/**
	 * @attribute var
	 * @initonly
	 * @type {String}
	 * @description
	 *  [en]Variable name to refer this sliding menu.[/en]
	 *  [ja]このスライディングメニューを参照するための名前を指定します。[/ja]
	 */
	
	/**
	 * @attribute menu-page
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]The url of the menu page.[/en]
	 *   [ja]左に位置するメニューページのURLを指定します。[/ja]
	 */
	
	/**
	 * @attribute main-page
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]The url of the main page.[/en]
	 *   [ja]右に位置するメインページのURLを指定します。[/ja]
	 */
	
	/**
	 * @attribute swipeable
	 * @initonly
	 * @type {Boolean}
	 * @description
	 *   [en]Whether to enable swipe interaction.[/en]
	 *   [ja]スワイプ操作を有効にする場合に指定します。[/ja]
	 */
	
	/**
	 * @attribute swipe-target-width
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]The width of swipeable area calculated from the left (in pixels). Use this to enable swipe only when the finger touch on the screen edge.[/en]
	 *   [ja]スワイプの判定領域をピクセル単位で指定します。画面の端から指定した距離に達するとページが表示されます。[/ja]
	 */
	
	/**
	 * @attribute max-slide-distance
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]How far the menu page will slide open. Can specify both in px and %. eg. 90%, 200px[/en]
	 *   [ja]menu-pageで指定されたページの表示幅を指定します。ピクセルもしくは%の両方で指定できます（例: 90%, 200px）[/ja]
	 */
	
	/**
	 * @attribute side
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]Specify which side of the screen the menu page is located on. Possible values are "left" and "right".[/en]
	 *   [ja]menu-pageで指定されたページが画面のどちら側から表示されるかを指定します。leftもしくはrightのいずれかを指定できます。[/ja]
	 */
	
	/**
	 * @attribute type
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]Sliding menu animator. Possible values are reveal (default), push and overlay.[/en]
	 *   [ja]スライディングメニューのアニメーションです。"reveal"（デフォルト）、"push"、"overlay"のいずれかを指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-preopen
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "preopen" event is fired.[/en]
	 *  [ja]"preopen"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-preclose
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "preclose" event is fired.[/en]
	 *  [ja]"preclose"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-postopen
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "postopen" event is fired.[/en]
	 *  [ja]"postopen"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-postclose
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "postclose" event is fired.[/en]
	 *  [ja]"postclose"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-init
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when a page's "init" event is fired.[/en]
	 *  [ja]ページの"init"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-show
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when a page's "show" event is fired.[/en]
	 *  [ja]ページの"show"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-hide
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when a page's "hide" event is fired.[/en]
	 *  [ja]ページの"hide"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-destroy
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when a page's "destroy" event is fired.[/en]
	 *  [ja]ページの"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @method setMainPage
	 * @signature setMainPage(pageUrl, [options])
	 * @param {String} pageUrl
	 *   [en]Page URL. Can be either an HTML document or an <code>&lt;ons-template&gt;</code>.[/en]
	 *   [ja]pageのURLか、ons-templateで宣言したテンプレートのid属性の値を指定します。[/ja]
	 * @param {Object} [options]
	 *   [en]Parameter object.[/en]
	 *   [ja]オプションを指定するオブジェクト。[/ja]
	 * @param {Boolean} [options.closeMenu]
	 *   [en]If true the menu will be closed.[/en]
	 *   [ja]trueを指定すると、開いているメニューを閉じます。[/ja]
	 * @param {Function} [options.callback]
	 *   [en]Function that is executed after the page has been set.[/en]
	 *   [ja]ページが読み込まれた後に呼び出される関数オブジェクトを指定します。[/ja]
	 * @description
	 *   [en]Show the page specified in pageUrl in the main contents pane.[/en]
	 *   [ja]中央部分に表示されるページをpageUrlに指定します。[/ja]
	 */
	
	/**
	 * @method setMenuPage
	 * @signature setMenuPage(pageUrl, [options])
	 * @param {String} pageUrl
	 *   [en]Page URL. Can be either an HTML document or an <code>&lt;ons-template&gt;</code>.[/en]
	 *   [ja]pageのURLか、ons-templateで宣言したテンプレートのid属性の値を指定します。[/ja]
	 * @param {Object} [options]
	 *   [en]Parameter object.[/en]
	 *   [ja]オプションを指定するオブジェクト。[/ja]
	 * @param {Boolean} [options.closeMenu]
	 *   [en]If true the menu will be closed after the menu page has been set.[/en]
	 *   [ja]trueを指定すると、開いているメニューを閉じます。[/ja]
	 * @param {Function} [options.callback]
	 *   [en]This function will be executed after the menu page has been set.[/en]
	 *   [ja]メニューページが読み込まれた後に呼び出される関数オブジェクトを指定します。[/ja]
	 * @description
	 *   [en]Show the page specified in pageUrl in the side menu pane.[/en]
	 *   [ja]メニュー部分に表示されるページをpageUrlに指定します。[/ja]
	 */
	
	/**
	 * @method openMenu
	 * @signature openMenu([options])
	 * @param {Object} [options]
	 *   [en]Parameter object.[/en]
	 *   [ja]オプションを指定するオブジェクト。[/ja]
	 * @param {Function} [options.callback]
	 *   [en]This function will be called after the menu has been opened.[/en]
	 *   [ja]メニューが開いた後に呼び出される関数オブジェクトを指定します。[/ja]
	 * @description
	 *   [en]Slide the above layer to reveal the layer behind.[/en]
	 *   [ja]メニューページを表示します。[/ja]
	 */
	
	/**
	 * @method closeMenu
	 * @signature closeMenu([options])
	 * @param {Object} [options]
	 *   [en]Parameter object.[/en]
	 *   [ja]オプションを指定するオブジェクト。[/ja]
	 * @param {Function} [options.callback]
	 *   [en]This function will be called after the menu has been closed.[/en]
	 *   [ja]メニューが閉じられた後に呼び出される関数オブジェクトを指定します。[/ja]
	 * @description
	 *   [en]Slide the above layer to hide the layer behind.[/en]
	 *   [ja]メニューページを非表示にします。[/ja]
	 */
	
	/**
	 * @method toggleMenu
	 * @signature toggleMenu([options])
	 * @param {Object} [options]
	 *   [en]Parameter object.[/en]
	 *   [ja]オプションを指定するオブジェクト。[/ja]
	 * @param {Function} [options.callback]
	 *   [en]This function will be called after the menu has been opened or closed.[/en]
	 *   [ja]メニューが開き終わった後か、閉じ終わった後に呼び出される関数オブジェクトです。[/ja]
	 * @description
	 *   [en]Slide the above layer to reveal the layer behind if it is currently hidden, otherwise, hide the layer behind.[/en]
	 *   [ja]現在の状況に合わせて、メニューページを表示もしくは非表示にします。[/ja]
	 */
	
	/**
	 * @method isMenuOpened
	 * @signature isMenuOpened()
	 * @return {Boolean}
	 *   [en]true if the menu is currently open.[/en]
	 *   [ja]メニューが開いていればtrueとなります。[/ja]
	 * @description
	 *   [en]Returns true if the menu page is open, otherwise false.[/en]
	 *   [ja]メニューページが開いている場合はtrue、そうでない場合はfalseを返します。[/ja]
	 */
	
	/**
	 * @method getDeviceBackButtonHandler
	 * @signature getDeviceBackButtonHandler()
	 * @return {Object}
	 *   [en]Device back button handler.[/en]
	 *   [ja]デバイスのバックボタンハンドラを返します。[/ja]
	 * @description
	 *   [en]Retrieve the back-button handler.[/en]
	 *   [ja]ons-sliding-menuに紐付いているバックボタンハンドラを取得します。[/ja]
	 */
	
	/**
	 * @method setSwipeable
	 * @signature setSwipeable(swipeable)
	 * @param {Boolean} swipeable
	 *   [en]If true the menu will be swipeable.[/en]
	 *   [ja]スワイプで開閉できるようにする場合にはtrueを指定します。[/ja]
	 * @description
	 *   [en]Specify if the menu should be swipeable or not.[/en]
	 *   [ja]スワイプで開閉するかどうかを設定する。[/ja]
	 */
	
	/**
	 * @method on
	 * @signature on(eventName, listener)
	 * @description
	 *   [en]Add an event listener.[/en]
	 *   [ja]イベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]このイベントが発火された際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method once
	 * @signature once(eventName, listener)
	 * @description
	 *  [en]Add an event listener that's only triggered once.[/en]
	 *  [ja]一度だけ呼び出されるイベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method off
	 * @signature off(eventName, [listener])
	 * @description
	 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
	 *  [ja]イベントリスナーを削除します。もしイベントリスナーを指定しなかった場合には、そのイベントに紐づく全てのイベントリスナーが削除されます。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]削除するイベントリスナーを指定します。[/ja]
	 */
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.directive('onsSlidingMenu', ['$compile', 'SlidingMenuView', '$onsen', function ($compile, SlidingMenuView, $onsen) {
	    return {
	      restrict: 'E',
	      replace: false,
	
	      // NOTE: This element must coexists with ng-controller.
	      // Do not use isolated scope and template's ng-transclude.
	      transclude: false,
	      scope: true,
	
	      compile: function compile(element, attrs) {
	        var main = element[0].querySelector('.main'),
	            menu = element[0].querySelector('.menu');
	
	        if (main) {
	          var mainHtml = angular.element(main).remove().html().trim();
	        }
	
	        if (menu) {
	          var menuHtml = angular.element(menu).remove().html().trim();
	        }
	
	        return function (scope, element, attrs) {
	          element.append(angular.element('<div></div>').addClass('onsen-sliding-menu__menu'));
	          element.append(angular.element('<div></div>').addClass('onsen-sliding-menu__main'));
	
	          var slidingMenu = new SlidingMenuView(scope, element, attrs);
	
	          $onsen.registerEventHandlers(slidingMenu, 'preopen preclose postopen postclose init show hide destroy');
	
	          if (mainHtml && !attrs.mainPage) {
	            slidingMenu._appendMainPage(null, mainHtml);
	          }
	
	          if (menuHtml && !attrs.menuPage) {
	            slidingMenu._appendMenuPage(menuHtml);
	          }
	
	          $onsen.declareVarAttribute(attrs, slidingMenu);
	          element.data('ons-sliding-menu', slidingMenu);
	
	          scope.$on('$destroy', function () {
	            slidingMenu._events = undefined;
	            element.data('ons-sliding-menu', undefined);
	          });
	
	          $onsen.fireComponentEvent(element[0], 'init');
	        };
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-speed-dial
	 */
	
	/**
	 * @attribute var
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]Variable name to refer the speed dial.[/en]
	 *   [ja]このスピードダイアルを参照するための変数名をしてします。[/ja]
	 */
	
	/**
	 * @attribute ons-open
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "open" event is fired.[/en]
	 *  [ja]"open"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-close
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "close" event is fired.[/en]
	 *  [ja]"close"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @method once
	 * @signature once(eventName, listener)
	 * @description
	 *  [en]Add an event listener that's only triggered once.[/en]
	 *  [ja]一度だけ呼び出されるイベントリスナを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method off
	 * @signature off(eventName, [listener])
	 * @description
	 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
	 *  [ja]イベントリスナーを削除します。もしイベントリスナーが指定されなかった場合には、そのイベントに紐付いているイベントリスナーが全て削除されます。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method on
	 * @signature on(eventName, listener)
	 * @description
	 *   [en]Add an event listener.[/en]
	 *   [ja]イベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.directive('onsSpeedDial', ['$onsen', 'SpeedDialView', function ($onsen, SpeedDialView) {
	    return {
	      restrict: 'E',
	      replace: false,
	      scope: false,
	      transclude: false,
	
	      compile: function compile(element, attrs) {
	
	        return function (scope, element, attrs) {
	          var speedDial = new SpeedDialView(scope, element, attrs);
	
	          element.data('ons-speed-dial', speedDial);
	
	          $onsen.registerEventHandlers(speedDial, 'open close');
	          $onsen.declareVarAttribute(attrs, speedDial);
	
	          scope.$on('$destroy', function () {
	            speedDial._events = undefined;
	            element.data('ons-speed-dial', undefined);
	            element = null;
	          });
	
	          $onsen.fireComponentEvent(element[0], 'init');
	        };
	      }
	
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-split-view
	 * @category control
	 * @description
	 *  [en]Divides the screen into a left and right section.[/en]
	 *  [ja]画面を左右に分割するコンポーネントです。[/ja]
	 * @codepen nKqfv {wide}
	 * @guide Usingonssplitviewcomponent
	 *   [en]Using ons-split-view.[/en]
	 *   [ja]ons-split-viewコンポーネントを使う[/ja]
	 * @guide CallingComponentAPIsfromJavaScript
	 *   [en]Using navigator from JavaScript[/en]
	 *   [ja]JavaScriptからコンポーネントを呼び出す[/ja]
	 * @example
	 * <ons-split-view
	 *   secondary-page="secondary.html"
	 *   main-page="main.html"
	 *   main-page-width="70%"
	 *   collapse="portrait">
	 * </ons-split-view>
	 */
	
	/**
	 * @event update
	 * @description
	 *   [en]Fired when the split view is updated.[/en]
	 *   [ja]split viewの状態が更新された際に発火します。[/ja]
	 * @param {Object} event
	 *   [en]Event object.[/en]
	 *   [ja]イベントオブジェクトです。[/ja]
	 * @param {Object} event.splitView
	 *   [en]Split view object.[/en]
	 *   [ja]イベントが発火したSplitViewオブジェクトです。[/ja]
	 * @param {Boolean} event.shouldCollapse
	 *   [en]True if the view should collapse.[/en]
	 *   [ja]collapse状態の場合にtrueになります。[/ja]
	 * @param {String} event.currentMode
	 *   [en]Current mode.[/en]
	 *   [ja]現在のモード名を返します。"collapse"か"split"かのいずれかです。[/ja]
	 * @param {Function} event.split
	 *   [en]Call to force split.[/en]
	 *   [ja]この関数を呼び出すと強制的にsplitモードにします。[/ja]
	 * @param {Function} event.collapse
	 *   [en]Call to force collapse.[/en]
	 *   [ja]この関数を呼び出すと強制的にcollapseモードにします。[/ja]
	 * @param {Number} event.width
	 *   [en]Current width.[/en]
	 *   [ja]現在のSplitViewの幅を返します。[/ja]
	 * @param {String} event.orientation
	 *   [en]Current orientation.[/en]
	 *   [ja]現在の画面のオリエンテーションを返します。"portrait"かもしくは"landscape"です。 [/ja]
	 */
	
	/**
	 * @event presplit
	 * @description
	 *   [en]Fired just before the view is split.[/en]
	 *   [ja]split状態にる前に発火します。[/ja]
	 * @param {Object} event
	 *   [en]Event object.[/en]
	 *   [ja]イベントオブジェクト。[/ja]
	 * @param {Object} event.splitView
	 *   [en]Split view object.[/en]
	 *   [ja]イベントが発火したSplitViewオブジェクトです。[/ja]
	 * @param {Number} event.width
	 *   [en]Current width.[/en]
	 *   [ja]現在のSplitViewnの幅です。[/ja]
	 * @param {String} event.orientation
	 *   [en]Current orientation.[/en]
	 *   [ja]現在の画面のオリエンテーションを返します。"portrait"もしくは"landscape"です。[/ja]
	 */
	
	/**
	 * @event postsplit
	 * @description
	 *   [en]Fired just after the view is split.[/en]
	 *   [ja]split状態になった後に発火します。[/ja]
	 * @param {Object} event
	 *   [en]Event object.[/en]
	 *   [ja]イベントオブジェクト。[/ja]
	 * @param {Object} event.splitView
	 *   [en]Split view object.[/en]
	 *   [ja]イベントが発火したSplitViewオブジェクトです。[/ja]
	 * @param {Number} event.width
	 *   [en]Current width.[/en]
	 *   [ja]現在のSplitViewnの幅です。[/ja]
	 * @param {String} event.orientation
	 *   [en]Current orientation.[/en]
	 *   [ja]現在の画面のオリエンテーションを返します。"portrait"もしくは"landscape"です。[/ja]
	 */
	
	/**
	 * @event precollapse
	 * @description
	 *   [en]Fired just before the view is collapsed.[/en]
	 *   [ja]collapse状態になる前に発火します。[/ja]
	 * @param {Object} event
	 *   [en]Event object.[/en]
	 *   [ja]イベントオブジェクト。[/ja]
	 * @param {Object} event.splitView
	 *   [en]Split view object.[/en]
	 *   [ja]イベントが発火したSplitViewオブジェクトです。[/ja]
	 * @param {Number} event.width
	 *   [en]Current width.[/en]
	 *   [ja]現在のSplitViewnの幅です。[/ja]
	 * @param {String} event.orientation
	 *   [en]Current orientation.[/en]
	 *   [ja]現在の画面のオリエンテーションを返します。"portrait"もしくは"landscape"です。[/ja]
	 */
	
	/**
	 * @event postcollapse
	 * @description
	 *   [en]Fired just after the view is collapsed.[/en]
	 *   [ja]collapse状態になった後に発火します。[/ja]
	 * @param {Object} event
	 *   [en]Event object.[/en]
	 *   [ja]イベントオブジェクト。[/ja]
	 * @param {Object} event.splitView
	 *   [en]Split view object.[/en]
	 *   [ja]イベントが発火したSplitViewオブジェクトです。[/ja]
	 * @param {Number} event.width
	 *   [en]Current width.[/en]
	 *   [ja]現在のSplitViewnの幅です。[/ja]
	 * @param {String} event.orientation
	 *   [en]Current orientation.[/en]
	 *   [ja]現在の画面のオリエンテーションを返します。"portrait"もしくは"landscape"です。[/ja]
	 */
	
	/**
	 * @attribute var
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]Variable name to refer this split view.[/en]
	 *   [ja]このスプリットビューコンポーネントを参照するための名前を指定します。[/ja]
	 */
	
	/**
	 * @attribute main-page
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]The url of the page on the right.[/en]
	 *   [ja]右側に表示するページのURLを指定します。[/ja]
	 */
	
	/**
	 * @attribute main-page-width
	 * @initonly
	 * @type {Number}
	 * @description
	 *   [en]Main page width percentage. The secondary page width will be the remaining percentage.[/en]
	 *   [ja]右側のページの幅をパーセント単位で指定します。[/ja]
	 */
	
	/**
	 * @attribute secondary-page
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]The url of the page on the left.[/en]
	 *   [ja]左側に表示するページのURLを指定します。[/ja]
	 */
	
	/**
	 * @attribute collapse
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]
	 *     Specify the collapse behavior. Valid values are portrait, landscape, width #px or a media query.
	 *     "portrait" or "landscape" means the view will collapse when device is in landscape or portrait orientation.
	 *     "width #px" means the view will collapse when the window width is smaller than the specified #px.
	 *     If the value is a media query, the view will collapse when the media query is true.
	 *   [/en]
	 *   [ja]
	 *     左側のページを非表示にする条件を指定します。portrait, landscape、width #pxもしくはメディアクエリの指定が可能です。
	 *     portraitもしくはlandscapeを指定すると、デバイスの画面が縦向きもしくは横向きになった時に適用されます。
	 *     width #pxを指定すると、画面が指定した横幅よりも短い場合に適用されます。
	 *     メディアクエリを指定すると、指定したクエリに適合している場合に適用されます。
	 *   [/ja]
	 */
	
	/**
	 * @attribute ons-update
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "update" event is fired.[/en]
	 *  [ja]"update"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-presplit
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "presplit" event is fired.[/en]
	 *  [ja]"presplit"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-precollapse
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "precollapse" event is fired.[/en]
	 *  [ja]"precollapse"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-postsplit
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "postsplit" event is fired.[/en]
	 *  [ja]"postsplit"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-postcollapse
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "postcollapse" event is fired.[/en]
	 *  [ja]"postcollapse"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-init
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when a page's "init" event is fired.[/en]
	 *  [ja]ページの"init"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-show
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when a page's "show" event is fired.[/en]
	 *  [ja]ページの"show"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-hide
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when a page's "hide" event is fired.[/en]
	 *  [ja]ページの"hide"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-destroy
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when a page's "destroy" event is fired.[/en]
	 *  [ja]ページの"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @method setMainPage
	 * @signature setMainPage(pageUrl)
	 * @param {String} pageUrl
	 *   [en]Page URL. Can be either an HTML document or an <ons-template>.[/en]
	 *   [ja]pageのURLか、ons-templateで宣言したテンプレートのid属性の値を指定します。[/ja]
	 * @description
	 *   [en]Show the page specified in pageUrl in the right section[/en]
	 *   [ja]指定したURLをメインページを読み込みます。[/ja]
	 */
	
	/**
	 * @method setSecondaryPage
	 * @signature setSecondaryPage(pageUrl)
	 * @param {String} pageUrl
	 *   [en]Page URL. Can be either an HTML document or an <ons-template>.[/en]
	 *   [ja]pageのURLか、ons-templateで宣言したテンプレートのid属性の値を指定します。[/ja]
	 * @description
	 *   [en]Show the page specified in pageUrl in the left section[/en]
	 *   [ja]指定したURLを左のページの読み込みます。[/ja]
	 */
	
	/**
	 * @method update
	 * @signature update()
	 * @description
	 *   [en]Trigger an 'update' event and try to determine if the split behavior should be changed.[/en]
	 *   [ja]splitモードを変えるべきかどうかを判断するための'update'イベントを発火します。[/ja]
	 */
	
	/**
	 * @method on
	 * @signature on(eventName, listener)
	 * @description
	 *   [en]Add an event listener.[/en]
	 *   [ja]イベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]このイベントが発火された際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method once
	 * @signature once(eventName, listener)
	 * @description
	 *  [en]Add an event listener that's only triggered once.[/en]
	 *  [ja]一度だけ呼び出されるイベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method off
	 * @signature off(eventName, [listener])
	 * @description
	 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
	 *  [ja]イベントリスナーを削除します。もしイベントリスナーを指定しなかった場合には、そのイベントに紐づく全てのイベントリスナーが削除されます。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]削除するイベントリスナーを指定します。[/ja]
	 */
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.directive('onsSplitView', ['$compile', 'SplitView', '$onsen', function ($compile, SplitView, $onsen) {
	
	    return {
	      restrict: 'E',
	      replace: false,
	      transclude: false,
	      scope: true,
	
	      compile: function compile(element, attrs) {
	        var mainPage = element[0].querySelector('.main-page'),
	            secondaryPage = element[0].querySelector('.secondary-page');
	
	        if (mainPage) {
	          var mainHtml = angular.element(mainPage).remove().html().trim();
	        }
	
	        if (secondaryPage) {
	          var secondaryHtml = angular.element(secondaryPage).remove().html().trim();
	        }
	
	        return function (scope, element, attrs) {
	          element.append(angular.element('<div></div>').addClass('onsen-split-view__secondary full-screen'));
	          element.append(angular.element('<div></div>').addClass('onsen-split-view__main full-screen'));
	
	          var splitView = new SplitView(scope, element, attrs);
	
	          if (mainHtml && !attrs.mainPage) {
	            splitView._appendMainPage(mainHtml);
	          }
	
	          if (secondaryHtml && !attrs.secondaryPage) {
	            splitView._appendSecondPage(secondaryHtml);
	          }
	
	          $onsen.declareVarAttribute(attrs, splitView);
	          $onsen.registerEventHandlers(splitView, 'update presplit precollapse postsplit postcollapse init show hide destroy');
	
	          element.data('ons-split-view', splitView);
	
	          scope.$on('$destroy', function () {
	            splitView._events = undefined;
	            element.data('ons-split-view', undefined);
	          });
	
	          $onsen.fireComponentEvent(element[0], 'init');
	        };
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-splitter
	 */
	
	/**
	 * @attribute var
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]Variable name to refer this split view.[/en]
	 *   [ja]このスプリットビューコンポーネントを参照するための名前を指定します。[/ja]
	 */
	
	/**
	 * @attribute ons-destroy
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "destroy" event is fired.[/en]
	 *  [ja]"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @method on
	 * @signature on(eventName, listener)
	 * @description
	 *   [en]Add an event listener.[/en]
	 *   [ja]イベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]このイベントが発火された際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method once
	 * @signature once(eventName, listener)
	 * @description
	 *  [en]Add an event listener that's only triggered once.[/en]
	 *  [ja]一度だけ呼び出されるイベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method off
	 * @signature off(eventName, [listener])
	 * @description
	 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
	 *  [ja]イベントリスナーを削除します。もしイベントリスナーを指定しなかった場合には、そのイベントに紐づく全てのイベントリスナーが削除されます。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]削除するイベントリスナーを指定します。[/ja]
	 */
	
	(function () {
	  'use strict';
	
	  angular.module('onsen').directive('onsSplitter', ['$compile', 'Splitter', '$onsen', function ($compile, Splitter, $onsen) {
	    return {
	      restrict: 'E',
	      scope: true,
	
	      compile: function compile(element, attrs) {
	
	        return function (scope, element, attrs) {
	
	          var splitter = new Splitter(scope, element, attrs);
	
	          $onsen.declareVarAttribute(attrs, splitter);
	          $onsen.registerEventHandlers(splitter, 'destroy');
	
	          element.data('ons-splitter', splitter);
	
	          scope.$on('$destroy', function () {
	            splitter._events = undefined;
	            element.data('ons-splitter', undefined);
	          });
	
	          $onsen.fireComponentEvent(element[0], 'init');
	        };
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-splitter-content
	 */
	
	/**
	 * @attribute ons-destroy
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "destroy" event is fired.[/en]
	 *  [ja]"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	(function () {
	  'use strict';
	
	  var lastReady = window.ons.SplitterContentElement.rewritables.ready;
	  window.ons.SplitterContentElement.rewritables.ready = ons._waitDiretiveInit('ons-splitter-content', lastReady);
	
	  angular.module('onsen').directive('onsSplitterContent', ['$compile', 'SplitterContent', '$onsen', function ($compile, SplitterContent, $onsen) {
	    return {
	      restrict: 'E',
	
	      compile: function compile(element, attrs) {
	
	        return function (scope, element, attrs) {
	
	          var view = new SplitterContent(scope, element, attrs);
	
	          $onsen.declareVarAttribute(attrs, view);
	          $onsen.registerEventHandlers(view, 'destroy');
	
	          element.data('ons-splitter-content', view);
	
	          element[0].pageLoader = $onsen.createPageLoader(view);
	
	          scope.$on('$destroy', function () {
	            view._events = undefined;
	            element.data('ons-splitter-content', undefined);
	          });
	
	          $onsen.fireComponentEvent(element[0], 'init');
	        };
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-splitter-side
	 */
	
	/**
	 * @attribute ons-destroy
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "destroy" event is fired.[/en]
	 *  [ja]"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-preopen
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "preopen" event is fired.[/en]
	 *  [ja]"preopen"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-preclose
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "preclose" event is fired.[/en]
	 *  [ja]"preclose"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-postopen
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "postopen" event is fired.[/en]
	 *  [ja]"postopen"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-postclose
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "postclose" event is fired.[/en]
	 *  [ja]"postclose"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-modechange
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "modechange" event is fired.[/en]
	 *  [ja]"modechange"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	(function () {
	  'use strict';
	
	  var lastReady = window.ons.SplitterSideElement.rewritables.ready;
	  window.ons.SplitterSideElement.rewritables.ready = ons._waitDiretiveInit('ons-splitter-side', lastReady);
	
	  angular.module('onsen').directive('onsSplitterSide', ['$compile', 'SplitterSide', '$onsen', function ($compile, SplitterSide, $onsen) {
	    return {
	      restrict: 'E',
	
	      compile: function compile(element, attrs) {
	
	        return function (scope, element, attrs) {
	
	          var view = new SplitterSide(scope, element, attrs);
	
	          $onsen.declareVarAttribute(attrs, view);
	          $onsen.registerEventHandlers(view, 'destroy preopen preclose postopen postclose modechange');
	
	          element.data('ons-splitter-side', view);
	
	          element[0].pageLoader = $onsen.createPageLoader(view);
	
	          scope.$on('$destroy', function () {
	            view._events = undefined;
	            element.data('ons-splitter-side', undefined);
	          });
	
	          $onsen.fireComponentEvent(element[0], 'init');
	        };
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-switch
	 */
	
	/**
	 * @attribute var
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]Variable name to refer this switch.[/en]
	 *   [ja]JavaScriptから参照するための変数名を指定します。[/ja]
	 */
	
	/**
	 * @method on
	 * @signature on(eventName, listener)
	 * @description
	 *   [en]Add an event listener.[/en]
	 *   [ja]イベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]このイベントが発火された際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method once
	 * @signature once(eventName, listener)
	 * @description
	 *  [en]Add an event listener that's only triggered once.[/en]
	 *  [ja]一度だけ呼び出されるイベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method off
	 * @signature off(eventName, [listener])
	 * @description
	 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
	 *  [ja]イベントリスナーを削除します。もしイベントリスナーを指定しなかった場合には、そのイベントに紐づく全てのイベントリスナーが削除されます。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]削除するイベントリスナーを指定します。[/ja]
	 */
	
	(function () {
	  'use strict';
	
	  angular.module('onsen').directive('onsSwitch', ['$onsen', 'SwitchView', function ($onsen, SwitchView) {
	    return {
	      restrict: 'E',
	      replace: false,
	      scope: true,
	
	      link: function link(scope, element, attrs) {
	
	        if (attrs.ngController) {
	          throw new Error('This element can\'t accept ng-controller directive.');
	        }
	
	        var switchView = new SwitchView(element, scope, attrs);
	        $onsen.addModifierMethodsForCustomElements(switchView, element);
	
	        $onsen.declareVarAttribute(attrs, switchView);
	        element.data('ons-switch', switchView);
	
	        $onsen.cleaner.onDestroy(scope, function () {
	          switchView._events = undefined;
	          $onsen.removeModifierMethods(switchView);
	          element.data('ons-switch', undefined);
	          $onsen.clearComponent({
	            element: element,
	            scope: scope,
	            attrs: attrs
	          });
	          element = attrs = scope = null;
	        });
	
	        $onsen.fireComponentEvent(element[0], 'init');
	      }
	    };
	  }]);
	})();
	'use strict';
	
	(function () {
	  'use strict';
	
	  tab.$inject = ['$onsen', 'GenericView'];
	  angular.module('onsen').directive('onsTab', tab).directive('onsTabbarItem', tab); // for BC
	
	  function tab($onsen, GenericView) {
	    return {
	      restrict: 'E',
	      link: function link(scope, element, attrs) {
	        var view = new GenericView(scope, element, attrs);
	        element[0].pageLoader = $onsen.createPageLoader(view);
	
	        $onsen.fireComponentEvent(element[0], 'init');
	      }
	    };
	  }
	})();
	'use strict';
	
	/**
	 * @element ons-tabbar
	 */
	
	/**
	 * @attribute var
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]Variable name to refer this tab bar.[/en]
	 *   [ja]このタブバーを参照するための名前を指定します。[/ja]
	 */
	
	/**
	 * @attribute hide-tabs
	 * @initonly
	 * @type {Boolean}
	 * @default false
	 * @description
	 *   [en]Whether to hide the tabs. Valid values are true/false.[/en]
	 *   [ja]タブを非表示にする場合に指定します。trueもしくはfalseを指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-reactive
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "reactive" event is fired.[/en]
	 *  [ja]"reactive"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-prechange
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "prechange" event is fired.[/en]
	 *  [ja]"prechange"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-postchange
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when the "postchange" event is fired.[/en]
	 *  [ja]"postchange"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-init
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when a page's "init" event is fired.[/en]
	 *  [ja]ページの"init"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-show
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when a page's "show" event is fired.[/en]
	 *  [ja]ページの"show"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-hide
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when a page's "hide" event is fired.[/en]
	 *  [ja]ページの"hide"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @attribute ons-destroy
	 * @initonly
	 * @type {Expression}
	 * @description
	 *  [en]Allows you to specify custom behavior when a page's "destroy" event is fired.[/en]
	 *  [ja]ページの"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
	 */
	
	/**
	 * @method on
	 * @signature on(eventName, listener)
	 * @description
	 *   [en]Add an event listener.[/en]
	 *   [ja]イベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]このイベントが発火された際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method once
	 * @signature once(eventName, listener)
	 * @description
	 *  [en]Add an event listener that's only triggered once.[/en]
	 *  [ja]一度だけ呼び出されるイベントリスナーを追加します。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
	 */
	
	/**
	 * @method off
	 * @signature off(eventName, [listener])
	 * @description
	 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
	 *  [ja]イベントリスナーを削除します。もしイベントリスナーを指定しなかった場合には、そのイベントに紐づく全てのイベントリスナーが削除されます。[/ja]
	 * @param {String} eventName
	 *   [en]Name of the event.[/en]
	 *   [ja]イベント名を指定します。[/ja]
	 * @param {Function} listener
	 *   [en]Function to execute when the event is triggered.[/en]
	 *   [ja]削除するイベントリスナーを指定します。[/ja]
	 */
	
	(function () {
	  'use strict';
	
	  var lastReady = window.ons.TabbarElement.rewritables.ready;
	  window.ons.TabbarElement.rewritables.ready = ons._waitDiretiveInit('ons-tabbar', lastReady);
	
	  angular.module('onsen').directive('onsTabbar', ['$onsen', '$compile', '$parse', 'TabbarView', function ($onsen, $compile, $parse, TabbarView) {
	
	    return {
	      restrict: 'E',
	
	      replace: false,
	      scope: true,
	
	      link: function link(scope, element, attrs, controller) {
	
	        scope.$watch(attrs.hideTabs, function (hide) {
	          if (typeof hide === 'string') {
	            hide = hide === 'true';
	          }
	          element[0].setTabbarVisibility(!hide);
	        });
	
	        var tabbarView = new TabbarView(scope, element, attrs);
	        $onsen.addModifierMethodsForCustomElements(tabbarView, element);
	
	        $onsen.registerEventHandlers(tabbarView, 'reactive prechange postchange init show hide destroy');
	
	        element.data('ons-tabbar', tabbarView);
	        $onsen.declareVarAttribute(attrs, tabbarView);
	
	        scope.$on('$destroy', function () {
	          tabbarView._events = undefined;
	          $onsen.removeModifierMethods(tabbarView);
	          element.data('ons-tabbar', undefined);
	        });
	
	        $onsen.fireComponentEvent(element[0], 'init');
	      }
	    };
	  }]);
	})();
	'use strict';
	
	(function () {
	  'use strict';
	
	  angular.module('onsen').directive('onsTemplate', ['$templateCache', function ($templateCache) {
	    return {
	      restrict: 'E',
	      terminal: true,
	      compile: function compile(element) {
	        var content = element[0].template || element.html();
	        $templateCache.put(element.attr('id'), content);
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-toolbar
	 */
	
	/**
	 * @attribute var
	 * @initonly
	 * @type {String}
	 * @description
	 *  [en]Variable name to refer this toolbar.[/en]
	 *  [ja]このツールバーを参照するための名前を指定します。[/ja]
	 */
	(function () {
	  'use strict';
	
	  angular.module('onsen').directive('onsToolbar', ['$onsen', 'GenericView', function ($onsen, GenericView) {
	    return {
	      restrict: 'E',
	
	      // NOTE: This element must coexists with ng-controller.
	      // Do not use isolated scope and template's ng-transclude.
	      scope: false,
	      transclude: false,
	
	      compile: function compile(element) {
	        return {
	          pre: function pre(scope, element, attrs) {
	            // TODO: Remove this dirty fix!
	            if (element[0].nodeName === 'ons-toolbar') {
	              GenericView.register(scope, element, attrs, { viewKey: 'ons-toolbar' });
	            }
	          },
	          post: function post(scope, element, attrs) {
	            $onsen.fireComponentEvent(element[0], 'init');
	          }
	        };
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/**
	 * @element ons-toolbar-button
	 */
	
	/**
	 * @attribute var
	 * @initonly
	 * @type {String}
	 * @description
	 *   [en]Variable name to refer this button.[/en]
	 *   [ja]このボタンを参照するための名前を指定します。[/ja]
	 */
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  module.directive('onsToolbarButton', ['$onsen', 'GenericView', function ($onsen, GenericView) {
	    return {
	      restrict: 'E',
	      scope: false,
	      link: {
	        pre: function pre(scope, element, attrs) {
	          var toolbarButton = new GenericView(scope, element, attrs);
	          element.data('ons-toolbar-button', toolbarButton);
	          $onsen.declareVarAttribute(attrs, toolbarButton);
	
	          $onsen.addModifierMethodsForCustomElements(toolbarButton, element);
	
	          $onsen.cleaner.onDestroy(scope, function () {
	            toolbarButton._events = undefined;
	            $onsen.removeModifierMethods(toolbarButton);
	            element.data('ons-toolbar-button', undefined);
	            element = null;
	
	            $onsen.clearComponent({
	              scope: scope,
	              attrs: attrs,
	              element: element
	            });
	            scope = element = attrs = null;
	          });
	        },
	        post: function post(scope, element, attrs) {
	          $onsen.fireComponentEvent(element[0], 'init');
	        }
	      }
	    };
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  var ComponentCleaner = {
	    /**
	     * @param {jqLite} element
	     */
	    decomposeNode: function decomposeNode(element) {
	      var children = element.remove().children();
	      for (var i = 0; i < children.length; i++) {
	        ComponentCleaner.decomposeNode(angular.element(children[i]));
	      }
	    },
	
	    /**
	     * @param {Attributes} attrs
	     */
	    destroyAttributes: function destroyAttributes(attrs) {
	      attrs.$$element = null;
	      attrs.$$observers = null;
	    },
	
	    /**
	     * @param {jqLite} element
	     */
	    destroyElement: function destroyElement(element) {
	      element.remove();
	    },
	
	    /**
	     * @param {Scope} scope
	     */
	    destroyScope: function destroyScope(scope) {
	      scope.$$listeners = {};
	      scope.$$watchers = null;
	      scope = null;
	    },
	
	    /**
	     * @param {Scope} scope
	     * @param {Function} fn
	     */
	    onDestroy: function onDestroy(scope, fn) {
	      var clear = scope.$on('$destroy', function () {
	        clear();
	        fn.apply(null, arguments);
	      });
	    }
	  };
	
	  module.factory('ComponentCleaner', function () {
	    return ComponentCleaner;
	  });
	
	  // override builtin ng-(eventname) directives
	  (function () {
	    var ngEventDirectives = {};
	    'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' ').forEach(function (name) {
	      var directiveName = directiveNormalize('ng-' + name);
	      ngEventDirectives[directiveName] = ['$parse', function ($parse) {
	        return {
	          compile: function compile($element, attr) {
	            var fn = $parse(attr[directiveName]);
	            return function (scope, element, attr) {
	              var listener = function listener(event) {
	                scope.$apply(function () {
	                  fn(scope, { $event: event });
	                });
	              };
	              element.on(name, listener);
	
	              ComponentCleaner.onDestroy(scope, function () {
	                element.off(name, listener);
	                element = null;
	
	                ComponentCleaner.destroyScope(scope);
	                scope = null;
	
	                ComponentCleaner.destroyAttributes(attr);
	                attr = null;
	              });
	            };
	          }
	        };
	      }];
	
	      function directiveNormalize(name) {
	        return name.replace(/-([a-z])/g, function (matches) {
	          return matches[1].toUpperCase();
	        });
	      }
	    });
	    module.config(['$provide', function ($provide) {
	      var shift = function shift($delegate) {
	        $delegate.shift();
	        return $delegate;
	      };
	      Object.keys(ngEventDirectives).forEach(function (directiveName) {
	        $provide.decorator(directiveName + 'Directive', ['$delegate', shift]);
	      });
	    }]);
	    Object.keys(ngEventDirectives).forEach(function (directiveName) {
	      module.directive(directiveName, ngEventDirectives[directiveName]);
	    });
	  })();
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  var module = angular.module('onsen');
	
	  /**
	   * Internal service class for framework implementation.
	   */
	  module.factory('$onsen', ['$rootScope', '$window', '$cacheFactory', '$document', '$templateCache', '$http', '$q', '$compile', '$onsGlobal', 'ComponentCleaner', function ($rootScope, $window, $cacheFactory, $document, $templateCache, $http, $q, $compile, $onsGlobal, ComponentCleaner) {
	
	    var $onsen = createOnsenService();
	    var ModifierUtil = $onsGlobal._internal.ModifierUtil;
	
	    return $onsen;
	
	    function createOnsenService() {
	      return {
	
	        DIRECTIVE_TEMPLATE_URL: 'templates',
	
	        cleaner: ComponentCleaner,
	
	        DeviceBackButtonHandler: $onsGlobal._deviceBackButtonDispatcher,
	
	        _defaultDeviceBackButtonHandler: $onsGlobal._defaultDeviceBackButtonHandler,
	
	        /**
	         * @return {Object}
	         */
	        getDefaultDeviceBackButtonHandler: function getDefaultDeviceBackButtonHandler() {
	          return this._defaultDeviceBackButtonHandler;
	        },
	
	        /**
	         * @param {Object} view
	         * @param {Element} element
	         * @param {Array} methodNames
	         * @return {Function} A function that dispose all driving methods.
	         */
	        deriveMethods: function deriveMethods(view, element, methodNames) {
	          methodNames.forEach(function (methodName) {
	            view[methodName] = function () {
	              return element[methodName].apply(element, arguments);
	            };
	          });
	
	          return function () {
	            methodNames.forEach(function (methodName) {
	              view[methodName] = null;
	            });
	            view = element = null;
	          };
	        },
	
	        /**
	         * @param {Class} klass
	         * @param {Array} properties
	         */
	        derivePropertiesFromElement: function derivePropertiesFromElement(klass, properties) {
	          properties.forEach(function (property) {
	            Object.defineProperty(klass.prototype, property, {
	              get: function get() {
	                return this._element[0][property];
	              },
	              set: function set(value) {
	                return this._element[0][property] = value; // eslint-disable-line no-return-assign
	              }
	            });
	          });
	        },
	
	        /**
	         * @param {Object} view
	         * @param {Element} element
	         * @param {Array} eventNames
	         * @param {Function} [map]
	         * @return {Function} A function that clear all event listeners
	         */
	        deriveEvents: function deriveEvents(view, element, eventNames, map) {
	          map = map || function (detail) {
	            return detail;
	          };
	          eventNames = [].concat(eventNames);
	          var listeners = [];
	
	          eventNames.forEach(function (eventName) {
	            var listener = function listener(event) {
	              map(event.detail || {});
	              view.emit(eventName, event);
	            };
	            listeners.push(listener);
	            element.addEventListener(eventName, listener, false);
	          });
	
	          return function () {
	            eventNames.forEach(function (eventName, index) {
	              element.removeEventListener(eventName, listeners[index], false);
	            });
	            view = element = listeners = map = null;
	          };
	        },
	
	        /**
	         * @return {Boolean}
	         */
	        isEnabledAutoStatusBarFill: function isEnabledAutoStatusBarFill() {
	          return !!$onsGlobal._config.autoStatusBarFill;
	        },
	
	        /**
	         * @return {Boolean}
	         */
	        shouldFillStatusBar: $onsGlobal.shouldFillStatusBar,
	
	        /**
	         * @param {Function} action
	         */
	        autoStatusBarFill: $onsGlobal.autoStatusBarFill,
	
	        /**
	         * @param {Object} directive
	         * @param {HTMLElement} pageElement
	         * @param {Function} callback
	         */
	        compileAndLink: function compileAndLink(view, pageElement, callback) {
	          var link = $compile(pageElement);
	          var pageScope = view._scope.$new();
	
	          link(pageScope);
	
	          /**
	           * Overwrite page scope.
	           */
	          angular.element(pageElement).data('_scope', pageScope);
	
	          pageScope.$evalAsync(function () {
	            callback(pageElement);
	          });
	        },
	
	        /**
	         * @param {Object} view
	         * @return {Object} pageLoader
	         */
	        createPageLoader: function createPageLoader(view) {
	          var _this = this;
	
	          return new window.ons.PageLoader(function (_ref, done) {
	            var page = _ref.page,
	                parent = _ref.parent;
	
	            window.ons._internal.getPageHTMLAsync(page).then(function (html) {
	              _this.compileAndLink(view, window.ons._util.createElement(html.trim()), function (element) {
	                parent.appendChild(element);
	                done(element);
	              });
	            });
	          }, function (element) {
	            angular.element(element).data('_scope').$destroy();
	            element.remove();
	          });
	        },
	
	        /**
	         * @param {Object} params
	         * @param {Scope} [params.scope]
	         * @param {jqLite} [params.element]
	         * @param {Array} [params.elements]
	         * @param {Attributes} [params.attrs]
	         */
	        clearComponent: function clearComponent(params) {
	          if (params.scope) {
	            ComponentCleaner.destroyScope(params.scope);
	          }
	
	          if (params.attrs) {
	            ComponentCleaner.destroyAttributes(params.attrs);
	          }
	
	          if (params.element) {
	            ComponentCleaner.destroyElement(params.element);
	          }
	
	          if (params.elements) {
	            params.elements.forEach(function (element) {
	              ComponentCleaner.destroyElement(element);
	            });
	          }
	        },
	
	        /**
	         * @param {jqLite} element
	         * @param {String} name
	         */
	        findElementeObject: function findElementeObject(element, name) {
	          return element.inheritedData(name);
	        },
	
	        /**
	         * @param {String} page
	         * @return {Promise}
	         */
	        getPageHTMLAsync: function getPageHTMLAsync(page) {
	          var cache = $templateCache.get(page);
	
	          if (cache) {
	            var deferred = $q.defer();
	
	            var html = typeof cache === 'string' ? cache : cache[1];
	            deferred.resolve(this.normalizePageHTML(html));
	
	            return deferred.promise;
	          } else {
	            return $http({
	              url: page,
	              method: 'GET'
	            }).then(function (response) {
	              var html = response.data;
	
	              return this.normalizePageHTML(html);
	            }.bind(this));
	          }
	        },
	
	        /**
	         * @param {String} html
	         * @return {String}
	         */
	        normalizePageHTML: function normalizePageHTML(html) {
	          html = ('' + html).trim();
	
	          if (!html.match(/^<ons-page/)) {
	            html = '<ons-page _muted>' + html + '</ons-page>';
	          }
	
	          return html;
	        },
	
	        /**
	         * Create modifier templater function. The modifier templater generate css classes bound modifier name.
	         *
	         * @param {Object} attrs
	         * @param {Array} [modifiers] an array of appendix modifier
	         * @return {Function}
	         */
	        generateModifierTemplater: function generateModifierTemplater(attrs, modifiers) {
	          var attrModifiers = attrs && typeof attrs.modifier === 'string' ? attrs.modifier.trim().split(/ +/) : [];
	          modifiers = angular.isArray(modifiers) ? attrModifiers.concat(modifiers) : attrModifiers;
	
	          /**
	           * @return {String} template eg. 'ons-button--*', 'ons-button--*__item'
	           * @return {String}
	           */
	          return function (template) {
	            return modifiers.map(function (modifier) {
	              return template.replace('*', modifier);
	            }).join(' ');
	          };
	        },
	
	        /**
	         * Add modifier methods to view object for custom elements.
	         *
	         * @param {Object} view object
	         * @param {jqLite} element
	         */
	        addModifierMethodsForCustomElements: function addModifierMethodsForCustomElements(view, element) {
	          var methods = {
	            hasModifier: function hasModifier(needle) {
	              var tokens = ModifierUtil.split(element.attr('modifier'));
	              needle = typeof needle === 'string' ? needle.trim() : '';
	
	              return ModifierUtil.split(needle).some(function (needle) {
	                return tokens.indexOf(needle) != -1;
	              });
	            },
	
	            removeModifier: function removeModifier(needle) {
	              needle = typeof needle === 'string' ? needle.trim() : '';
	
	              var modifier = ModifierUtil.split(element.attr('modifier')).filter(function (token) {
	                return token !== needle;
	              }).join(' ');
	
	              element.attr('modifier', modifier);
	            },
	
	            addModifier: function addModifier(modifier) {
	              element.attr('modifier', element.attr('modifier') + ' ' + modifier);
	            },
	
	            setModifier: function setModifier(modifier) {
	              element.attr('modifier', modifier);
	            },
	
	            toggleModifier: function toggleModifier(modifier) {
	              if (this.hasModifier(modifier)) {
	                this.removeModifier(modifier);
	              } else {
	                this.addModifier(modifier);
	              }
	            }
	          };
	
	          for (var method in methods) {
	            if (methods.hasOwnProperty(method)) {
	              view[method] = methods[method];
	            }
	          }
	        },
	
	        /**
	         * Add modifier methods to view object.
	         *
	         * @param {Object} view object
	         * @param {String} template
	         * @param {jqLite} element
	         */
	        addModifierMethods: function addModifierMethods(view, template, element) {
	          var _tr = function _tr(modifier) {
	            return template.replace('*', modifier);
	          };
	
	          var fns = {
	            hasModifier: function hasModifier(modifier) {
	              return element.hasClass(_tr(modifier));
	            },
	
	            removeModifier: function removeModifier(modifier) {
	              element.removeClass(_tr(modifier));
	            },
	
	            addModifier: function addModifier(modifier) {
	              element.addClass(_tr(modifier));
	            },
	
	            setModifier: function setModifier(modifier) {
	              var classes = element.attr('class').split(/\s+/),
	                  patt = template.replace('*', '.');
	
	              for (var i = 0; i < classes.length; i++) {
	                var cls = classes[i];
	
	                if (cls.match(patt)) {
	                  element.removeClass(cls);
	                }
	              }
	
	              element.addClass(_tr(modifier));
	            },
	
	            toggleModifier: function toggleModifier(modifier) {
	              var cls = _tr(modifier);
	              if (element.hasClass(cls)) {
	                element.removeClass(cls);
	              } else {
	                element.addClass(cls);
	              }
	            }
	          };
	
	          var append = function append(oldFn, newFn) {
	            if (typeof oldFn !== 'undefined') {
	              return function () {
	                return oldFn.apply(null, arguments) || newFn.apply(null, arguments);
	              };
	            } else {
	              return newFn;
	            }
	          };
	
	          view.hasModifier = append(view.hasModifier, fns.hasModifier);
	          view.removeModifier = append(view.removeModifier, fns.removeModifier);
	          view.addModifier = append(view.addModifier, fns.addModifier);
	          view.setModifier = append(view.setModifier, fns.setModifier);
	          view.toggleModifier = append(view.toggleModifier, fns.toggleModifier);
	        },
	
	        /**
	         * Remove modifier methods.
	         *
	         * @param {Object} view object
	         */
	        removeModifierMethods: function removeModifierMethods(view) {
	          view.hasModifier = view.removeModifier = view.addModifier = view.setModifier = view.toggleModifier = undefined;
	        },
	
	        /**
	         * Define a variable to JavaScript global scope and AngularJS scope as 'var' attribute name.
	         *
	         * @param {Object} attrs
	         * @param object
	         */
	        declareVarAttribute: function declareVarAttribute(attrs, object) {
	          if (typeof attrs.var === 'string') {
	            var varName = attrs.var;
	            this._defineVar(varName, object);
	          }
	        },
	
	        _registerEventHandler: function _registerEventHandler(component, eventName) {
	          var capitalizedEventName = eventName.charAt(0).toUpperCase() + eventName.slice(1);
	
	          component.on(eventName, function (event) {
	            $onsen.fireComponentEvent(component._element[0], eventName, event && event.detail);
	
	            var handler = component._attrs['ons' + capitalizedEventName];
	            if (handler) {
	              component._scope.$eval(handler, { $event: event });
	              component._scope.$evalAsync();
	            }
	          });
	        },
	
	        /**
	         * Register event handlers for attributes.
	         *
	         * @param {Object} component
	         * @param {String} eventNames
	         */
	        registerEventHandlers: function registerEventHandlers(component, eventNames) {
	          eventNames = eventNames.trim().split(/\s+/);
	
	          for (var i = 0, l = eventNames.length; i < l; i++) {
	            var eventName = eventNames[i];
	            this._registerEventHandler(component, eventName);
	          }
	        },
	
	        /**
	         * @return {Boolean}
	         */
	        isAndroid: function isAndroid() {
	          return !!window.navigator.userAgent.match(/android/i);
	        },
	
	        /**
	         * @return {Boolean}
	         */
	        isIOS: function isIOS() {
	          return !!window.navigator.userAgent.match(/(ipad|iphone|ipod touch)/i);
	        },
	
	        /**
	         * @return {Boolean}
	         */
	        isWebView: function isWebView() {
	          return window.ons.isWebView();
	        },
	
	        /**
	         * @return {Boolean}
	         */
	        isIOS7above: function () {
	          var ua = window.navigator.userAgent;
	          var match = ua.match(/(iPad|iPhone|iPod touch);.*CPU.*OS (\d+)_(\d+)/i);
	
	          var result = match ? parseFloat(match[2] + '.' + match[3]) >= 7 : false;
	
	          return function () {
	            return result;
	          };
	        }(),
	
	        /**
	         * Fire a named event for a component. The view object, if it exists, is attached to event.component.
	         *
	         * @param {HTMLElement} [dom]
	         * @param {String} event name
	         */
	        fireComponentEvent: function fireComponentEvent(dom, eventName, data) {
	          data = data || {};
	
	          var event = document.createEvent('HTMLEvents');
	
	          for (var key in data) {
	            if (data.hasOwnProperty(key)) {
	              event[key] = data[key];
	            }
	          }
	
	          event.component = dom ? angular.element(dom).data(dom.nodeName.toLowerCase()) || null : null;
	          event.initEvent(dom.nodeName.toLowerCase() + ':' + eventName, true, true);
	
	          dom.dispatchEvent(event);
	        },
	
	        /**
	         * Define a variable to JavaScript global scope and AngularJS scope.
	         *
	         * Util.defineVar('foo', 'foo-value');
	         * // => window.foo and $scope.foo is now 'foo-value'
	         *
	         * Util.defineVar('foo.bar', 'foo-bar-value');
	         * // => window.foo.bar and $scope.foo.bar is now 'foo-bar-value'
	         *
	         * @param {String} name
	         * @param object
	         */
	        _defineVar: function _defineVar(name, object) {
	          var names = name.split(/\./);
	
	          function set(container, names, object) {
	            var name;
	            for (var i = 0; i < names.length - 1; i++) {
	              name = names[i];
	              if (container[name] === undefined || container[name] === null) {
	                container[name] = {};
	              }
	              container = container[name];
	            }
	
	            container[names[names.length - 1]] = object;
	
	            if (container[names[names.length - 1]] !== object) {
	              throw new Error('Cannot set var="' + object._attrs.var + '" because it will overwrite a read-only variable.');
	            }
	          }
	
	          if (ons.componentBase) {
	            set(ons.componentBase, names, object);
	          }
	
	          // Attach to ancestor with ons-scope attribute.
	          var element = object._element[0];
	
	          while (element.parentNode) {
	            if (element.hasAttribute('ons-scope')) {
	              set(angular.element(element).data('_scope'), names, object);
	              element = null;
	              return;
	            }
	
	            element = element.parentNode;
	          }
	          element = null;
	
	          // If no ons-scope element was found, attach to $rootScope.
	          set($rootScope, names, object);
	        }
	      };
	    }
	  }]);
	})();
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	['alert', 'confirm', 'prompt'].forEach(function (name) {
	  var originalNotification = ons.notification[name];
	
	  ons.notification[name] = function (message) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	    typeof message === 'string' ? options.message = message : options = message;
	
	    var compile = options.compile;
	    var $element = void 0;
	
	    options.compile = function (element) {
	      $element = angular.element(compile ? compile(element) : element);
	      return ons.$compile($element)($element.injector().get('$rootScope'));
	    };
	
	    options.destroy = function () {
	      $element.data('_scope').$destroy();
	      $element = null;
	    };
	
	    return originalNotification(options);
	  };
	});
	'use strict';
	
	// confirm to use jqLite
	if (window.jQuery && angular.element === window.jQuery) {
	  console.warn('Onsen UI require jqLite. Load jQuery after loading AngularJS to fix this error. jQuery may break Onsen UI behavior.'); // eslint-disable-line no-console
	}
	'use strict';
	
	/*
	Copyright 2013-2015 ASIAL CORPORATION
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	*/
	
	(function () {
	  'use strict';
	
	  angular.module('onsen').run(['$templateCache', function ($templateCache) {
	    var templates = window.document.querySelectorAll('script[type="text/ons-template"]');
	
	    for (var i = 0; i < templates.length; i++) {
	      var template = angular.element(templates[i]);
	      var id = template.attr('id');
	      if (typeof id === 'string') {
	        $templateCache.put(id, template.text());
	      }
	    }
	  }]);
	})();
	//# sourceMappingURL=data:application/json;charset=utf8;base64,
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10).setImmediate))

/***/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,